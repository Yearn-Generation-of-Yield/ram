/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BlockhashStoreInterface extends ethers.utils.Interface {
  functions: {
    "getBlockhash(uint256)": FunctionFragment;
    "store(uint256)": FunctionFragment;
    "storeEarliest()": FunctionFragment;
    "storeVerifyHeader(uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBlockhash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "store", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "storeEarliest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeVerifyHeader",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockhash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeEarliest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeVerifyHeader",
    data: BytesLike
  ): Result;

  events: {};
}

export class BlockhashStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BlockhashStoreInterface;

  functions: {
    getBlockhash(n: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getBlockhash(uint256)"(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    store(n: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    "store(uint256)"(
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    storeEarliest(overrides?: Overrides): Promise<ContractTransaction>;

    "storeEarliest()"(overrides?: Overrides): Promise<ContractTransaction>;

    storeVerifyHeader(
      n: BigNumberish,
      header: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "storeVerifyHeader(uint256,bytes)"(
      n: BigNumberish,
      header: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getBlockhash(n: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getBlockhash(uint256)"(
    n: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  store(n: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "store(uint256)"(
    n: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  storeEarliest(overrides?: Overrides): Promise<ContractTransaction>;

  "storeEarliest()"(overrides?: Overrides): Promise<ContractTransaction>;

  storeVerifyHeader(
    n: BigNumberish,
    header: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "storeVerifyHeader(uint256,bytes)"(
    n: BigNumberish,
    header: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getBlockhash(n: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getBlockhash(uint256)"(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    store(n: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "store(uint256)"(n: BigNumberish, overrides?: CallOverrides): Promise<void>;

    storeEarliest(overrides?: CallOverrides): Promise<void>;

    "storeEarliest()"(overrides?: CallOverrides): Promise<void>;

    storeVerifyHeader(
      n: BigNumberish,
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "storeVerifyHeader(uint256,bytes)"(
      n: BigNumberish,
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getBlockhash(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockhash(uint256)"(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    store(n: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "store(uint256)"(
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    storeEarliest(overrides?: Overrides): Promise<BigNumber>;

    "storeEarliest()"(overrides?: Overrides): Promise<BigNumber>;

    storeVerifyHeader(
      n: BigNumberish,
      header: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "storeVerifyHeader(uint256,bytes)"(
      n: BigNumberish,
      header: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockhash(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockhash(uint256)"(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    store(
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "store(uint256)"(
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    storeEarliest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "storeEarliest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    storeVerifyHeader(
      n: BigNumberish,
      header: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "storeVerifyHeader(uint256,bytes)"(
      n: BigNumberish,
      header: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
