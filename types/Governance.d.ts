/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernanceInterface extends ethers.utils.Interface {
  functions: {
    "RAMRouter()": FunctionFragment;
    "YGYToken()": FunctionFragment;
    "enterRegeneratorUpdateStagingMode()": FunctionFragment;
    "getDurationForLevel(uint256)": FunctionFragment;
    "getMultiplierForLevel(uint256)": FunctionFragment;
    "lastRAMRouterUpdateTime()": FunctionFragment;
    "setUserNumber(uint256)": FunctionFragment;
    "timelockYGY(uint256,uint256,uint256)": FunctionFragment;
    "unlockOldestTimelock(uint256)": FunctionFragment;
    "updateRAMRouterRegeneratorTax()": FunctionFragment;
    "updateStagingMode()": FunctionFragment;
    "updateStagingReadyTime()": FunctionFragment;
    "users(address)": FunctionFragment;
    "votingShares()": FunctionFragment;
    "weightedNumber()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RAMRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "YGYToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enterRegeneratorUpdateStagingMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDurationForLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplierForLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRAMRouterUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockYGY",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockOldestTimelock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRAMRouterRegeneratorTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStagingMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStagingReadyTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedNumber",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "RAMRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YGYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterRegeneratorUpdateStagingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDurationForLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplierForLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRAMRouterUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockYGY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockOldestTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRAMRouterRegeneratorTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStagingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStagingReadyTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedNumber",
    data: BytesLike
  ): Result;

  events: {};
}

export class Governance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernanceInterface;

  functions: {
    RAMRouter(overrides?: CallOverrides): Promise<[string]>;

    "RAMRouter()"(overrides?: CallOverrides): Promise<[string]>;

    YGYToken(overrides?: CallOverrides): Promise<[string]>;

    "YGYToken()"(overrides?: CallOverrides): Promise<[string]>;

    enterRegeneratorUpdateStagingMode(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enterRegeneratorUpdateStagingMode()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDurationForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDurationForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMultiplierForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplierForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRAMRouterUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastRAMRouterUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setUserNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUserNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timelockYGY(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "timelockYGY(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockOldestTimelock(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlockOldestTimelock(uint256)"(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRAMRouterRegeneratorTax(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRAMRouterRegeneratorTax()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStagingMode(overrides?: CallOverrides): Promise<[boolean]>;

    "updateStagingMode()"(overrides?: CallOverrides): Promise<[boolean]>;

    updateStagingReadyTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "updateStagingReadyTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { number: BigNumber; timelockedYGY: BigNumber }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { number: BigNumber; timelockedYGY: BigNumber }
    >;

    votingShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightedNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weightedNumber()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  RAMRouter(overrides?: CallOverrides): Promise<string>;

  "RAMRouter()"(overrides?: CallOverrides): Promise<string>;

  YGYToken(overrides?: CallOverrides): Promise<string>;

  "YGYToken()"(overrides?: CallOverrides): Promise<string>;

  enterRegeneratorUpdateStagingMode(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enterRegeneratorUpdateStagingMode()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDurationForLevel(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDurationForLevel(uint256)"(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultiplierForLevel(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplierForLevel(uint256)"(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRAMRouterUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRAMRouterUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  setUserNumber(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUserNumber(uint256)"(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timelockYGY(
    _amount: BigNumberish,
    _level: BigNumberish,
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "timelockYGY(uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _level: BigNumberish,
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockOldestTimelock(
    _level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlockOldestTimelock(uint256)"(
    _level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRAMRouterRegeneratorTax(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRAMRouterRegeneratorTax()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStagingMode(overrides?: CallOverrides): Promise<boolean>;

  "updateStagingMode()"(overrides?: CallOverrides): Promise<boolean>;

  updateStagingReadyTime(overrides?: CallOverrides): Promise<BigNumber>;

  "updateStagingReadyTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { number: BigNumber; timelockedYGY: BigNumber }
  >;

  "users(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { number: BigNumber; timelockedYGY: BigNumber }
  >;

  votingShares(overrides?: CallOverrides): Promise<BigNumber>;

  "votingShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  weightedNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "weightedNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    RAMRouter(overrides?: CallOverrides): Promise<string>;

    "RAMRouter()"(overrides?: CallOverrides): Promise<string>;

    YGYToken(overrides?: CallOverrides): Promise<string>;

    "YGYToken()"(overrides?: CallOverrides): Promise<string>;

    enterRegeneratorUpdateStagingMode(overrides?: CallOverrides): Promise<void>;

    "enterRegeneratorUpdateStagingMode()"(
      overrides?: CallOverrides
    ): Promise<void>;

    getDurationForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDurationForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplierForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplierForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRAMRouterUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRAMRouterUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUserNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserNumber(uint256)"(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timelockYGY(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "timelockYGY(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockOldestTimelock(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockOldestTimelock(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRAMRouterRegeneratorTax(overrides?: CallOverrides): Promise<void>;

    "updateRAMRouterRegeneratorTax()"(overrides?: CallOverrides): Promise<void>;

    updateStagingMode(overrides?: CallOverrides): Promise<boolean>;

    "updateStagingMode()"(overrides?: CallOverrides): Promise<boolean>;

    updateStagingReadyTime(overrides?: CallOverrides): Promise<BigNumber>;

    "updateStagingReadyTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { number: BigNumber; timelockedYGY: BigNumber }
    >;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { number: BigNumber; timelockedYGY: BigNumber }
    >;

    votingShares(overrides?: CallOverrides): Promise<BigNumber>;

    "votingShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    weightedNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "weightedNumber()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    RAMRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "RAMRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    YGYToken(overrides?: CallOverrides): Promise<BigNumber>;

    "YGYToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    enterRegeneratorUpdateStagingMode(
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enterRegeneratorUpdateStagingMode()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDurationForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDurationForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplierForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplierForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRAMRouterUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRAMRouterUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUserNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUserNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    timelockYGY(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "timelockYGY(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockOldestTimelock(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlockOldestTimelock(uint256)"(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRAMRouterRegeneratorTax(overrides?: Overrides): Promise<BigNumber>;

    "updateRAMRouterRegeneratorTax()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateStagingMode(overrides?: CallOverrides): Promise<BigNumber>;

    "updateStagingMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateStagingReadyTime(overrides?: CallOverrides): Promise<BigNumber>;

    "updateStagingReadyTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingShares(overrides?: CallOverrides): Promise<BigNumber>;

    "votingShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    weightedNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "weightedNumber()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    RAMRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RAMRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YGYToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YGYToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterRegeneratorUpdateStagingMode(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enterRegeneratorUpdateStagingMode()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDurationForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDurationForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplierForLevel(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplierForLevel(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRAMRouterUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRAMRouterUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUserNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUserNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timelockYGY(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "timelockYGY(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _level: BigNumberish,
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockOldestTimelock(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlockOldestTimelock(uint256)"(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRAMRouterRegeneratorTax(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRAMRouterRegeneratorTax()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateStagingMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "updateStagingMode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateStagingReadyTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "updateStagingReadyTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weightedNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weightedNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
