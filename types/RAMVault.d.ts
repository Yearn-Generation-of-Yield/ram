/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RAMVaultInterface extends ethers.utils.Interface {
  functions: {
    "addPendingRewards(uint256)": FunctionFragment;
    "addPool(uint256,address,bool)": FunctionFragment;
    "addRAMRewardsOwner(uint256)": FunctionFragment;
    "addYGYRewardsOwner(uint256)": FunctionFragment;
    "burnSuperAdmin()": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositFor(address,uint256,uint256)": FunctionFragment;
    "devaddr()": FunctionFragment;
    "distributeFees()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "newSuperAdmin(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchase(uint256,uint256)": FunctionFragment;
    "regeneratoraddr()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "setAllowanceForPoolToken(address,uint256,uint256)": FunctionFragment;
    "setDevFee(uint16)": FunctionFragment;
    "setDevFeeReciever(address,address)": FunctionFragment;
    "setStrategyContractOrDistributionContractAllowance(address,uint256,address)": FunctionFragment;
    "startNewEpoch()": FunctionFragment;
    "superAdmin()": FunctionFragment;
    "teamaddr()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRAMDevFee()": FunctionFragment;
    "transferYGYDevFee()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawFrom(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPendingRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addRAMRewardsOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addYGYRewardsOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSuperAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "newSuperAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regeneratoraddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowanceForPoolToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFeeReciever",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyContractOrDistributionContractAllowance",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "teamaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRAMDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferYGYDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRAMRewardsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addYGYRewardsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regeneratoraddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowanceForPoolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDevFeeReciever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyContractOrDistributionContractAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRAMDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferYGYDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256,uint256)": EventFragment;
    "Boost(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardPaid(uint256,address)": EventFragment;
    "SuperAdminTransfered(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Boost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperAdminTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class RAMVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RAMVaultInterface;

  functions: {
    addPendingRewards(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPendingRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPool(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addRAMRewardsOwner(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRAMRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addYGYRewardsOwner(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addYGYRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnSuperAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "burnSuperAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimRewards(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositFor(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(address,uint256,uint256)"(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devaddr(overrides?: CallOverrides): Promise<[string]>;

    "devaddr()"(overrides?: CallOverrides): Promise<[string]>;

    distributeFees(overrides?: Overrides): Promise<ContractTransaction>;

    "distributeFees()"(overrides?: Overrides): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      superAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      superAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newSuperAdmin(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newSuperAdmin(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,uint256,address)"(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    purchase(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "purchase(uint256,uint256)"(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    regeneratoraddr(overrides?: CallOverrides): Promise<[string]>;

    "regeneratoraddr()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAllowanceForPoolToken(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowanceForPoolToken(address,uint256,uint256)"(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevFee(
      _DEV_FEE: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevFee(uint16)"(
      _DEV_FEE: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevFeeReciever(
      _devaddr: string,
      _teamaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevFeeReciever(address,address)"(
      _devaddr: string,
      _teamaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategyContractOrDistributionContractAllowance(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategyContractOrDistributionContractAllowance(address,uint256,address)"(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startNewEpoch(overrides?: Overrides): Promise<ContractTransaction>;

    "startNewEpoch()"(overrides?: Overrides): Promise<ContractTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<[string]>;

    "superAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    teamaddr(overrides?: CallOverrides): Promise<[string]>;

    "teamaddr()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferRAMDevFee(overrides?: Overrides): Promise<ContractTransaction>;

    "transferRAMDevFee()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferYGYDevFee(overrides?: Overrides): Promise<ContractTransaction>;

    "transferYGYDevFee()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFrom(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFrom(address,uint256,uint256)"(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addPendingRewards(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPendingRewards(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPool(
    _allocPoint: BigNumberish,
    _token: string,
    _withdrawable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _token: string,
    _withdrawable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addRAMRewardsOwner(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRAMRewardsOwner(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addYGYRewardsOwner(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addYGYRewardsOwner(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnSuperAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "burnSuperAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimRewards(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimRewards(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositFor(
    _depositFor: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(address,uint256,uint256)"(
    _depositFor: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  distributeFees(overrides?: Overrides): Promise<ContractTransaction>;

  "distributeFees()"(overrides?: Overrides): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    superAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    superAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newSuperAdmin(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newSuperAdmin(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    _caller: string,
    _previousOwner: string,
    _tokenId: BigNumberish,
    _poolId: BigNumberish,
    _contractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,uint256,address)"(
    _caller: string,
    _previousOwner: string,
    _tokenId: BigNumberish,
    _poolId: BigNumberish,
    _contractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  purchase(
    _pid: BigNumberish,
    _level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "purchase(uint256,uint256)"(
    _pid: BigNumberish,
    _level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  regeneratoraddr(overrides?: CallOverrides): Promise<string>;

  "regeneratoraddr()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withdrawable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withdrawable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAllowanceForPoolToken(
    spender: string,
    _pid: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowanceForPoolToken(address,uint256,uint256)"(
    spender: string,
    _pid: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevFee(
    _DEV_FEE: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevFee(uint16)"(
    _DEV_FEE: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevFeeReciever(
    _devaddr: string,
    _teamaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevFeeReciever(address,address)"(
    _devaddr: string,
    _teamaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategyContractOrDistributionContractAllowance(
    tokenAddress: string,
    _amount: BigNumberish,
    contractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategyContractOrDistributionContractAllowance(address,uint256,address)"(
    tokenAddress: string,
    _amount: BigNumberish,
    contractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startNewEpoch(overrides?: Overrides): Promise<ContractTransaction>;

  "startNewEpoch()"(overrides?: Overrides): Promise<ContractTransaction>;

  superAdmin(overrides?: CallOverrides): Promise<string>;

  "superAdmin()"(overrides?: CallOverrides): Promise<string>;

  teamaddr(overrides?: CallOverrides): Promise<string>;

  "teamaddr()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferRAMDevFee(overrides?: Overrides): Promise<ContractTransaction>;

  "transferRAMDevFee()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferYGYDevFee(overrides?: Overrides): Promise<ContractTransaction>;

  "transferYGYDevFee()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFrom(
    owner: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFrom(address,uint256,uint256)"(
    owner: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addPendingRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPendingRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addRAMRewardsOwner(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRAMRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addYGYRewardsOwner(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addYGYRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnSuperAdmin(overrides?: CallOverrides): Promise<void>;

    "burnSuperAdmin()"(overrides?: CallOverrides): Promise<void>;

    claimRewards(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claimRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(address,uint256,uint256)"(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    distributeFees(overrides?: CallOverrides): Promise<void>;

    "distributeFees()"(overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(superAdmin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      superAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newSuperAdmin(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "newSuperAdmin(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,uint256,address)"(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    purchase(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchase(uint256,uint256)"(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    regeneratoraddr(overrides?: CallOverrides): Promise<string>;

    "regeneratoraddr()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowanceForPoolToken(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowanceForPoolToken(address,uint256,uint256)"(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevFee(_DEV_FEE: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setDevFee(uint16)"(
      _DEV_FEE: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevFeeReciever(
      _devaddr: string,
      _teamaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevFeeReciever(address,address)"(
      _devaddr: string,
      _teamaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyContractOrDistributionContractAllowance(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategyContractOrDistributionContractAllowance(address,uint256,address)"(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewEpoch(overrides?: CallOverrides): Promise<void>;

    "startNewEpoch()"(overrides?: CallOverrides): Promise<void>;

    superAdmin(overrides?: CallOverrides): Promise<string>;

    "superAdmin()"(overrides?: CallOverrides): Promise<string>;

    teamaddr(overrides?: CallOverrides): Promise<string>;

    "teamaddr()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRAMDevFee(overrides?: CallOverrides): Promise<void>;

    "transferRAMDevFee()"(overrides?: CallOverrides): Promise<void>;

    transferYGYDevFee(overrides?: CallOverrides): Promise<void>;

    "transferYGYDevFee()"(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFrom(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFrom(address,uint256,uint256)"(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      _pid: null,
      value: null
    ): EventFilter;

    Boost(
      user: string | null,
      pid: BigNumberish | null,
      level: BigNumberish | null
    ): EventFilter;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RewardPaid(pid: null, to: null): EventFilter;

    SuperAdminTransfered(previousOwner: null, newOwner: null): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    addPendingRewards(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPendingRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPool(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addRAMRewardsOwner(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRAMRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addYGYRewardsOwner(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addYGYRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnSuperAdmin(overrides?: Overrides): Promise<BigNumber>;

    "burnSuperAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    claimRewards(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claimRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositFor(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(address,uint256,uint256)"(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFees(overrides?: Overrides): Promise<BigNumber>;

    "distributeFees()"(overrides?: Overrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(superAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      superAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newSuperAdmin(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "newSuperAdmin(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,uint256,address)"(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "purchase(uint256,uint256)"(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    regeneratoraddr(overrides?: CallOverrides): Promise<BigNumber>;

    "regeneratoraddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAllowanceForPoolToken(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowanceForPoolToken(address,uint256,uint256)"(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevFee(
      _DEV_FEE: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevFee(uint16)"(
      _DEV_FEE: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevFeeReciever(
      _devaddr: string,
      _teamaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevFeeReciever(address,address)"(
      _devaddr: string,
      _teamaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategyContractOrDistributionContractAllowance(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategyContractOrDistributionContractAllowance(address,uint256,address)"(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startNewEpoch(overrides?: Overrides): Promise<BigNumber>;

    "startNewEpoch()"(overrides?: Overrides): Promise<BigNumber>;

    superAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "superAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    teamaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "teamaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferRAMDevFee(overrides?: Overrides): Promise<BigNumber>;

    "transferRAMDevFee()"(overrides?: Overrides): Promise<BigNumber>;

    transferYGYDevFee(overrides?: Overrides): Promise<BigNumber>;

    "transferYGYDevFee()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFrom(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFrom(address,uint256,uint256)"(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPendingRewards(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPendingRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPool(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _token: string,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addRAMRewardsOwner(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRAMRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addYGYRewardsOwner(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addYGYRewardsOwner(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnSuperAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "burnSuperAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimRewards(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(address,uint256,uint256)"(
      _depositFor: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeFees(overrides?: Overrides): Promise<PopulatedTransaction>;

    "distributeFees()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      superAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      superAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newSuperAdmin(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newSuperAdmin(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,uint256,address)"(
      _caller: string,
      _previousOwner: string,
      _tokenId: BigNumberish,
      _poolId: BigNumberish,
      _contractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "purchase(uint256,uint256)"(
      _pid: BigNumberish,
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    regeneratoraddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "regeneratoraddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAllowanceForPoolToken(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowanceForPoolToken(address,uint256,uint256)"(
      spender: string,
      _pid: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevFee(
      _DEV_FEE: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevFee(uint16)"(
      _DEV_FEE: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevFeeReciever(
      _devaddr: string,
      _teamaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevFeeReciever(address,address)"(
      _devaddr: string,
      _teamaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategyContractOrDistributionContractAllowance(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategyContractOrDistributionContractAllowance(address,uint256,address)"(
      tokenAddress: string,
      _amount: BigNumberish,
      contractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startNewEpoch(overrides?: Overrides): Promise<PopulatedTransaction>;

    "startNewEpoch()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "superAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "teamaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferRAMDevFee(overrides?: Overrides): Promise<PopulatedTransaction>;

    "transferRAMDevFee()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferYGYDevFee(overrides?: Overrides): Promise<PopulatedTransaction>;

    "transferYGYDevFee()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFrom(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFrom(address,uint256,uint256)"(
      owner: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
