/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NFTFactoryInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "bondContract(address)": FunctionFragment;
    "bondedContract()": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "contracts(uint256)": FunctionFragment;
    "deployNFT(string,string,string,uint256,uint256,address,bool,bool,uint256)": FunctionFragment;
    "getContractCount()": FunctionFragment;
    "mint(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNFTProperties(address,tuple[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondedContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNFT",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      boolean,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTProperties",
    values: [
      string,
      { pType: string; pValue: BigNumberish; extra: BytesLike }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NFTBurned(string,address,uint256)": EventFragment;
    "NFTMinted(string,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class NFTFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NFTFactoryInterface;

  functions: {
    balanceOf(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,address)"(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondContract(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bondContract(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bondedContract(overrides?: CallOverrides): Promise<[string]>;

    "bondedContract()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "contracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployNFT(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployNFT(string,string,string,uint256,uint256,address,bool,bool,uint256)"(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getContractCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { contractCount: BigNumber }>;

    "getContractCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { contractCount: BigNumber }>;

    mint(
      _nft: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,address)"(
      _nft: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setNFTProperties(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNFTProperties(address,tuple[])"(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _nft: string,
    _who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    _nft: string,
    _who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondContract(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bondContract(address)"(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bondedContract(overrides?: CallOverrides): Promise<string>;

  "bondedContract()"(overrides?: CallOverrides): Promise<string>;

  burn(
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "contracts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deployNFT(
    name: string,
    symbol: string,
    tokenURI: string,
    contractId: BigNumberish,
    propertyChoices: BigNumberish,
    admin: string,
    allowTrade: boolean,
    isCapped: boolean,
    capAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployNFT(string,string,string,uint256,uint256,address,bool,bool,uint256)"(
    name: string,
    symbol: string,
    tokenURI: string,
    contractId: BigNumberish,
    propertyChoices: BigNumberish,
    admin: string,
    allowTrade: boolean,
    isCapped: boolean,
    capAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getContractCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getContractCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _nft: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,address)"(
    _nft: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setNFTProperties(
    _nft: string,
    _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNFTProperties(address,tuple[])"(
    _nft: string,
    _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondContract(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    "bondContract(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bondedContract(overrides?: CallOverrides): Promise<string>;

    "bondedContract()"(overrides?: CallOverrides): Promise<string>;

    burn(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "contracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNFT(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployNFT(string,string,string,uint256,uint256,address,bool,bool,uint256)"(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getContractCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _nft: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,address)"(
      _nft: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setNFTProperties(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setNFTProperties(address,tuple[])"(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NFTBurned(tokenName: null, from: null, tokenId: null): EventFilter;

    NFTMinted(tokenName: null, to: null, tokenId: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    balanceOf(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondContract(_addr: string, overrides?: Overrides): Promise<BigNumber>;

    "bondContract(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bondedContract(overrides?: CallOverrides): Promise<BigNumber>;

    "bondedContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployNFT(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployNFT(string,string,string,uint256,uint256,address,bool,bool,uint256)"(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getContractCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getContractCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(_nft: string, _to: string, overrides?: Overrides): Promise<BigNumber>;

    "mint(address,address)"(
      _nft: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setNFTProperties(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNFTProperties(address,tuple[])"(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      _nft: string,
      _who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondContract(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bondContract(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bondedContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bondedContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployNFT(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployNFT(string,string,string,uint256,uint256,address,bool,bool,uint256)"(
      name: string,
      symbol: string,
      tokenURI: string,
      contractId: BigNumberish,
      propertyChoices: BigNumberish,
      admin: string,
      allowTrade: boolean,
      isCapped: boolean,
      capAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getContractCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getContractCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _nft: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,address)"(
      _nft: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setNFTProperties(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNFTProperties(address,tuple[])"(
      _nft: string,
      _properties: { pType: string; pValue: BigNumberish; extra: BytesLike }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
