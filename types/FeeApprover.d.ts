/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeeApproverInterface extends ethers.utils.Interface {
  functions: {
    "calculateAmountsAfterFee(address,address,uint256)": FunctionFragment;
    "editNoFeeList(address,bool)": FunctionFragment;
    "feePercentX100()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "lastTotalSupplyOfLPTokens()": FunctionFragment;
    "noFeeList(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeMultiplier(uint8)": FunctionFragment;
    "setMinimumLiquidityToTriggerStop(uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setRamVaultAddress(address)": FunctionFragment;
    "sync()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateAmountsAfterFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editNoFeeList",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentX100",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTotalSupplyOfLPTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "noFeeList", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiquidityToTriggerStop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setRamVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAmountsAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editNoFeeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentX100",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTotalSupplyOfLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "noFeeList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiquidityToTriggerStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRamVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FeeApprover extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeeApproverInterface;

  functions: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    editNoFeeList(
      _address: string,
      noFee: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editNoFeeList(address,bool)"(
      _address: string,
      noFee: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feePercentX100(overrides?: CallOverrides): Promise<[number]>;

    "feePercentX100()"(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastTotalSupplyOfLPTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastTotalSupplyOfLPTokens()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    noFeeList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "noFeeList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeMultiplier(uint8)"(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumLiquidityToTriggerStop(
      finneyAmnt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumLiquidityToTriggerStop(uint256)"(
      finneyAmnt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRamVaultAddress(
      _ramVaultAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRamVaultAddress(address)"(
      _ramVaultAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sync(overrides?: Overrides): Promise<ContractTransaction>;

    "sync()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<[string]>;
  };

  calculateAmountsAfterFee(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateAmountsAfterFee(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  editNoFeeList(
    _address: string,
    noFee: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editNoFeeList(address,bool)"(
    _address: string,
    noFee: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feePercentX100(overrides?: CallOverrides): Promise<number>;

  "feePercentX100()"(overrides?: CallOverrides): Promise<number>;

  initialize(
    _RAMAddress: string,
    _YGYAddress: string,
    _uniswapFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _RAMAddress: string,
    _YGYAddress: string,
    _uniswapFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastTotalSupplyOfLPTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTotalSupplyOfLPTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  noFeeList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "noFeeList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFeeMultiplier(
    _feeMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeMultiplier(uint8)"(
    _feeMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumLiquidityToTriggerStop(
    finneyAmnt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumLiquidityToTriggerStop(uint256)"(
    finneyAmnt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPaused(
    _pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(bool)"(
    _pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRamVaultAddress(
    _ramVaultAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRamVaultAddress(address)"(
    _ramVaultAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sync(overrides?: Overrides): Promise<ContractTransaction>;

  "sync()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        transferToAmount: BigNumber;
        transferToFeeDistributorAmount: BigNumber;
      }
    >;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        transferToAmount: BigNumber;
        transferToFeeDistributorAmount: BigNumber;
      }
    >;

    editNoFeeList(
      _address: string,
      noFee: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "editNoFeeList(address,bool)"(
      _address: string,
      noFee: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    feePercentX100(overrides?: CallOverrides): Promise<number>;

    "feePercentX100()"(overrides?: CallOverrides): Promise<number>;

    initialize(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTotalSupplyOfLPTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTotalSupplyOfLPTokens()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noFeeList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "noFeeList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeMultiplier(uint8)"(
      _feeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumLiquidityToTriggerStop(
      finneyAmnt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumLiquidityToTriggerStop(uint256)"(
      finneyAmnt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRamVaultAddress(
      _ramVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRamVaultAddress(address)"(
      _ramVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { lastIsMint: boolean; lpTokenBurn: boolean }
    >;

    "sync()"(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { lastIsMint: boolean; lpTokenBurn: boolean }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    editNoFeeList(
      _address: string,
      noFee: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editNoFeeList(address,bool)"(
      _address: string,
      noFee: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feePercentX100(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercentX100()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastTotalSupplyOfLPTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTotalSupplyOfLPTokens()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noFeeList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "noFeeList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeMultiplier(uint8)"(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumLiquidityToTriggerStop(
      finneyAmnt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumLiquidityToTriggerStop(uint256)"(
      finneyAmnt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPaused(_pause: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRamVaultAddress(
      _ramVaultAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRamVaultAddress(address)"(
      _ramVaultAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sync(overrides?: Overrides): Promise<BigNumber>;

    "sync()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    editNoFeeList(
      _address: string,
      noFee: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editNoFeeList(address,bool)"(
      _address: string,
      noFee: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feePercentX100(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePercentX100()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _RAMAddress: string,
      _YGYAddress: string,
      _uniswapFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastTotalSupplyOfLPTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTotalSupplyOfLPTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noFeeList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "noFeeList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeMultiplier(uint8)"(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumLiquidityToTriggerStop(
      finneyAmnt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumLiquidityToTriggerStop(uint256)"(
      finneyAmnt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRamVaultAddress(
      _ramVaultAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRamVaultAddress(address)"(
      _ramVaultAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sync(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sync()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
