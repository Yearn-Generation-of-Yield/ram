/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RAMv1RouterInterface extends ethers.utils.Interface {
  functions: {
    "MAX()": FunctionFragment;
    "OFFSET()": FunctionFragment;
    "SCALE()": FunctionFragment;
    "SCALIFIER()": FunctionFragment;
    "_NFTFactory()": FunctionFragment;
    "_RAMToken()": FunctionFragment;
    "_RAMVault()": FunctionFragment;
    "_WETH()": FunctionFragment;
    "_YGYRAMPair()": FunctionFragment;
    "_YGYToken()": FunctionFragment;
    "_YGYWETHPair()": FunctionFragment;
    "_dXIOTToken()": FunctionFragment;
    "_feeApprover()": FunctionFragment;
    "_uniV2Factory()": FunctionFragment;
    "addLiquidityETHOnly(address,bool)": FunctionFragment;
    "addLiquidityYGYOnly(uint256,bool)": FunctionFragment;
    "changeFeeApprover(address)": FunctionFragment;
    "getLPTokenPerYGYUnit(uint256)": FunctionFragment;
    "getRandomNumber(uint256)": FunctionFragment;
    "getUserLotteryLevel(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "nonces(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "randomResult()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "refreshApproval()": FunctionFragment;
    "regenerator()": FunctionFragment;
    "regeneratorTax()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rngLinkFee()": FunctionFragment;
    "selfRequestRandomNumber(uint256)": FunctionFragment;
    "setFeeApprover(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setRegeneratorTax(uint256)": FunctionFragment;
    "setTokens()": FunctionFragment;
    "sync()": FunctionFragment;
    "ticketCount()": FunctionFragment;
    "tickets(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateKeyHash(bytes32)": FunctionFragment;
    "updateRngLinkFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "OFFSET", values?: undefined): string;
  encodeFunctionData(functionFragment: "SCALE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SCALIFIER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_NFTFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_RAMToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "_RAMVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "_WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_YGYRAMPair",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_YGYToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_YGYWETHPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_dXIOTToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_feeApprover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_uniV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETHOnly",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityYGYOnly",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeApprover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenPerYGYUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLotteryLevel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "regenerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "regeneratorTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rngLinkFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selfRequestRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeApprover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegeneratorTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRngLinkFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OFFSET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SCALE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SCALIFIER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_NFTFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_RAMToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_RAMVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_YGYRAMPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_YGYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_YGYWETHPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_dXIOTToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_feeApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uniV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETHOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityYGYOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenPerYGYUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLotteryLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regenerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regeneratorTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rngLinkFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfRequestRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegeneratorTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRngLinkFee",
    data: BytesLike
  ): Result;

  events: {
    "FeeApproverChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeApproverChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RAMv1Router extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RAMv1RouterInterface;

  functions: {
    MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    OFFSET(overrides?: CallOverrides): Promise<[BigNumber]>;

    "OFFSET()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SCALE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALIFIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SCALIFIER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _NFTFactory(overrides?: CallOverrides): Promise<[string]>;

    "_NFTFactory()"(overrides?: CallOverrides): Promise<[string]>;

    _RAMToken(overrides?: CallOverrides): Promise<[string]>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<[string]>;

    _RAMVault(overrides?: CallOverrides): Promise<[string]>;

    "_RAMVault()"(overrides?: CallOverrides): Promise<[string]>;

    _WETH(overrides?: CallOverrides): Promise<[string]>;

    "_WETH()"(overrides?: CallOverrides): Promise<[string]>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<[string]>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<[string]>;

    _YGYToken(overrides?: CallOverrides): Promise<[string]>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<[string]>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<[string]>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<[string]>;

    _dXIOTToken(overrides?: CallOverrides): Promise<[string]>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<[string]>;

    _feeApprover(overrides?: CallOverrides): Promise<[string]>;

    "_feeApprover()"(overrides?: CallOverrides): Promise<[string]>;

    _uniV2Factory(overrides?: CallOverrides): Promise<[string]>;

    "_uniV2Factory()"(overrides?: CallOverrides): Promise<[string]>;

    addLiquidityETHOnly(
      to: string,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityETHOnly(address,bool)"(
      to: string,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addLiquidityYGYOnly(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityYGYOnly(uint256,bool)"(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    changeFeeApprover(
      feeApprover: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeFeeApprover(address)"(
      feeApprover: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLPTokenPerYGYUnit(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    "getLPTokenPerYGYUnit(uint256)"(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    getRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserLotteryLevel(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserLotteryLevel(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    randomResult(overrides?: CallOverrides): Promise<[BigNumber]>;

    "randomResult()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refreshApproval(overrides?: Overrides): Promise<ContractTransaction>;

    "refreshApproval()"(overrides?: Overrides): Promise<ContractTransaction>;

    regenerator(overrides?: CallOverrides): Promise<[string]>;

    "regenerator()"(overrides?: CallOverrides): Promise<[string]>;

    regeneratorTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "regeneratorTax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rngLinkFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rngLinkFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    selfRequestRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "selfRequestRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeApprover(
      feeApproverAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeApprover(address)"(
      feeApproverAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegeneratorTax(
      _regeneratorTax: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegeneratorTax(uint256)"(
      _regeneratorTax: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "setTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

    sync(overrides?: Overrides): Promise<ContractTransaction>;

    "sync()"(overrides?: Overrides): Promise<ContractTransaction>;

    ticketCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ticketCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateKeyHash(
      _keyHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateKeyHash(bytes32)"(
      _keyHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRngLinkFee(
      _rngLinkFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRngLinkFee(uint256)"(
      _rngLinkFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX()"(overrides?: CallOverrides): Promise<BigNumber>;

  OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

  "OFFSET()"(overrides?: CallOverrides): Promise<BigNumber>;

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  "SCALE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SCALIFIER(overrides?: CallOverrides): Promise<BigNumber>;

  "SCALIFIER()"(overrides?: CallOverrides): Promise<BigNumber>;

  _NFTFactory(overrides?: CallOverrides): Promise<string>;

  "_NFTFactory()"(overrides?: CallOverrides): Promise<string>;

  _RAMToken(overrides?: CallOverrides): Promise<string>;

  "_RAMToken()"(overrides?: CallOverrides): Promise<string>;

  _RAMVault(overrides?: CallOverrides): Promise<string>;

  "_RAMVault()"(overrides?: CallOverrides): Promise<string>;

  _WETH(overrides?: CallOverrides): Promise<string>;

  "_WETH()"(overrides?: CallOverrides): Promise<string>;

  _YGYRAMPair(overrides?: CallOverrides): Promise<string>;

  "_YGYRAMPair()"(overrides?: CallOverrides): Promise<string>;

  _YGYToken(overrides?: CallOverrides): Promise<string>;

  "_YGYToken()"(overrides?: CallOverrides): Promise<string>;

  _YGYWETHPair(overrides?: CallOverrides): Promise<string>;

  "_YGYWETHPair()"(overrides?: CallOverrides): Promise<string>;

  _dXIOTToken(overrides?: CallOverrides): Promise<string>;

  "_dXIOTToken()"(overrides?: CallOverrides): Promise<string>;

  _feeApprover(overrides?: CallOverrides): Promise<string>;

  "_feeApprover()"(overrides?: CallOverrides): Promise<string>;

  _uniV2Factory(overrides?: CallOverrides): Promise<string>;

  "_uniV2Factory()"(overrides?: CallOverrides): Promise<string>;

  addLiquidityETHOnly(
    to: string,
    autoStake: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityETHOnly(address,bool)"(
    to: string,
    autoStake: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addLiquidityYGYOnly(
    amount: BigNumberish,
    autoStake: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityYGYOnly(uint256,bool)"(
    amount: BigNumberish,
    autoStake: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  changeFeeApprover(
    feeApprover: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeFeeApprover(address)"(
    feeApprover: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLPTokenPerYGYUnit(
    ygyAmt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLPTokenPerYGYUnit(uint256)"(
    ygyAmt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRandomNumber(
    userProvidedSeed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getRandomNumber(uint256)"(
    userProvidedSeed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserLotteryLevel(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserLotteryLevel(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  randomResult(overrides?: CallOverrides): Promise<BigNumber>;

  "randomResult()"(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rawFulfillRandomness(bytes32,uint256)"(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refreshApproval(overrides?: Overrides): Promise<ContractTransaction>;

  "refreshApproval()"(overrides?: Overrides): Promise<ContractTransaction>;

  regenerator(overrides?: CallOverrides): Promise<string>;

  "regenerator()"(overrides?: CallOverrides): Promise<string>;

  regeneratorTax(overrides?: CallOverrides): Promise<BigNumber>;

  "regeneratorTax()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rngLinkFee(overrides?: CallOverrides): Promise<BigNumber>;

  "rngLinkFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  selfRequestRandomNumber(
    userProvidedSeed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "selfRequestRandomNumber(uint256)"(
    userProvidedSeed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeApprover(
    feeApproverAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeApprover(address)"(
    feeApproverAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegeneratorTax(
    _regeneratorTax: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegeneratorTax(uint256)"(
    _regeneratorTax: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "setTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  sync(overrides?: Overrides): Promise<ContractTransaction>;

  "sync()"(overrides?: Overrides): Promise<ContractTransaction>;

  ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  tickets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      levelOneChance: BigNumber;
      levelTwoChance: BigNumber;
      levelThreeChance: BigNumber;
      levelFourChance: BigNumber;
      levelFiveChance: BigNumber;
    }
  >;

  "tickets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      levelOneChance: BigNumber;
      levelTwoChance: BigNumber;
      levelThreeChance: BigNumber;
      levelFourChance: BigNumber;
      levelFiveChance: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateKeyHash(
    _keyHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateKeyHash(bytes32)"(
    _keyHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRngLinkFee(
    _rngLinkFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRngLinkFee(uint256)"(
    _rngLinkFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX()"(overrides?: CallOverrides): Promise<BigNumber>;

    OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

    "OFFSET()"(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SCALIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALIFIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    _NFTFactory(overrides?: CallOverrides): Promise<string>;

    "_NFTFactory()"(overrides?: CallOverrides): Promise<string>;

    _RAMToken(overrides?: CallOverrides): Promise<string>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<string>;

    _RAMVault(overrides?: CallOverrides): Promise<string>;

    "_RAMVault()"(overrides?: CallOverrides): Promise<string>;

    _WETH(overrides?: CallOverrides): Promise<string>;

    "_WETH()"(overrides?: CallOverrides): Promise<string>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<string>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<string>;

    _YGYToken(overrides?: CallOverrides): Promise<string>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<string>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<string>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<string>;

    _dXIOTToken(overrides?: CallOverrides): Promise<string>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<string>;

    _feeApprover(overrides?: CallOverrides): Promise<string>;

    "_feeApprover()"(overrides?: CallOverrides): Promise<string>;

    _uniV2Factory(overrides?: CallOverrides): Promise<string>;

    "_uniV2Factory()"(overrides?: CallOverrides): Promise<string>;

    addLiquidityETHOnly(
      to: string,
      autoStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityETHOnly(address,bool)"(
      to: string,
      autoStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityYGYOnly(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityYGYOnly(uint256,bool)"(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeeApprover(
      feeApprover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFeeApprover(address)"(
      feeApprover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLPTokenPerYGYUnit(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLPTokenPerYGYUnit(uint256)"(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserLotteryLevel(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLotteryLevel(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    randomResult(overrides?: CallOverrides): Promise<BigNumber>;

    "randomResult()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rawFulfillRandomness(bytes32,uint256)"(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refreshApproval(overrides?: CallOverrides): Promise<void>;

    "refreshApproval()"(overrides?: CallOverrides): Promise<void>;

    regenerator(overrides?: CallOverrides): Promise<string>;

    "regenerator()"(overrides?: CallOverrides): Promise<string>;

    regeneratorTax(overrides?: CallOverrides): Promise<BigNumber>;

    "regeneratorTax()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rngLinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    "rngLinkFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    selfRequestRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "selfRequestRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setFeeApprover(
      feeApproverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeApprover(address)"(
      feeApproverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegeneratorTax(
      _regeneratorTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRegeneratorTax(uint256)"(
      _regeneratorTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokens(overrides?: CallOverrides): Promise<void>;

    "setTokens()"(overrides?: CallOverrides): Promise<void>;

    sync(overrides?: CallOverrides): Promise<void>;

    "sync()"(overrides?: CallOverrides): Promise<void>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeyHash(
      _keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateKeyHash(bytes32)"(
      _keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRngLinkFee(
      _rngLinkFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRngLinkFee(uint256)"(
      _rngLinkFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FeeApproverChanged(
      newAddress: string | null,
      oldAddress: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX()"(overrides?: CallOverrides): Promise<BigNumber>;

    OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

    "OFFSET()"(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SCALIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALIFIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    _NFTFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "_NFTFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    _RAMToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _RAMVault(overrides?: CallOverrides): Promise<BigNumber>;

    "_RAMVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    _WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "_WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<BigNumber>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    _YGYToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<BigNumber>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    _dXIOTToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _feeApprover(overrides?: CallOverrides): Promise<BigNumber>;

    "_feeApprover()"(overrides?: CallOverrides): Promise<BigNumber>;

    _uniV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    "_uniV2Factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityETHOnly(
      to: string,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityETHOnly(address,bool)"(
      to: string,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addLiquidityYGYOnly(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityYGYOnly(uint256,bool)"(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    changeFeeApprover(
      feeApprover: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeFeeApprover(address)"(
      feeApprover: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLPTokenPerYGYUnit(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLPTokenPerYGYUnit(uint256)"(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserLotteryLevel(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLotteryLevel(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    randomResult(overrides?: CallOverrides): Promise<BigNumber>;

    "randomResult()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rawFulfillRandomness(bytes32,uint256)"(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    refreshApproval(overrides?: Overrides): Promise<BigNumber>;

    "refreshApproval()"(overrides?: Overrides): Promise<BigNumber>;

    regenerator(overrides?: CallOverrides): Promise<BigNumber>;

    "regenerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    regeneratorTax(overrides?: CallOverrides): Promise<BigNumber>;

    "regeneratorTax()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rngLinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    "rngLinkFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    selfRequestRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "selfRequestRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeApprover(
      feeApproverAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeApprover(address)"(
      feeApproverAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegeneratorTax(
      _regeneratorTax: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRegeneratorTax(uint256)"(
      _regeneratorTax: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokens(overrides?: Overrides): Promise<BigNumber>;

    "setTokens()"(overrides?: Overrides): Promise<BigNumber>;

    sync(overrides?: Overrides): Promise<BigNumber>;

    "sync()"(overrides?: Overrides): Promise<BigNumber>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateKeyHash(
      _keyHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateKeyHash(bytes32)"(
      _keyHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRngLinkFee(
      _rngLinkFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRngLinkFee(uint256)"(
      _rngLinkFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OFFSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OFFSET()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SCALE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALIFIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SCALIFIER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _NFTFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_NFTFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _RAMToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _RAMVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_RAMVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _YGYToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _dXIOTToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeApprover(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_feeApprover()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _uniV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_uniV2Factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidityETHOnly(
      to: string,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityETHOnly(address,bool)"(
      to: string,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityYGYOnly(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityYGYOnly(uint256,bool)"(
      amount: BigNumberish,
      autoStake: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    changeFeeApprover(
      feeApprover: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeFeeApprover(address)"(
      feeApprover: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLPTokenPerYGYUnit(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLPTokenPerYGYUnit(uint256)"(
      ygyAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserLotteryLevel(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserLotteryLevel(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "randomResult()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refreshApproval(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refreshApproval()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    regenerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "regenerator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regeneratorTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "regeneratorTax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rngLinkFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rngLinkFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfRequestRandomNumber(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "selfRequestRandomNumber(uint256)"(
      userProvidedSeed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeApprover(
      feeApproverAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeApprover(address)"(
      feeApproverAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegeneratorTax(
      _regeneratorTax: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegeneratorTax(uint256)"(
      _regeneratorTax: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setTokens()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sync(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sync()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    ticketCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ticketCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateKeyHash(
      _keyHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateKeyHash(bytes32)"(
      _keyHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRngLinkFee(
      _rngLinkFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRngLinkFee(uint256)"(
      _rngLinkFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
