/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PoolHelper } from "../PoolHelper";

export class PoolHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<PoolHelper> {
    return super.deploy(overrides || {}) as Promise<PoolHelper>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PoolHelper {
    return super.attach(address) as PoolHelper;
  }
  connect(signer: Signer): PoolHelper__factory {
    return super.connect(signer) as PoolHelper__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolHelper {
    return new Contract(address, _abi, signerOrProvider) as PoolHelper;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YGYStorageV1",
        name: "_storage",
        type: "YGYStorageV1",
      },
    ],
    name: "averageFeesPerBlockEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "averagePerBlock",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract YGYStorageV1",
        name: "_storage",
        type: "YGYStorageV1",
      },
    ],
    name: "averageFeesPerBlockSinceStart",
    outputs: [
      {
        internalType: "uint256",
        name: "averagePerBlock",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6104ce610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80632130bc8714610045578063d11b8d121461006e575b600080fd5b6100586100533660046103c6565b610081565b604051610065919061048f565b60405180910390f35b61005861007c3660046103c6565b6101f8565b60006101f2610101836001600160a01b03166331db122c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c257600080fd5b505afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa91906103ed565b43906102aa565b6101ec846001600160a01b031663608c8d3a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561013d57600080fd5b505afa158015610151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017591906103ed565b856001600160a01b031663c8ffb8736040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ae57600080fd5b505afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e691906103ed565b906102f3565b90610321565b92915050565b60006101f2610239836001600160a01b0316635d577c186040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c257600080fd5b836001600160a01b031663608c8d3a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec91906103ed565b60006102ec83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610363565b9392505050565b6000828201838110156102ec5760405162461bcd60e51b815260040161031890610458565b60405180910390fd5b60006102ec83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061038f565b600081848411156103875760405162461bcd60e51b81526004016103189190610405565b505050900390565b600081836103b05760405162461bcd60e51b81526004016103189190610405565b5060008385816103bc57fe5b0495945050505050565b6000602082840312156103d7578081fd5b81356001600160a01b03811681146102ec578182fd5b6000602082840312156103fe578081fd5b5051919050565b6000602080835283518082850152825b8181101561043157858101830151858201604001528201610415565b818111156104425783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b9081526020019056fea2646970667358221220a2540be93fb303f0e2196e20e3964abe824c06c47622363bd688144a0d0f318d64736f6c634300060c0033";
