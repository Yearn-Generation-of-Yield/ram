/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IFeeApproverInterface extends ethers.utils.Interface {
  functions: {
    "calculateAmountsAfterFee(address,address,uint256)": FunctionFragment;
    "check(address,address,uint256)": FunctionFragment;
    "feePercentX100()": FunctionFragment;
    "setFeeMultiplier(uint256)": FunctionFragment;
    "setPaused()": FunctionFragment;
    "setRamTokenAddress(address)": FunctionFragment;
    "setTokenUniswapPair(address)": FunctionFragment;
    "setYgyTokenAddress(address)": FunctionFragment;
    "sync()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateAmountsAfterFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentX100",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRamTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenUniswapPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setYgyTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "calculateAmountsAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePercentX100",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRamTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenUniswapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setYgyTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;

  events: {};
}

export class IFeeApprover extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IFeeApproverInterface;

  functions: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    check(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "check(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feePercentX100(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feePercentX100()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeMultiplier(uint256)"(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPaused(overrides?: Overrides): Promise<ContractTransaction>;

    "setPaused()"(overrides?: Overrides): Promise<ContractTransaction>;

    setRamTokenAddress(
      _ramTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRamTokenAddress(address)"(
      _ramTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenUniswapPair(
      _tokenUniswapPair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenUniswapPair(address)"(
      _tokenUniswapPair: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setYgyTokenAddress(
      _ygyTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setYgyTokenAddress(address)"(
      _ygyTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sync(overrides?: Overrides): Promise<ContractTransaction>;

    "sync()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  calculateAmountsAfterFee(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateAmountsAfterFee(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  check(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "check(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feePercentX100(overrides?: CallOverrides): Promise<BigNumber>;

  "feePercentX100()"(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeMultiplier(
    _feeMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeMultiplier(uint256)"(
    _feeMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPaused(overrides?: Overrides): Promise<ContractTransaction>;

  "setPaused()"(overrides?: Overrides): Promise<ContractTransaction>;

  setRamTokenAddress(
    _ramTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRamTokenAddress(address)"(
    _ramTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenUniswapPair(
    _tokenUniswapPair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenUniswapPair(address)"(
    _tokenUniswapPair: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setYgyTokenAddress(
    _ygyTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setYgyTokenAddress(address)"(
    _ygyTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sync(overrides?: Overrides): Promise<ContractTransaction>;

  "sync()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        transferToAmount: BigNumber;
        transferToFeeBearerAmount: BigNumber;
      }
    >;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        transferToAmount: BigNumber;
        transferToFeeBearerAmount: BigNumber;
      }
    >;

    check(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "check(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feePercentX100(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercentX100()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeMultiplier(uint256)"(
      _feeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(overrides?: CallOverrides): Promise<void>;

    "setPaused()"(overrides?: CallOverrides): Promise<void>;

    setRamTokenAddress(
      _ramTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRamTokenAddress(address)"(
      _ramTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenUniswapPair(
      _tokenUniswapPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenUniswapPair(address)"(
      _tokenUniswapPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setYgyTokenAddress(
      _ygyTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setYgyTokenAddress(address)"(
      _ygyTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { lastIsMint: boolean; lpTokenBurn: boolean }
    >;

    "sync()"(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { lastIsMint: boolean; lpTokenBurn: boolean }
    >;
  };

  filters: {};

  estimateGas: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    check(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "check(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feePercentX100(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercentX100()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeMultiplier(uint256)"(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPaused(overrides?: Overrides): Promise<BigNumber>;

    "setPaused()"(overrides?: Overrides): Promise<BigNumber>;

    setRamTokenAddress(
      _ramTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRamTokenAddress(address)"(
      _ramTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenUniswapPair(
      _tokenUniswapPair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenUniswapPair(address)"(
      _tokenUniswapPair: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setYgyTokenAddress(
      _ygyTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setYgyTokenAddress(address)"(
      _ygyTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sync(overrides?: Overrides): Promise<BigNumber>;

    "sync()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAmountsAfterFee(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateAmountsAfterFee(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    check(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "check(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feePercentX100(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePercentX100()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeMultiplier(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeMultiplier(uint256)"(
      _feeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPaused(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setPaused()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setRamTokenAddress(
      _ramTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRamTokenAddress(address)"(
      _ramTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenUniswapPair(
      _tokenUniswapPair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenUniswapPair(address)"(
      _tokenUniswapPair: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setYgyTokenAddress(
      _ygyTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setYgyTokenAddress(address)"(
      _ygyTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sync(overrides?: Overrides): Promise<PopulatedTransaction>;

    "sync()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
