/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MODIFIER_ROLE()": FunctionFragment;
    "RAMVaultStartBlock()": FunctionFragment;
    "YGYReserve()": FunctionFragment;
    "_NFTs(uint256)": FunctionFragment;
    "_RAMToken()": FunctionFragment;
    "_WETH()": FunctionFragment;
    "_YGYRAMPair()": FunctionFragment;
    "_YGYToken()": FunctionFragment;
    "_YGYWETHPair()": FunctionFragment;
    "_dXIOTToken()": FunctionFragment;
    "addressStorageCount(uint256)": FunctionFragment;
    "booleanMapStorageCount(uint256)": FunctionFragment;
    "boostFees()": FunctionFragment;
    "boostLevelCosts(uint256)": FunctionFragment;
    "boostLevelMultipliers(uint256)": FunctionFragment;
    "checkRewards(uint256,address)": FunctionFragment;
    "cumulativeRewardsSinceStart()": FunctionFragment;
    "cumulativeYGYRewardsSinceStart()": FunctionFragment;
    "epoch()": FunctionFragment;
    "epochCalculationStartBlock()": FunctionFragment;
    "epochRewards(uint256)": FunctionFragment;
    "getAddressStorage(string)": FunctionFragment;
    "getBooleanMapValue(string,address)": FunctionFragment;
    "getBoostLevelCost(uint256)": FunctionFragment;
    "getBoostLevelMultiplier(uint256)": FunctionFragment;
    "getEpochRewards(uint256)": FunctionFragment;
    "getNFTAddress(uint256)": FunctionFragment;
    "getNFTProperty(uint256,uint256)": FunctionFragment;
    "getNFTPropertyCount(uint256)": FunctionFragment;
    "getPoolInfo(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeRAMVault(address,address,address,address)": FunctionFragment;
    "lastTicketLevel(address)": FunctionFragment;
    "liquidityContributedEthValue(address)": FunctionFragment;
    "nftPropertyChoices(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRewards()": FunctionFragment;
    "pendingYGYRewards()": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "ram()": FunctionFragment;
    "regeneratoraddr()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsInThisEpoch()": FunctionFragment;
    "setTokens(address,address,address,address,address,address[],address)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "teamaddr()": FunctionFragment;
    "ticketCount()": FunctionFragment;
    "tickets(uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uintStorageCount(uint256)": FunctionFragment;
    "updateBoosts(uint256[],uint256[])": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "ygy()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RAMVaultStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YGYReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_NFTs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "_RAMToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "_WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_YGYRAMPair",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_YGYToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_YGYWETHPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_dXIOTToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressStorageCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "booleanMapStorageCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "boostFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostLevelCosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boostLevelMultipliers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeRewardsSinceStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeYGYRewardsSinceStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochCalculationStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBooleanMapValue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoostLevelCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoostLevelMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTProperty",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTPropertyCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRAMVault",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTicketLevel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityContributedEthValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftPropertyChoices",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingYGYRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ram", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "regeneratoraddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsInThisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [string, string, string, string, string, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "teamaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uintStorageCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoosts",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "ygy", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RAMVaultStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "YGYReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_NFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_RAMToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_YGYRAMPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_YGYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_YGYWETHPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_dXIOTToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressStorageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "booleanMapStorageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostLevelCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostLevelMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeRewardsSinceStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeYGYRewardsSinceStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochCalculationStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBooleanMapValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoostLevelCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoostLevelMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTPropertyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeRAMVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTicketLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityContributedEthValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftPropertyChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingYGYRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ram", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "regeneratoraddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsInThisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintStorageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ygy", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Test extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MODIFIER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "MODIFIER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    RAMVaultStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "RAMVaultStartBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    YGYReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    "YGYReserve()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _NFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "_NFTs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _RAMToken(overrides?: CallOverrides): Promise<[string]>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<[string]>;

    _WETH(overrides?: CallOverrides): Promise<[string]>;

    "_WETH()"(overrides?: CallOverrides): Promise<[string]>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<[string]>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<[string]>;

    _YGYToken(overrides?: CallOverrides): Promise<[string]>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<[string]>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<[string]>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<[string]>;

    _dXIOTToken(overrides?: CallOverrides): Promise<[string]>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<[string]>;

    addressStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "addressStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    booleanMapStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "booleanMapStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boostFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "boostFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostLevelCosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "boostLevelCosts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boostLevelMultipliers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "boostLevelMultipliers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pendingRAM: BigNumber; pendingYGY: BigNumber }
    >;

    "checkRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pendingRAM: BigNumber; pendingYGY: BigNumber }
    >;

    cumulativeRewardsSinceStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cumulativeRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeYGYRewardsSinceStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cumulativeYGYRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochCalculationStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochCalculationStartBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAddressStorage(
      _key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAddressStorage(string)"(
      _key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBooleanMapValue(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getBooleanMapValue(string,address)"(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBoostLevelCost(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBoostLevelCost(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBoostLevelMultiplier(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBoostLevelMultiplier(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochRewards(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEpochRewards(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNFTAddress(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getNFTAddress(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTProperty(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    "getNFTProperty(uint256,uint256)"(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getNFTPropertyCount(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNFTPropertyCount(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        _token: string;
        _allocPointt: BigNumber;
        _accRAMPerShare: BigNumber;
        _accYGYPerShare: BigNumber;
        _withdrawable: boolean;
        _effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    "getPoolInfo(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        _token: string;
        _allocPointt: BigNumber;
        _accRAMPerShare: BigNumber;
        _accYGYPerShare: BigNumber;
        _withdrawable: boolean;
        _effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeRAMVault(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeRAMVault(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastTicketLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastTicketLevel(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityContributedEthValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidityContributedEthValue(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftPropertyChoices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        pType: string;
        pValue: BigNumber;
        extra: string;
      }
    >;

    "nftPropertyChoices(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        pType: string;
        pValue: BigNumber;
        extra: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pendingRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingYGYRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pendingYGYRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        accRAMPerShare: BigNumber;
        accYGYPerShare: BigNumber;
        withdrawable: boolean;
        effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        accRAMPerShare: BigNumber;
        accYGYPerShare: BigNumber;
        withdrawable: boolean;
        effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ram(overrides?: CallOverrides): Promise<[string]>;

    "ram()"(overrides?: CallOverrides): Promise<[string]>;

    regeneratoraddr(overrides?: CallOverrides): Promise<[string]>;

    "regeneratoraddr()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardsInThisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsInThisEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setTokens(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokens(address,address,address,address,address,address[],address)"(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    teamaddr(overrides?: CallOverrides): Promise<[string]>;

    "teamaddr()"(overrides?: CallOverrides): Promise<[string]>;

    ticketCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ticketCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uintStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "uintStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateBoosts(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBoosts(uint256[],uint256[])"(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtYGY: BigNumber;
        boostAmount: BigNumber;
        boostLevel: BigNumber;
        spentMultiplierTokens: BigNumber;
        hasNFTBoostApplied: boolean;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtYGY: BigNumber;
        boostAmount: BigNumber;
        boostLevel: BigNumber;
        spentMultiplierTokens: BigNumber;
        hasNFTBoostApplied: boolean;
      }
    >;

    ygy(overrides?: CallOverrides): Promise<[string]>;

    "ygy()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MODIFIER_ROLE(overrides?: CallOverrides): Promise<string>;

  "MODIFIER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  RAMVaultStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "RAMVaultStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  YGYReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "YGYReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  _NFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "_NFTs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _RAMToken(overrides?: CallOverrides): Promise<string>;

  "_RAMToken()"(overrides?: CallOverrides): Promise<string>;

  _WETH(overrides?: CallOverrides): Promise<string>;

  "_WETH()"(overrides?: CallOverrides): Promise<string>;

  _YGYRAMPair(overrides?: CallOverrides): Promise<string>;

  "_YGYRAMPair()"(overrides?: CallOverrides): Promise<string>;

  _YGYToken(overrides?: CallOverrides): Promise<string>;

  "_YGYToken()"(overrides?: CallOverrides): Promise<string>;

  _YGYWETHPair(overrides?: CallOverrides): Promise<string>;

  "_YGYWETHPair()"(overrides?: CallOverrides): Promise<string>;

  _dXIOTToken(overrides?: CallOverrides): Promise<string>;

  "_dXIOTToken()"(overrides?: CallOverrides): Promise<string>;

  addressStorageCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "addressStorageCount(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  booleanMapStorageCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "booleanMapStorageCount(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  boostFees(overrides?: CallOverrides): Promise<BigNumber>;

  "boostFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  boostLevelCosts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "boostLevelCosts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  boostLevelMultipliers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "boostLevelMultipliers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkRewards(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pendingRAM: BigNumber; pendingYGY: BigNumber }
  >;

  "checkRewards(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pendingRAM: BigNumber; pendingYGY: BigNumber }
  >;

  cumulativeRewardsSinceStart(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulativeRewardsSinceStart()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeYGYRewardsSinceStart(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulativeYGYRewardsSinceStart()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochCalculationStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "epochCalculationStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochRewards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochRewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAddressStorage(_key: string, overrides?: CallOverrides): Promise<string>;

  "getAddressStorage(string)"(
    _key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getBooleanMapValue(
    _key: string,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getBooleanMapValue(string,address)"(
    _key: string,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBoostLevelCost(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBoostLevelCost(uint256)"(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBoostLevelMultiplier(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBoostLevelMultiplier(uint256)"(
    _level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochRewards(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEpochRewards(uint256)"(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNFTAddress(
    _contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getNFTAddress(uint256)"(
    _contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNFTProperty(
    _contractId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  "getNFTProperty(uint256,uint256)"(
    _contractId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getNFTPropertyCount(
    _contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNFTPropertyCount(uint256)"(
    _contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      _token: string;
      _allocPointt: BigNumber;
      _accRAMPerShare: BigNumber;
      _accYGYPerShare: BigNumber;
      _withdrawable: boolean;
      _effectiveAdditionalTokensFromBoosts: BigNumber;
    }
  >;

  "getPoolInfo(uint256)"(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      _token: string;
      _allocPointt: BigNumber;
      _accRAMPerShare: BigNumber;
      _accYGYPerShare: BigNumber;
      _withdrawable: boolean;
      _effectiveAdditionalTokensFromBoosts: BigNumber;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize(address,address,address,address)"(
    _ram: string,
    _ygy: string,
    _teamaddr: string,
    _regeneratoraddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeRAMVault(
    _ram: string,
    _ygy: string,
    _teamaddr: string,
    _regeneratoraddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeRAMVault(address,address,address,address)"(
    _ram: string,
    _ygy: string,
    _teamaddr: string,
    _regeneratoraddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastTicketLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastTicketLevel(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityContributedEthValue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidityContributedEthValue(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftPropertyChoices(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      pType: string;
      pValue: BigNumber;
      extra: string;
    }
  >;

  "nftPropertyChoices(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      pType: string;
      pValue: BigNumber;
      extra: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendingYGYRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingYGYRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      token: string;
      allocPoint: BigNumber;
      accRAMPerShare: BigNumber;
      accYGYPerShare: BigNumber;
      withdrawable: boolean;
      effectiveAdditionalTokensFromBoosts: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      token: string;
      allocPoint: BigNumber;
      accRAMPerShare: BigNumber;
      accYGYPerShare: BigNumber;
      withdrawable: boolean;
      effectiveAdditionalTokensFromBoosts: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  ram(overrides?: CallOverrides): Promise<string>;

  "ram()"(overrides?: CallOverrides): Promise<string>;

  regeneratoraddr(overrides?: CallOverrides): Promise<string>;

  "regeneratoraddr()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardsInThisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsInThisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  setTokens(
    RAMToken: string,
    YGYToken: string,
    WETH: string,
    YGYRAMPair: string,
    YGYWethPair: string,
    nfts: string[],
    dXIOTToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokens(address,address,address,address,address,address[],address)"(
    RAMToken: string,
    YGYToken: string,
    WETH: string,
    YGYRAMPair: string,
    YGYWethPair: string,
    nfts: string[],
    dXIOTToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

  "stringToBytes32(string)"(
    source: string,
    overrides?: CallOverrides
  ): Promise<string>;

  teamaddr(overrides?: CallOverrides): Promise<string>;

  "teamaddr()"(overrides?: CallOverrides): Promise<string>;

  ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  tickets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      levelOneChance: BigNumber;
      levelTwoChance: BigNumber;
      levelThreeChance: BigNumber;
      levelFourChance: BigNumber;
      levelFiveChance: BigNumber;
    }
  >;

  "tickets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      levelOneChance: BigNumber;
      levelTwoChance: BigNumber;
      levelThreeChance: BigNumber;
      levelFourChance: BigNumber;
      levelFiveChance: BigNumber;
    }
  >;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uintStorageCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "uintStorageCount(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateBoosts(
    _boostMultipliers: BigNumberish[],
    _boostCosts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBoosts(uint256[],uint256[])"(
    _boostMultipliers: BigNumberish[],
    _boostCosts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardDebtYGY: BigNumber;
      boostAmount: BigNumber;
      boostLevel: BigNumber;
      spentMultiplierTokens: BigNumber;
      hasNFTBoostApplied: boolean;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardDebtYGY: BigNumber;
      boostAmount: BigNumber;
      boostLevel: BigNumber;
      spentMultiplierTokens: BigNumber;
      hasNFTBoostApplied: boolean;
    }
  >;

  ygy(overrides?: CallOverrides): Promise<string>;

  "ygy()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MODIFIER_ROLE(overrides?: CallOverrides): Promise<string>;

    "MODIFIER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    RAMVaultStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "RAMVaultStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    YGYReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "YGYReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    _NFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "_NFTs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _RAMToken(overrides?: CallOverrides): Promise<string>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<string>;

    _WETH(overrides?: CallOverrides): Promise<string>;

    "_WETH()"(overrides?: CallOverrides): Promise<string>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<string>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<string>;

    _YGYToken(overrides?: CallOverrides): Promise<string>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<string>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<string>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<string>;

    _dXIOTToken(overrides?: CallOverrides): Promise<string>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<string>;

    addressStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    booleanMapStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "booleanMapStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostFees(overrides?: CallOverrides): Promise<BigNumber>;

    "boostFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    boostLevelCosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "boostLevelCosts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostLevelMultipliers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "boostLevelMultipliers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pendingRAM: BigNumber; pendingYGY: BigNumber }
    >;

    "checkRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pendingRAM: BigNumber; pendingYGY: BigNumber }
    >;

    cumulativeRewardsSinceStart(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeYGYRewardsSinceStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cumulativeYGYRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochCalculationStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "epochCalculationStartBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressStorage(_key: string, overrides?: CallOverrides): Promise<string>;

    "getAddressStorage(string)"(
      _key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getBooleanMapValue(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getBooleanMapValue(string,address)"(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBoostLevelCost(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoostLevelCost(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoostLevelMultiplier(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoostLevelMultiplier(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochRewards(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochRewards(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTAddress(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getNFTAddress(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNFTProperty(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    "getNFTProperty(uint256,uint256)"(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getNFTPropertyCount(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNFTPropertyCount(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        _token: string;
        _allocPointt: BigNumber;
        _accRAMPerShare: BigNumber;
        _accYGYPerShare: BigNumber;
        _withdrawable: boolean;
        _effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    "getPoolInfo(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        _token: string;
        _allocPointt: BigNumber;
        _accRAMPerShare: BigNumber;
        _accYGYPerShare: BigNumber;
        _withdrawable: boolean;
        _effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    "initialize(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeRAMVault(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeRAMVault(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTicketLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTicketLevel(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityContributedEthValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidityContributedEthValue(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftPropertyChoices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        pType: string;
        pValue: BigNumber;
        extra: string;
      }
    >;

    "nftPropertyChoices(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        pType: string;
        pValue: BigNumber;
        extra: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingYGYRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingYGYRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        accRAMPerShare: BigNumber;
        accYGYPerShare: BigNumber;
        withdrawable: boolean;
        effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        token: string;
        allocPoint: BigNumber;
        accRAMPerShare: BigNumber;
        accYGYPerShare: BigNumber;
        withdrawable: boolean;
        effectiveAdditionalTokensFromBoosts: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    ram(overrides?: CallOverrides): Promise<string>;

    "ram()"(overrides?: CallOverrides): Promise<string>;

    regeneratoraddr(overrides?: CallOverrides): Promise<string>;

    "regeneratoraddr()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsInThisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsInThisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokens(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokens(address,address,address,address,address,address[],address)"(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<string>;

    teamaddr(overrides?: CallOverrides): Promise<string>;

    "teamaddr()"(overrides?: CallOverrides): Promise<string>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        levelOneChance: BigNumber;
        levelTwoChance: BigNumber;
        levelThreeChance: BigNumber;
        levelFourChance: BigNumber;
        levelFiveChance: BigNumber;
      }
    >;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uintStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uintStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateBoosts(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBoosts(uint256[],uint256[])"(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtYGY: BigNumber;
        boostAmount: BigNumber;
        boostLevel: BigNumber;
        spentMultiplierTokens: BigNumber;
        hasNFTBoostApplied: boolean;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtYGY: BigNumber;
        boostAmount: BigNumber;
        boostLevel: BigNumber;
        spentMultiplierTokens: BigNumber;
        hasNFTBoostApplied: boolean;
      }
    >;

    ygy(overrides?: CallOverrides): Promise<string>;

    "ygy()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MODIFIER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MODIFIER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    RAMVaultStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "RAMVaultStartBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    YGYReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "YGYReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    _NFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_NFTs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _RAMToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "_WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<BigNumber>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    _YGYToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<BigNumber>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    _dXIOTToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    booleanMapStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "booleanMapStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostFees(overrides?: CallOverrides): Promise<BigNumber>;

    "boostFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    boostLevelCosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "boostLevelCosts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostLevelMultipliers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "boostLevelMultipliers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeRewardsSinceStart(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeYGYRewardsSinceStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cumulativeYGYRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochCalculationStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "epochCalculationStartBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressStorage(
      _key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddressStorage(string)"(
      _key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBooleanMapValue(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBooleanMapValue(string,address)"(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoostLevelCost(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoostLevelCost(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoostLevelMultiplier(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoostLevelMultiplier(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochRewards(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochRewards(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTAddress(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNFTAddress(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTProperty(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNFTProperty(uint256,uint256)"(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTPropertyCount(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNFTPropertyCount(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolInfo(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    "initialize(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeRAMVault(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeRAMVault(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastTicketLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTicketLevel(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityContributedEthValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidityContributedEthValue(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftPropertyChoices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftPropertyChoices(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingYGYRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingYGYRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    ram(overrides?: CallOverrides): Promise<BigNumber>;

    "ram()"(overrides?: CallOverrides): Promise<BigNumber>;

    regeneratoraddr(overrides?: CallOverrides): Promise<BigNumber>;

    "regeneratoraddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardsInThisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsInThisEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokens(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokens(address,address,address,address,address,address[],address)"(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    teamaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "teamaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uintStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "uintStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateBoosts(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBoosts(uint256[],uint256[])"(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ygy(overrides?: CallOverrides): Promise<BigNumber>;

    "ygy()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODIFIER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MODIFIER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RAMVaultStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "RAMVaultStartBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YGYReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YGYReserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _NFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_NFTs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _RAMToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_RAMToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _YGYRAMPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_YGYRAMPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _YGYToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_YGYToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _YGYWETHPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_YGYWETHPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _dXIOTToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_dXIOTToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    booleanMapStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "booleanMapStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "boostFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostLevelCosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "boostLevelCosts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostLevelMultipliers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "boostLevelMultipliers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeRewardsSinceStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cumulativeRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeYGYRewardsSinceStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cumulativeYGYRewardsSinceStart()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochCalculationStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochCalculationStartBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressStorage(
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressStorage(string)"(
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBooleanMapValue(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBooleanMapValue(string,address)"(
      _key: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoostLevelCost(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoostLevelCost(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoostLevelMultiplier(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoostLevelMultiplier(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochRewards(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpochRewards(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTAddress(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNFTAddress(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTProperty(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNFTProperty(uint256,uint256)"(
      _contractId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTPropertyCount(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNFTPropertyCount(uint256)"(
      _contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolInfo(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeRAMVault(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeRAMVault(address,address,address,address)"(
      _ram: string,
      _ygy: string,
      _teamaddr: string,
      _regeneratoraddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastTicketLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTicketLevel(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityContributedEthValue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidityContributedEthValue(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftPropertyChoices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftPropertyChoices(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingYGYRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingYGYRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ram(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ram()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regeneratoraddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "regeneratoraddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardsInThisEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsInThisEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokens(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokens(address,address,address,address,address,address[],address)"(
      RAMToken: string,
      YGYToken: string,
      WETH: string,
      YGYRAMPair: string,
      YGYWethPair: string,
      nfts: string[],
      dXIOTToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stringToBytes32(string)"(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    teamaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "teamaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ticketCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uintStorageCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uintStorageCount(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBoosts(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBoosts(uint256[],uint256[])"(
      _boostMultipliers: BigNumberish[],
      _boostCosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ygy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ygy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
