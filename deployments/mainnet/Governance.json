{
  "address": "0x7E806e9166B3367c6f7E5bDE995258eF35Eb1527",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_YGYToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_RAMRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "RAMRouter",
      "outputs": [
        {
          "internalType": "contract IRAMv1Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YGYToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRegeneratorUpdateStagingMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getDurationForLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getMultiplierForLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "hasTimeLockAtLevel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_hasTimelock",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRAMRouterUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setUserNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "timelockYGY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "unlockOldestTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRAMRouterRegeneratorTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_RAMRouter",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStagingMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStagingReadyTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelockedYGY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaba6dd6196922a270e314d5c775651cea9c9079b63381cff47a9fffc6ee656ef",
  "receipt": {
    "to": null,
    "from": "0x5D742B781822D4fE075ddeb40D7821b04C51a481",
    "contractAddress": "0x7E806e9166B3367c6f7E5bDE995258eF35Eb1527",
    "transactionIndex": 19,
    "gasUsed": "964093",
    "logsBloom": "0x
    "blockHash": "0x88e277a675cc2effe671d46cbfcfd28440e4fdf9a8e397bcaa3c7e9bdcdc5e70",
    "transactionHash": "0xaba6dd6196922a270e314d5c775651cea9c9079b63381cff47a9fffc6ee656ef",
    "logs": [],
    "blockNumber": 11532455,
    "cumulativeGasUsed": "2564835",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11b0a8C0FA626627601eD518c3538a39d92D609E",
    "0x9432b1Dec04A6103b9d242627c3c309BEa902E5f"
  ],
  "solcInputHash": "a5dcf25e21799f394871460dd911d43d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_YGYToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RAMRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RAMRouter\",\"outputs\":[{\"internalType\":\"contract IRAMv1Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YGYToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRegeneratorUpdateStagingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getDurationForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMultiplierForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"hasTimeLockAtLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_hasTimelock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRAMRouterUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setUserNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"timelockYGY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"unlockOldestTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRAMRouterRegeneratorTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RAMRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStagingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStagingReadyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockedYGY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"contracts/Governance.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IRAMv1Router.sol\\\";\\n\\ncontract Governance {\\n  using SafeMath for uint256;\\n\\n  IERC20 public YGYToken;\\n  IRAMv1Router public RAMRouter;\\n\\n  uint256 public weightedNumber; // Number 1-8 weighted by total user numbers\\n  uint256 public votingShares; // Includes voting shares generated fromimelocked YGY\\n\\n  uint256 public lastRAMRouterUpdateTime; // Last time the regenerator tax on the router was updated\\n  bool public updateStagingMode;\\n  uint256 public updateStagingReadyTime;\\n  address public owner;\\n\\n  struct User {\\n    uint256 number; // Number from 1-8 indicating the desired LGE regenerator tax %\\n    uint256 timelockedYGY;\\n    // The timelocks are stack data structure implemented via hashmaps,\\n    // there's a stack at each level (1-4)\\n    mapping(uint256 => mapping(uint256 => TimeLock)) timelocks; // mapping(level => timelock ID => timelock object)\\n    mapping(uint256 => uint256) timelockTop; // mapping (level => top of stack at this level)\\n    mapping(uint256 => uint256) timelockCount; // mapping (level => current number timelocks at this level)\\n  }\\n\\n  struct TimeLock {\\n    uint256 multipliedAmount;\\n    uint256 level;\\n    uint256 unlockTime;\\n  }\\n\\n  mapping(address => User) public users;\\n\\n  constructor(address _YGYToken, address _RAMRouter) public {\\n    YGYToken = IERC20(_YGYToken);\\n    RAMRouter = IRAMv1Router(_RAMRouter);\\n    weightedNumber = 1; // start at 1%\\n    owner = msg.sender;\\n  }\\n\\n  function updateRouter(address _RAMRouter) external {\\n    require(msg.sender == owner, \\\"!Owner\\\");\\n    RAMRouter = IRAMv1Router(_RAMRouter);\\n  }\\n\\n  function hasTimeLockAtLevel(address user, uint256 level)\\n    external\\n    view\\n    returns (\\n      bool _hasTimelock,\\n      uint256 _level,\\n      uint256 _unlockTime\\n    )\\n  {\\n    User storage userMem = users[user];\\n    uint256 timeLocks = userMem.timelockCount[level];\\n    if (timeLocks > 0) {\\n      uint256 top = userMem.timelockTop[level];\\n      uint256 unlockTime = userMem.timelocks[level][top].unlockTime;\\n      return (true, level, unlockTime);\\n    } else {\\n      return (false, level, 0);\\n    }\\n  }\\n\\n  function setUserNumber(uint256 _number) public {\\n    require(_number >= 1 && _number <= 8, \\\"Number must be in range 1-8\\\");\\n    User storage user = users[msg.sender];\\n    user.number = _number;\\n\\n    calcWeightedNumber(msg.sender);\\n  }\\n\\n  function enterRegeneratorUpdateStagingMode() public {\\n    // 1 day mandatory wait time after last router regenerator tax update\\n    require(block.timestamp >= lastRAMRouterUpdateTime.add(1 days), \\\"Must wait 1 day since last update\\\");\\n    updateStagingMode = true;\\n    updateStagingReadyTime = block.timestamp.add(10 minutes);\\n  }\\n\\n  function updateRAMRouterRegeneratorTax() public {\\n    require(updateStagingMode, \\\"Must be in update staging mode\\\");\\n    require(block.timestamp >= updateStagingReadyTime, \\\"Must wait 10 minutes since update staged\\\");\\n    updateStagingMode = false;\\n    lastRAMRouterUpdateTime = block.timestamp;\\n\\n    // Update the RAM router's regenerator tax\\n    RAMRouter.setRegeneratorTax(weightedNumber);\\n  }\\n\\n  // users can lock YGY for time durations to get multipliers on their YGY\\n  function timelockYGY(\\n    uint256 _amount,\\n    uint256 _level,\\n    uint256 _number\\n  ) public {\\n    require(_number >= 1 && _number <= 8, \\\"Number must be in range 1-8\\\");\\n    require(YGYToken.transferFrom(msg.sender, address(this), _amount), \\\"Have tokens been approved?\\\");\\n\\n    User storage user = users[msg.sender];\\n\\n    // Calculate effective voting power and create new timelock\\n    uint256 effectiveAmount = _amount.mul(getMultiplierForLevel(_level)).div(100);\\n    TimeLock memory timelock =\\n      TimeLock({ multipliedAmount: effectiveAmount, level: _level, unlockTime: block.timestamp.add(getDurationForLevel(_level)) });\\n\\n    if (user.timelockTop[_level] == 0) {\\n      user.timelockTop[_level] = user.timelockTop[_level].add(1);\\n    }\\n\\n    uint256 newTimelockCount = user.timelockCount[_level].add(1);\\n    user.timelocks[_level][newTimelockCount] = timelock;\\n    user.timelockCount[_level] = newTimelockCount;\\n\\n    // Add the new voting power to user and the total voting power\\n    user.timelockedYGY = user.timelockedYGY.add(effectiveAmount);\\n    votingShares = votingShares.add(effectiveAmount);\\n\\n    // Update number and calc new weighted number\\n    user.number = _number;\\n    calcWeightedNumber(msg.sender);\\n  }\\n\\n  // User unlocks their oldest timelock, receiving all the YGY tokens directly to their address\\n  function unlockOldestTimelock(uint256 _level) public {\\n    User storage user = users[msg.sender];\\n    uint256 levelTimelockTop = user.timelockTop[_level];\\n    TimeLock storage timelock = user.timelocks[_level][levelTimelockTop];\\n    require(block.timestamp >= timelock.unlockTime, \\\"Tokens are still timelocked\\\");\\n\\n    // Update user's timelocked balances and the total YGY balance\\n    user.timelockedYGY = user.timelockedYGY.sub(timelock.multipliedAmount);\\n    votingShares = votingShares.sub(timelock.multipliedAmount);\\n\\n    // Send underlying amount of tokens to user\\n    uint256 underlyingAmount = timelock.multipliedAmount.div(getMultiplierForLevel(timelock.level).div(100));\\n    YGYToken.transfer(msg.sender, underlyingAmount);\\n\\n    // Delete the timelock and update user's timelock stack\\n    delete user.timelocks[_level][levelTimelockTop];\\n    user.timelockTop[_level] = levelTimelockTop.add(1);\\n    user.timelockCount[_level] = user.timelockCount[_level].sub(1);\\n\\n    calcWeightedNumber(msg.sender);\\n  }\\n\\n  function calcWeightedNumber(address addr) internal {\\n    User storage user = users[addr];\\n\\n    // Calculate the sum of all weights\\n    uint256 otherTotalYGY = votingShares.sub(user.timelockedYGY);\\n\\n    // Calculate the sum of all weighing factors\\n    uint256 userWeighingFactor = user.timelockedYGY.mul(user.number);\\n    uint256 otherWeighingFactor = otherTotalYGY.mul(weightedNumber);\\n    uint256 sumOfWeighingFactors = userWeighingFactor.add(otherWeighingFactor);\\n\\n    // Weighted average = (sum weighing factors / sum of weight)\\n    if (votingShares > 0 && user.timelockedYGY > 0) {\\n      weightedNumber = sumOfWeighingFactors.div(votingShares);\\n    }\\n  }\\n\\n  function getDurationForLevel(uint256 _level) public pure returns (uint256) {\\n    if (_level == 1) {\\n      return 2 weeks;\\n    } else if (_level == 2) {\\n      return 4 weeks;\\n    } else if (_level == 3) {\\n      return 12 weeks;\\n    } else if (_level == 4) {\\n      return 24 weeks;\\n    }\\n    return 2 weeks;\\n  }\\n\\n  function getMultiplierForLevel(uint256 _level) public pure returns (uint256) {\\n    if (_level == 1) {\\n      return 150; // 1.5x\\n    } else if (_level == 2) {\\n      return 300; // 3x\\n    } else if (_level == 3) {\\n      return 1000; // 10x\\n    } else if (_level == 4) {\\n      return 2500; // 25x\\n    } else {\\n      return 150;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x37ab6d9b290c313b3b9cb26a1274d455ff139d6b5f3f4203bff5a3c224eb67d1\"},\"contracts/interfaces/IRAMv1Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRAMv1Router {\\n    function setRegeneratorTax(uint256 _regeneratorTax) external;\\n}\\n\",\"keccak256\":\"0xfc5433bd442a03c46cda472b143ba1edb4c8220ae2186c53d26647e685200bb9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f7a380380610f7a8339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b03199182161790915560018054939092169281169290921781556002556007805490911633179055610ef1806100896000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063978f254b116100a2578063bbdc1d6711610071578063bbdc1d671461028e578063bf6ece40146102ab578063c851cc32146102c7578063c94c8201146102ed578063d80137e1146102f557610116565b8063978f254b14610222578063a33231591461022a578063a87430ba14610247578063ae38e4781461028657610116565b80638a48abc4116100e95780638a48abc4146101645780638da5cb5b146101815780638e75217e146101a557806392d48903146101ad578063952c5df7146101f957610116565b80632a23cf201461011b578063310fdd0a1461013a57806370e5603014610154578063776fb9c01461015c575b600080fd5b6101386004803603602081101561013157600080fd5b50356102fd565b005b610142610380565b60408051918252519081900360200190f35b610142610386565b61014261038c565b6101426004803603602081101561017a57600080fd5b5035610392565b6101896103e4565b604080516001600160a01b039092168252519081900360200190f35b6101896103f3565b6101d9600480360360408110156101c357600080fd5b506001600160a01b038135169060200135610402565b604080519315158452602084019290925282820152519081900360600190f35b6101386004803603606081101561020f57600080fd5b5080359060208101359060400135610480565b610138610701565b6101386004803603602081101561024057600080fd5b5035610811565b61026d6004803603602081101561025d57600080fd5b50356001600160a01b03166109ef565b6040805192835260208301919091528051918290030190f35b610142610a08565b610142600480360360208110156102a457600080fd5b5035610a0e565b6102b3610a66565b604080519115158252519081900360200190f35b610138600480360360208110156102dd57600080fd5b50356001600160a01b0316610a6f565b610138610ad9565b610189610b45565b6001811015801561030f575060088111155b610360576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b3360008181526008602052604090208281559061037c90610b54565b5050565b60035481565b60065481565b60025481565b600081600114156103a5575060966103df565b81600214156103b7575061012c6103df565b81600314156103c957506103e86103df565b81600414156103db57506109c46103df565b5060965b919050565b6007546001600160a01b031681565b6000546001600160a01b031681565b6001600160a01b03821660009081526008602090815260408083208484526004810190925282205482918291801561046b575060008581526003820160209081526040808320546002948501835281842090845290915290200154600193508492509050610479565b600086600094509450945050505b9250925092565b60018110158015610492575060088111155b6104e3576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b60008054604080516323b872dd60e01b81523360048201523060248201526044810187905290516001600160a01b03909216926323b872dd926064808401936020939083900390910190829087803b15801561053e57600080fd5b505af1158015610552573d6000803e3d6000fd5b505050506040513d602081101561056857600080fd5b50516105bb576040805162461bcd60e51b815260206004820152601a60248201527f4861766520746f6b656e73206265656e20617070726f7665643f000000000000604482015290519081900360640190fd5b336000908152600860205260408120906105e960646105e36105dc87610392565b8890610bf4565b90610c56565b90506105f3610e30565b604051806060016040528083815260200186815260200161061d61061688610a0e565b4290610c98565b90526000868152600385016020526040902054909150610665576000858152600384016020526040902054610653906001610c98565b60008681526003850160205260409020555b6000858152600484016020526040812054610681906001610c98565b6000878152600280870160209081526040808420858552825280842087518155828801516001808301919091558289015191909401558a8452600489019091529091208290558501549091506106d79084610c98565b60018501556003546106e99084610c98565b6003558484556106f833610b54565b50505050505050565b60055460ff16610758576040805162461bcd60e51b815260206004820152601e60248201527f4d75737420626520696e207570646174652073746167696e67206d6f64650000604482015290519081900360640190fd5b6006544210156107995760405162461bcd60e51b8152600401808060200182810382526028815260200180610e946028913960400191505060405180910390fd5b6005805460ff1916905542600490815560015460025460408051630c39622b60e21b815293840191909152516001600160a01b03909116916330e588ac91602480830192600092919082900301818387803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b50505050565b3360009081526008602090815260408083208484526003810183528184205460028083018552838620828752909452919093209182015490919042101561089f576040805162461bcd60e51b815260206004820152601b60248201527f546f6b656e7320617265207374696c6c2074696d656c6f636b65640000000000604482015290519081900360640190fd5b805460018401546108af91610cf2565b600184015580546003546108c291610cf2565b60038190555060006108e76108df60646105e38560010154610392565b835490610c56565b600080546040805163a9059cbb60e01b81523360048201526024810185905290519394506001600160a01b039091169263a9059cbb92604480840193602093929083900390910190829087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b505050506040513d602081101561096a57600080fd5b50506000858152600280860160209081526040808420878552909152822082815560018082018490559101919091556109a4908490610c98565b600086815260038601602090815260408083209390935560048701905220546109ce906001610cf2565b60008681526004860160205260409020556109e833610b54565b5050505050565b6008602052600090815260409020805460019091015482565b60045481565b60008160011415610a235750621275006103df565b8160021415610a3657506224ea006103df565b8160031415610a495750626ebe006103df565b8160041415610a5c575062dd7c006103df565b5062127500919050565b60055460ff1681565b6007546001600160a01b03163314610ab7576040805162461bcd60e51b815260206004820152600660248201526510a7bbb732b960d11b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600454610ae99062015180610c98565b421015610b275760405162461bcd60e51b8152600401808060200182810382526021815260200180610e736021913960400191505060405180910390fd5b6005805460ff19166001179055610b4042610258610c98565b600655565b6001546001600160a01b031681565b6001600160a01b03811660009081526008602052604081206001810154600354919291610b8091610cf2565b82546001840154919250600091610b9691610bf4565b90506000610baf60025484610bf490919063ffffffff16565b90506000610bbd8383610c98565b90506000600354118015610bd5575060008560010154115b15610bec57600354610be8908290610c56565b6002555b505050505050565b600082610c0357506000610c50565b82820282848281610c1057fe5b0414610c4d5760405162461bcd60e51b8152600401808060200182810382526021815260200180610e526021913960400191505060405180910390fd5b90505b92915050565b6000610c4d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d34565b600082820183811015610c4d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610c4d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dd6565b60008183610dc05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d85578181015183820152602001610d6d565b50505050905090810190601f168015610db25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610dcc57fe5b0495945050505050565b60008184841115610e285760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610d85578181015183820152602001610d6d565b505050900390565b6040518060600160405280600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d75737420776169742031206461792073696e6365206c617374207570646174654d7573742077616974203130206d696e757465732073696e63652075706461746520737461676564a26469706673582212205ae4d1e3fce30900b7c8886f8dfc56ff3e9a2883f80e0acb1ce334923346a81064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063978f254b116100a2578063bbdc1d6711610071578063bbdc1d671461028e578063bf6ece40146102ab578063c851cc32146102c7578063c94c8201146102ed578063d80137e1146102f557610116565b8063978f254b14610222578063a33231591461022a578063a87430ba14610247578063ae38e4781461028657610116565b80638a48abc4116100e95780638a48abc4146101645780638da5cb5b146101815780638e75217e146101a557806392d48903146101ad578063952c5df7146101f957610116565b80632a23cf201461011b578063310fdd0a1461013a57806370e5603014610154578063776fb9c01461015c575b600080fd5b6101386004803603602081101561013157600080fd5b50356102fd565b005b610142610380565b60408051918252519081900360200190f35b610142610386565b61014261038c565b6101426004803603602081101561017a57600080fd5b5035610392565b6101896103e4565b604080516001600160a01b039092168252519081900360200190f35b6101896103f3565b6101d9600480360360408110156101c357600080fd5b506001600160a01b038135169060200135610402565b604080519315158452602084019290925282820152519081900360600190f35b6101386004803603606081101561020f57600080fd5b5080359060208101359060400135610480565b610138610701565b6101386004803603602081101561024057600080fd5b5035610811565b61026d6004803603602081101561025d57600080fd5b50356001600160a01b03166109ef565b6040805192835260208301919091528051918290030190f35b610142610a08565b610142600480360360208110156102a457600080fd5b5035610a0e565b6102b3610a66565b604080519115158252519081900360200190f35b610138600480360360208110156102dd57600080fd5b50356001600160a01b0316610a6f565b610138610ad9565b610189610b45565b6001811015801561030f575060088111155b610360576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b3360008181526008602052604090208281559061037c90610b54565b5050565b60035481565b60065481565b60025481565b600081600114156103a5575060966103df565b81600214156103b7575061012c6103df565b81600314156103c957506103e86103df565b81600414156103db57506109c46103df565b5060965b919050565b6007546001600160a01b031681565b6000546001600160a01b031681565b6001600160a01b03821660009081526008602090815260408083208484526004810190925282205482918291801561046b575060008581526003820160209081526040808320546002948501835281842090845290915290200154600193508492509050610479565b600086600094509450945050505b9250925092565b60018110158015610492575060088111155b6104e3576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b60008054604080516323b872dd60e01b81523360048201523060248201526044810187905290516001600160a01b03909216926323b872dd926064808401936020939083900390910190829087803b15801561053e57600080fd5b505af1158015610552573d6000803e3d6000fd5b505050506040513d602081101561056857600080fd5b50516105bb576040805162461bcd60e51b815260206004820152601a60248201527f4861766520746f6b656e73206265656e20617070726f7665643f000000000000604482015290519081900360640190fd5b336000908152600860205260408120906105e960646105e36105dc87610392565b8890610bf4565b90610c56565b90506105f3610e30565b604051806060016040528083815260200186815260200161061d61061688610a0e565b4290610c98565b90526000868152600385016020526040902054909150610665576000858152600384016020526040902054610653906001610c98565b60008681526003850160205260409020555b6000858152600484016020526040812054610681906001610c98565b6000878152600280870160209081526040808420858552825280842087518155828801516001808301919091558289015191909401558a8452600489019091529091208290558501549091506106d79084610c98565b60018501556003546106e99084610c98565b6003558484556106f833610b54565b50505050505050565b60055460ff16610758576040805162461bcd60e51b815260206004820152601e60248201527f4d75737420626520696e207570646174652073746167696e67206d6f64650000604482015290519081900360640190fd5b6006544210156107995760405162461bcd60e51b8152600401808060200182810382526028815260200180610e946028913960400191505060405180910390fd5b6005805460ff1916905542600490815560015460025460408051630c39622b60e21b815293840191909152516001600160a01b03909116916330e588ac91602480830192600092919082900301818387803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b50505050565b3360009081526008602090815260408083208484526003810183528184205460028083018552838620828752909452919093209182015490919042101561089f576040805162461bcd60e51b815260206004820152601b60248201527f546f6b656e7320617265207374696c6c2074696d656c6f636b65640000000000604482015290519081900360640190fd5b805460018401546108af91610cf2565b600184015580546003546108c291610cf2565b60038190555060006108e76108df60646105e38560010154610392565b835490610c56565b600080546040805163a9059cbb60e01b81523360048201526024810185905290519394506001600160a01b039091169263a9059cbb92604480840193602093929083900390910190829087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b505050506040513d602081101561096a57600080fd5b50506000858152600280860160209081526040808420878552909152822082815560018082018490559101919091556109a4908490610c98565b600086815260038601602090815260408083209390935560048701905220546109ce906001610cf2565b60008681526004860160205260409020556109e833610b54565b5050505050565b6008602052600090815260409020805460019091015482565b60045481565b60008160011415610a235750621275006103df565b8160021415610a3657506224ea006103df565b8160031415610a495750626ebe006103df565b8160041415610a5c575062dd7c006103df565b5062127500919050565b60055460ff1681565b6007546001600160a01b03163314610ab7576040805162461bcd60e51b815260206004820152600660248201526510a7bbb732b960d11b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600454610ae99062015180610c98565b421015610b275760405162461bcd60e51b8152600401808060200182810382526021815260200180610e736021913960400191505060405180910390fd5b6005805460ff19166001179055610b4042610258610c98565b600655565b6001546001600160a01b031681565b6001600160a01b03811660009081526008602052604081206001810154600354919291610b8091610cf2565b82546001840154919250600091610b9691610bf4565b90506000610baf60025484610bf490919063ffffffff16565b90506000610bbd8383610c98565b90506000600354118015610bd5575060008560010154115b15610bec57600354610be8908290610c56565b6002555b505050505050565b600082610c0357506000610c50565b82820282848281610c1057fe5b0414610c4d5760405162461bcd60e51b8152600401808060200182810382526021815260200180610e526021913960400191505060405180910390fd5b90505b92915050565b6000610c4d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d34565b600082820183811015610c4d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610c4d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dd6565b60008183610dc05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d85578181015183820152602001610d6d565b50505050905090810190601f168015610db25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610dcc57fe5b0495945050505050565b60008184841115610e285760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610d85578181015183820152602001610d6d565b505050900390565b6040518060600160405280600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d75737420776169742031206461792073696e6365206c617374207570646174654d7573742077616974203130206d696e757465732073696e63652075706461746520737461676564a26469706673582212205ae4d1e3fce30900b7c8886f8dfc56ff3e9a2883f80e0acb1ce334923346a81064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6139,
        "contract": "contracts/Governance.sol:Governance",
        "label": "YGYToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 6141,
        "contract": "contracts/Governance.sol:Governance",
        "label": "RAMRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRAMv1Router)16294"
      },
      {
        "astId": 6143,
        "contract": "contracts/Governance.sol:Governance",
        "label": "weightedNumber",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6145,
        "contract": "contracts/Governance.sol:Governance",
        "label": "votingShares",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6147,
        "contract": "contracts/Governance.sol:Governance",
        "label": "lastRAMRouterUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6149,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updateStagingMode",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 6151,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updateStagingReadyTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6153,
        "contract": "contracts/Governance.sol:Governance",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6183,
        "contract": "contracts/Governance.sol:Governance",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(User)6172_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRAMv1Router)16294": {
        "encoding": "inplace",
        "label": "contract IRAMv1Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)6172_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Governance.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6172_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TimeLock)6179_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Governance.TimeLock))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TimeLock)6179_storage)"
      },
      "t_mapping(t_uint256,t_struct(TimeLock)6179_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governance.TimeLock)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeLock)6179_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TimeLock)6179_storage": {
        "encoding": "inplace",
        "label": "struct Governance.TimeLock",
        "members": [
          {
            "astId": 6174,
            "contract": "contracts/Governance.sol:Governance",
            "label": "multipliedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6176,
            "contract": "contracts/Governance.sol:Governance",
            "label": "level",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6178,
            "contract": "contracts/Governance.sol:Governance",
            "label": "unlockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(User)6172_storage": {
        "encoding": "inplace",
        "label": "struct Governance.User",
        "members": [
          {
            "astId": 6155,
            "contract": "contracts/Governance.sol:Governance",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6157,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelockedYGY",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6163,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelocks",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TimeLock)6179_storage))"
          },
          {
            "astId": 6167,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelockTop",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 6171,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelockCount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}