{
  "address": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uniV2Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeApprover",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "RAMVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftFactory",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_regenerator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__storage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linkAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        }
      ],
      "name": "FeeApproverChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALIFIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_NFTFactory",
      "outputs": [
        {
          "internalType": "contract INFTFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_RAMToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_RAMVault",
      "outputs": [
        {
          "internalType": "contract IRAMVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_YGYRAMPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_YGYToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_YGYWETHPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_dXIOTToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feeApprover",
      "outputs": [
        {
          "internalType": "contract IFeeApprover",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uniV2Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "autoStake",
          "type": "bool"
        }
      ],
      "name": "addLiquidityETHOnly",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "autoStake",
          "type": "bool"
        }
      ],
      "name": "addLiquidityYGYOnly",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeApprover",
          "type": "address"
        }
      ],
      "name": "changeFeeApprover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ygyAmt",
          "type": "uint256"
        }
      ],
      "name": "getLPTokenPerYGYUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userProvidedSeed",
          "type": "uint256"
        }
      ],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserLotteryLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryTriggerer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regenerator",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regeneratorTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rngLinkFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userProvidedSeed",
          "type": "uint256"
        }
      ],
      "name": "selfRequestRandomNumber",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeApproverAddress",
          "type": "address"
        }
      ],
      "name": "setFeeApprover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_regeneratorTax",
          "type": "uint256"
        }
      ],
      "name": "setRegeneratorTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "levelOneChance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelTwoChance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelThreeChance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelFourChance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelFiveChance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "updateKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rngLinkFee",
          "type": "uint256"
        }
      ],
      "name": "updateRngLinkFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6aef7e4a7910efded4b96570c4abc9bebc353e3d8fdcea71f975d7e9ae50b406",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
    "transactionIndex": 0,
    "gasUsed": "3822973",
    "logsBloom": "0x
    "blockHash": "0x48c209c6a8ed2b55b61de1d3e1fd8548559023e1ac69e50770af314e596cd780",
    "transactionHash": "0x6aef7e4a7910efded4b96570c4abc9bebc353e3d8fdcea71f975d7e9ae50b406",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 36,
        "transactionHash": "0x6aef7e4a7910efded4b96570c4abc9bebc353e3d8fdcea71f975d7e9ae50b406",
        "address": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x48c209c6a8ed2b55b61de1d3e1fd8548559023e1ac69e50770af314e596cd780"
      }
    ],
    "blockNumber": 36,
    "cumulativeGasUsed": "3822973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
    "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "solcInputHash": "e1126a469c08dd05a8ec89baab354616",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeApprover\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"RAMVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftFactory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_regenerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"FeeApproverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALIFIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NFTFactory\",\"outputs\":[{\"internalType\":\"contract INFTFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RAMToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RAMVault\",\"outputs\":[{\"internalType\":\"contract IRAMVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_YGYRAMPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_YGYToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_YGYWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dXIOTToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeApprover\",\"outputs\":[{\"internalType\":\"contract IFeeApprover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityETHOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityYGYOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeApprover\",\"type\":\"address\"}],\"name\":\"changeFeeApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ygyAmt\",\"type\":\"uint256\"}],\"name\":\"getLPTokenPerYGYUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLotteryLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTriggerer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regenerator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regeneratorTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rngLinkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"}],\"name\":\"selfRequestRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeApproverAddress\",\"type\":\"address\"}],\"name\":\"setFeeApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regeneratorTax\",\"type\":\"uint256\"}],\"name\":\"setRegeneratorTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"levelOneChance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelTwoChance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelThreeChance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelFourChance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelFiveChance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"updateKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rngLinkFee\",\"type\":\"uint256\"}],\"name\":\"updateRngLinkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRandomNumber(uint256)\":{\"notice\":\"Requests randomness from a user-provided seed\"},\"selfRequestRandomNumber(uint256)\":{\"notice\":\"Requests randomness from a user-provided seed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RAMV1router.sol\":\"RAMv1Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x0b004386a2f5c662413598e3a2644bdc0ba8ec95c1bbb50a15f97e55c25e8bc1\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xdbf46b45a4c9f38ba71a0391aed0e7b108854b619f292d907ae537228868bda6\"},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n\\n\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd1778eb2a00f482020d0298305421371eb6487ca0d7d05d9e2b91c353e53f47f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x4f3a00edb976e97943fe0a620ea2948955a75eff2a9231c202d50d1e062d8da5\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\",\"keccak256\":\"0xfd5cf8319cb84ca04ea407d6fba686d53ad7f5d2bf476f41678f5a751d12a7ea\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xd1d78b1c8534fbcf8fdc8fbfec9133df142ef8cae9ae820929dfe6d80d2c790a\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\\\";\\n// import \\\"@openzeppelin/contractss-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./libraries/AddressERC721.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev Removed and added funtionality needed from the original.\\n */\\ncontract ERC721 is\\n    ContextUpgradeSafe,\\n    ERC165UpgradeSafe,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using SafeMath for uint256;\\n    using AddressERC721 for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdTracker;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,uint256,address)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = bytes4(\\n        keccak256(\\\"onERC721Received(address,address,uint256,uint256,address)\\\")\\n    );\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Tokens will only have one URI.\\n    string public _tokenURI;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` and tokenURI to the token collection.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _tokenURI = tokenURI;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public override view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public override view returns (address) {\\n        return\\n            _tokenOwners.get(\\n                tokenId,\\n                \\\"ERC721: owner query for nonexistent token\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        override\\n        view\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n        return _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        override\\n        view\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function mint(address to) internal returns (uint256 tokenId) {\\n        uint256 currentId = _tokenIdTracker.current();\\n        _mint(to, currentId);\\n        _tokenIdTracker.increment();\\n        return currentId;\\n    }\\n\\n    function _mint(address to, uint256 tokenId) private {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n        _holderTokens[owner].remove(tokenId);\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = to.call(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        );\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        } else {\\n            bytes4 retval = abi.decode(returndata, (bytes4));\\n            return (retval == _ERC721_RECEIVED);\\n        }\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0xacf8a9c61a6218d9c7af47edd129ba56f7eed4ad5833376d9f709b6c33364d2f\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./YGYStorageV1.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract NFT is ERC721, AccessControlUpgradeSafe {\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    uint256 public contractId;\\n\\n    // Tradeable?\\n    bool allowTrade;\\n\\n    // Capped?\\n    bool isCapped;\\n    uint256 tokenCap;\\n    address ramVault;\\n    // Props for unique token\\n    mapping(uint256 => YGYStorageV1.NFTProperty) public properties;\\n\\n    // How many choices available for this particular NFT\\n    uint256 propertyChoices;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _contractId,\\n        uint256 _propertyChoices,\\n        address _superAdmin,\\n        bool _allowTrade,\\n        bool _isCapped,\\n        uint256 _tokenCap,\\n        address _ramVault\\n    ) public ERC721(_name, _symbol, _tokenURI) {\\n        allowTrade = _allowTrade;\\n        isCapped = _isCapped;\\n        tokenCap = _tokenCap;\\n        contractId = _contractId;\\n        propertyChoices = _propertyChoices;\\n        __AccessControl_init();\\n        _setupRole(SYSTEM_ROLE, _msgSender());\\n        _setupRole(SYSTEM_ROLE, _ramVault);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    /**\\n     * @dev Used for tokens that are transferrable and non-delegating.\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            ownerOf(_tokenId) == _msgSender() ||\\n                hasRole(SYSTEM_ROLE, _msgSender()),\\n            \\\"Not allowed\\\"\\n        );\\n        console.log(\\\"burn baby\\\");\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Mint a token and set it's property\\n     */\\n    function mint(\\n        address to,\\n        uint256 _randomness,\\n        YGYStorageV1 _storage\\n    ) public returns (uint256 _tokenId) {\\n        require(\\n            !isCapped || (isCapped && totalSupply() <= tokenCap),\\n            \\\"NFT Limit reached\\\"\\n        );\\n        require(hasRole(SYSTEM_ROLE, _msgSender()), \\\"Not allowed\\\");\\n\\n        // Mint the token, get the unique id.\\n        uint256 tokenId = super.mint(to);\\n        // Get a random index for property selection\\n        uint256 propIndex;\\n        if (propertyChoices > 1) {\\n            propIndex = _randomness.mod(propertyChoices);\\n        }\\n        console.log(\\\"in mint\\\", propIndex, contractId);\\n        // Random properties gotten\\n        (string memory pType, uint256 pValue, bytes32 extra) = _storage\\n            .getNFTProperty(contractId + 1, propIndex);\\n\\n        // Finally, set the property.\\n        properties[tokenId] = YGYStorageV1.NFTProperty(pType, pValue, extra);\\n        return tokenId;\\n    }\\n\\n    function getTokenProperty(uint256 _tokenId)\\n        public\\n        view\\n        returns (YGYStorageV1.NFTProperty memory)\\n    {\\n        return properties[_tokenId];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _beforeTokenTransfer(from, to, tokenId);\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Used to halt transfers while maintaining minting ability for the delegator / minter.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n\\n        require(\\n            (allowTrade || hasRole(SYSTEM_ROLE, _msgSender())) ||\\n                (!allowTrade && hasRole(SYSTEM_ROLE, to)),\\n            \\\"External trades not allowed\\\"\\n        );\\n        console.log(from, to, name(), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x0a3edd7501f24a124cdb44ecb5931426af86c7cd6643f2df28f900b2e2fd80bb\",\"license\":\"MIT\"},\"contracts/RAMV1router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\nimport \\\"./uniswapv2/libraries/Math.sol\\\";\\nimport \\\"./uniswapv2/libraries/UniswapV2Library.sol\\\";\\nimport \\\"./interfaces/INFT.sol\\\";\\nimport \\\"./VRFConsumerBase.sol\\\";\\nimport \\\"./interfaces/INFTFactory.sol\\\";\\nimport \\\"./interfaces/IFeeApprover.sol\\\";\\nimport \\\"./interfaces/IRAMVault.sol\\\";\\nimport \\\"./NFT.sol\\\";\\nimport \\\"./StorageState.sol\\\";\\n\\n// This contract is supposed to streamline liquidity additions\\n// By allowing people to put in any amount of ETH or YGY and get LP tokens back\\ncontract RAMv1Router is StorageState, OwnableUpgradeSafe, VRFConsumerBase {\\n    // RAM protocol variable\\n    IFeeApprover public _feeApprover;\\n    IRAMVault public _RAMVault;\\n    address public _uniV2Factory;\\n\\n    // Governance and regenerator tax\\n    bool governanceSet;\\n    address public governance;\\n    address payable public regenerator;\\n    uint256 public regeneratorTax;\\n\\n    // RNG\\n    uint256 public constant MAX = 2**256 - 1;\\n    uint256 public constant SCALE = 100;\\n    uint256 public constant SCALIFIER = MAX / SCALE;\\n    uint256 public constant OFFSET = 1;\\n    uint256 public randomResult;\\n    uint256 public rngLinkFee;\\n    bytes32 internal keyHash;\\n\\n    address public _YGYRAMPair;\\n    address public _YGYToken;\\n    address public _YGYWETHPair;\\n    address public _RAMToken;\\n    IWETH public _WETH;\\n    IERC20 public _dXIOTToken;\\n\\n    // Lottery tracking\\n    struct LotteryTicket {\\n        address owner;\\n        uint256 levelOneChance;\\n        uint256 levelTwoChance;\\n        uint256 levelThreeChance;\\n        uint256 levelFourChance;\\n        uint256 levelFiveChance;\\n    }\\n    uint256 public ticketCount;\\n\\n    mapping(uint256 => LotteryTicket) public tickets;\\n\\n    // NFT\\n    INFTFactory public _NFTFactory;\\n\\n    constructor(\\n        address uniV2Factory,\\n        address feeApprover,\\n        address RAMVault,\\n        address nftFactory,\\n        address payable _regenerator,\\n        address __storage,\\n        address linkAddr,\\n        address vrfAddr\\n    )\\n        public\\n        VRFConsumerBase(\\n            vrfAddr, // VRF Coordinator (KOVAN) 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9,\\n            linkAddr // LINK Token (KOVAN) 0xa36085F69e2889c224210F603D836748e7dC0088\\n        )\\n    {\\n        __Ownable_init();\\n        _uniV2Factory = uniV2Factory;\\n        _feeApprover = IFeeApprover(feeApprover);\\n        _RAMVault = IRAMVault(RAMVault);\\n        _NFTFactory = INFTFactory(nftFactory);\\n        _storage = YGYStorageV1(__storage);\\n\\n        regenerator = _regenerator;\\n        // TODO: Update to mainnet variables\\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\\n        rngLinkFee = 0.1 * 10**18;\\n    }\\n\\n    function setTokens() external onlyOwner {\\n        _YGYRAMPair = _storage._YGYRAMPair();\\n        _YGYToken = _storage._YGYToken();\\n        _YGYWETHPair = _storage._YGYWETHPair();\\n        _RAMToken = _storage._RAMToken();\\n        _WETH = IWETH(_storage._WETH());\\n        _dXIOTToken = IERC20(_storage._dXIOTToken());\\n        refreshApproval();\\n    }\\n\\n    function setGovernance(address _governance) public {\\n        require(!governanceSet, \\\"Governance contract has already been set\\\");\\n        governanceSet = true;\\n        governance = _governance;\\n    }\\n\\n    function setRegeneratorTax(uint256 _regeneratorTax) public {\\n        require(msg.sender == governance, \\\"Locked to governance\\\");\\n        regeneratorTax = _regeneratorTax;\\n    }\\n\\n    function refreshApproval() public {\\n        IUniswapV2Pair(_YGYRAMPair).approve(address(_RAMVault), uint256(-1));\\n    }\\n\\n    event FeeApproverChanged(\\n        address indexed newAddress,\\n        address indexed oldAddress\\n    );\\n\\n    fallback() external payable {\\n        if (msg.sender != address(_WETH)) {\\n            addLiquidityETHOnly(msg.sender, false);\\n        }\\n    }\\n\\n    // Markets buys YGY with 100% of the ETH deposited, then calls _swapYGYForRAMAndAddLiquidity\\n    function addLiquidityETHOnly(address payable to, bool autoStake)\\n        public\\n        payable\\n    {\\n        require(to != address(0), \\\"Invalid address\\\");\\n\\n        uint256 buyAmount = msg.value;\\n        require(buyAmount > 0, \\\"Insufficient ETH amount\\\");\\n        _WETH.deposit{value: msg.value}();\\n\\n        (uint256 reserveWeth, uint256 reserveYGY) = getYGYWETHPairReserves();\\n        uint256 outYGY = UniswapV2Library.getAmountOut(\\n            buyAmount,\\n            reserveWeth,\\n            reserveYGY\\n        );\\n\\n        _WETH.transfer(_YGYWETHPair, buyAmount);\\n\\n        _storage.setLiquidityContributedEthValue(to, buyAmount, false);\\n\\n        (address token0, address token1) = UniswapV2Library.sortTokens(\\n            address(_WETH),\\n            _YGYToken\\n        );\\n        IUniswapV2Pair(_YGYWETHPair).swap(\\n            _YGYToken == token0 ? outYGY : 0,\\n            _YGYToken == token1 ? outYGY : 0,\\n            address(this),\\n            \\\"\\\"\\n        );\\n\\n        // Calculate tax and send directly to regenerator\\n        uint256 taxedAmount = outYGY.mul(regeneratorTax).div(100);\\n        regenerator.transfer(taxedAmount);\\n        uint256 outAmount = outYGY.sub(taxedAmount);\\n        _swapYGYForRAMAndAddLiquidity(outAmount.div(2), to, autoStake);\\n    }\\n\\n    // addLiquidityYGYOnly transfers approved YGY tokens to the contract and calls _swapYGYForRAMAndAddLiquidity\\n    function addLiquidityYGYOnly(uint256 amount, bool autoStake)\\n        public\\n        payable\\n    {\\n        require(amount > 0, \\\"Insufficient token amount\\\");\\n        require(\\n            IERC20(_YGYToken).transferFrom(msg.sender, address(this), amount),\\n            \\\"Approve tokens first\\\"\\n        );\\n\\n        // Calculate value of YGY in ETH for liquidity value tracking\\n        (uint256 reserveWeth, uint256 reserveYGY) = getYGYWETHPairReserves();\\n        uint256 outETH = UniswapV2Library.getAmountOut(\\n            amount,\\n            reserveYGY,\\n            reserveWeth\\n        );\\n\\n        // Calculate tax and send directly to regenerator\\n        uint256 taxedAmount = amount.mul(regeneratorTax).div(100);\\n        regenerator.transfer(taxedAmount);\\n\\n        _storage.setLiquidityContributedEthValue(msg.sender, outETH, false);\\n\\n        uint256 outAmount = amount.sub(taxedAmount);\\n        _swapYGYForRAMAndAddLiquidity(outAmount.div(2), msg.sender, autoStake);\\n    }\\n\\n    // With buyAmount*2 amount of YGY tokens on the contract, this function market buys RAM with buyAmount\\n    // of YGY and then calls _addLiquidity\\n    function _swapYGYForRAMAndAddLiquidity(\\n        uint256 buyAmount,\\n        address payable to,\\n        bool autoStake\\n    ) internal {\\n        (uint256 reserveYGY, uint256 reserveRAM) = getYGYRAMPairReserves();\\n        uint256 outRAM = UniswapV2Library.getAmountOut(\\n            buyAmount,\\n            reserveYGY,\\n            reserveRAM\\n        );\\n\\n        require(\\n            IERC20(_YGYToken).transfer(_YGYRAMPair, buyAmount),\\n            \\\"Transfer failed\\\"\\n        );\\n\\n        (address token0, address token1) = UniswapV2Library.sortTokens(\\n            _YGYToken,\\n            _RAMToken\\n        );\\n\\n        IUniswapV2Pair(_YGYRAMPair).swap(\\n            _RAMToken == token0 ? outRAM : 0,\\n            _RAMToken == token1 ? outRAM : 0,\\n            address(this),\\n            \\\"\\\"\\n        );\\n\\n        _addLiquidity(outRAM, buyAmount, to, autoStake);\\n\\n        if(_dXIOTToken.balanceOf(address(this)) > 1 * 1e18) {\\n            _dXIOTToken.transferFrom(\\n                address(this),\\n                to,\\n                1 * 1e18\\n            );\\n        }\\n\\n        generateLotteryTickets(to);\\n        sync();\\n    }\\n\\n    // _addLiquidity sends RAM, YGY tokens to the _YGYRAMPair contract and mints _YGYRAMPair LP tokens.\\n    // It either auto stakes the LP tokens to the pool or sends them to the sender's address\\n    function _addLiquidity(\\n        uint256 RAMAmount,\\n        uint256 YGYAmount,\\n        address payable to,\\n        bool autoStake\\n    ) internal {\\n        (uint256 YGYReserve, uint256 RAMReserve) = getYGYRAMPairReserves();\\n\\n        uint256 optimalRAMAmount = UniswapV2Library.quote(\\n            YGYAmount,\\n            YGYReserve,\\n            RAMReserve\\n        );\\n\\n        uint256 optimalYGYAmount;\\n        if (optimalRAMAmount > RAMAmount) {\\n            optimalYGYAmount = UniswapV2Library.quote(\\n                RAMAmount,\\n                RAMReserve,\\n                YGYReserve\\n            );\\n            optimalRAMAmount = RAMAmount;\\n        } else optimalYGYAmount = YGYAmount;\\n\\n        assert(IERC20(_YGYToken).transfer(_YGYRAMPair, optimalYGYAmount));\\n        assert(IERC20(_RAMToken).transfer(_YGYRAMPair, optimalRAMAmount));\\n\\n        if (autoStake) {\\n            IUniswapV2Pair(_YGYRAMPair).mint(address(this));\\n            _RAMVault.depositFor(\\n                to,\\n                0,\\n                IUniswapV2Pair(_YGYRAMPair).balanceOf(address(this))\\n            );\\n        } else IUniswapV2Pair(_YGYRAMPair).mint(to);\\n\\n        // Refund dust to sender\\n        if (RAMAmount > optimalRAMAmount)\\n            IERC20(_RAMToken).transfer(to, RAMAmount.sub(optimalRAMAmount));\\n\\n        if (YGYAmount > optimalYGYAmount)\\n            IERC20(_YGYToken).transfer(to, YGYAmount.sub(optimalYGYAmount));\\n    }\\n\\n    function getLPTokenPerYGYUnit(uint256 ygyAmt)\\n        public\\n        view\\n        returns (uint256 liquidity)\\n    {\\n        (uint256 reserveYGY, uint256 reserveRAM) = getYGYRAMPairReserves();\\n        uint256 outRAM = UniswapV2Library.getAmountOut(\\n            ygyAmt.div(2),\\n            reserveYGY,\\n            reserveRAM\\n        );\\n        uint256 _totalSupply = IUniswapV2Pair(_YGYRAMPair).totalSupply();\\n\\n        (address token0, ) = UniswapV2Library.sortTokens(_YGYToken, _RAMToken);\\n        (uint256 amount0, uint256 amount1) = token0 == _RAMToken\\n            ? (outRAM, ygyAmt.div(2))\\n            : (ygyAmt.div(2), outRAM);\\n        (uint256 _reserve0, uint256 _reserve1) = token0 == _RAMToken\\n            ? (reserveRAM, reserveYGY)\\n            : (reserveYGY, reserveRAM);\\n        liquidity = Math.min(\\n            amount0.mul(_totalSupply) / _reserve0,\\n            amount1.mul(_totalSupply) / _reserve1\\n        );\\n    }\\n\\n    function getYGYWETHPairReserves()\\n        internal\\n        view\\n        returns (uint256 wethReserves, uint256 YGYReserves)\\n    {\\n        (address token0, ) = UniswapV2Library.sortTokens(\\n            address(_WETH),\\n            _YGYToken\\n        );\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_YGYWETHPair)\\n            .getReserves();\\n        (wethReserves, YGYReserves) = token0 == _YGYToken\\n            ? (reserve1, reserve0)\\n            : (reserve0, reserve1);\\n    }\\n\\n    function getYGYRAMPairReserves()\\n        internal\\n        view\\n        returns (uint256 YGYReserves, uint256 RAMReserves)\\n    {\\n        (address token0, ) = UniswapV2Library.sortTokens(_YGYToken, _RAMToken);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_YGYRAMPair)\\n            .getReserves();\\n        (YGYReserves, RAMReserves) = token0 == _RAMToken\\n            ? (reserve1, reserve0)\\n            : (reserve0, reserve1);\\n    }\\n\\n    // Function sync fee approver\\n    function sync() public {\\n        _feeApprover.sync();\\n    }\\n\\n    // sets fee approver in case fee approver gets chaned.\\n    function setFeeApprover(address feeApproverAddress) public onlyOwner {\\n        _feeApprover = IFeeApprover(feeApproverAddress);\\n    }\\n\\n    function changeFeeApprover(address feeApprover) external onlyOwner {\\n        address oldAddress = address(_feeApprover);\\n        _feeApprover = IFeeApprover(feeApprover);\\n\\n        emit FeeApproverChanged(feeApprover, oldAddress);\\n    }\\n\\n    // -------------------------------------------------\\n    //              NFT Lottery + Chainlink RNG\\n    // -------------------------------------------------\\n\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(uint256 userProvidedSeed)\\n        public\\n        returns (bytes32 requestId)\\n    {\\n        require(\\n            LINK.balanceOf(address(this)) >= rngLinkFee,\\n            \\\"Not enough LINK on contract\\\"\\n        );\\n        return requestRandomness(keyHash, rngLinkFee, userProvidedSeed);\\n    }\\n\\n    address public lotteryTriggerer;\\n\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function selfRequestRandomNumber(uint256 userProvidedSeed)\\n        public\\n        returns (bytes32 requestId)\\n    {\\n        console.log(\\\"here\\\");\\n        require(\\n            LINK.transferFrom(msg.sender, address(this), rngLinkFee),\\n            \\\"Not enough LINK approved to contract\\\"\\n        );\\n        lotteryTriggerer = msg.sender;\\n        return requestRandomness(keyHash, rngLinkFee, userProvidedSeed);\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n        internal\\n        override\\n    {\\n        randomResult = rand(randomness);\\n        INFT LinkNFT = INFT(_storage._NFTs(7));\\n        // Mint a LINK NFT to caller (only if they don't have one yet)\\n        if (LinkNFT.balanceOf(lotteryTriggerer) == 0) {\\n            _NFTFactory.mint(LinkNFT, lotteryTriggerer, randomResult);\\n        }\\n        lotteryTriggerer = address(0);\\n    }\\n\\n    function triggerLottery() external {\\n        require(randomResult != 0, \\\"No random number available\\\");\\n        applyRandomNumberToLottery();\\n        randomResult = 0;\\n    }\\n\\n    function rand(uint256 randomness) private pure returns (uint256 result) {\\n        uint256 factor = (randomness * 100) / 100;\\n        return factor % 100;\\n    }\\n\\n    function applyRandomNumberToLottery() internal {\\n        for (uint256 i = 0; i < ticketCount; i++) {\\n            LotteryTicket memory ticket = tickets[i];\\n            if (randomResult <= ticket.levelOneChance) {\\n                _NFTFactory.mint(\\n                    INFT(_storage._NFTs(1)),\\n                    ticket.owner,\\n                    randomResult\\n                );\\n            }\\n            if (randomResult <= ticket.levelTwoChance) {\\n                _NFTFactory.mint(\\n                    INFT(_storage._NFTs(2)),\\n                    ticket.owner,\\n                    randomResult\\n                );\\n            }\\n            if (randomResult <= ticket.levelThreeChance) {\\n                _NFTFactory.mint(\\n                    INFT(_storage._NFTs(3)),\\n                    ticket.owner,\\n                    randomResult\\n                );\\n            }\\n            if (randomResult <= ticket.levelFourChance) {\\n                _NFTFactory.mint(\\n                    INFT(_storage._NFTs(4)),\\n                    ticket.owner,\\n                    randomResult\\n                );\\n            }\\n            if (randomResult <= ticket.levelFiveChance) {\\n                _NFTFactory.mint(\\n                    INFT(_storage._NFTs(5)),\\n                    ticket.owner,\\n                    randomResult\\n                );\\n            }\\n\\n            _storage.setLiquidityContributedEthValue(ticket.owner, 0, true);\\n            delete tickets[i];\\n            _storage.setLastTicketLevel(ticket.owner, 0);\\n        }\\n\\n        // Reset lottery\\n        randomResult = 0;\\n        ticketCount = 0;\\n    }\\n\\n    function getUserLotteryLevel(address user) public view returns (uint256) {\\n        uint256 liquidityEthValue = _storage.liquidityContributedEthValue(user);\\n        if (liquidityEthValue < 1e18) {\\n            return 0;\\n        } else if (liquidityEthValue >= 1e18 && liquidityEthValue < 5e18) {\\n            return 1;\\n        } else if (liquidityEthValue >= 5e18 && liquidityEthValue < 10e18) {\\n            return 2;\\n        } else if (liquidityEthValue >= 10e18 && liquidityEthValue < 20e18) {\\n            return 3;\\n        } else if (liquidityEthValue >= 20e18 && liquidityEthValue < 30e18) {\\n            return 4;\\n        } else if (liquidityEthValue >= 30e18 && liquidityEthValue < 40e18) {\\n            return 5;\\n        } else if (liquidityEthValue >= 40e18 && liquidityEthValue < 50e18) {\\n            return 6;\\n        } else if (liquidityEthValue >= 50e18) {\\n            return 7;\\n        }\\n    }\\n\\n    // Mints a robot NFT to specified user if their dXIOT balance is over 20+\\n    function mintRobotNFT(address user) internal {\\n        INFT robot = INFT(_storage._NFTs(6));\\n        if (\\n            _dXIOTToken.balanceOf(user) >= 20e18 &&\\n            _NFTFactory.balanceOf(robot, user) == 0 &&\\n            robot.totalSupply() < 50\\n        ) {\\n            _NFTFactory.mint(robot, user, randomResult);\\n        }\\n    }\\n\\n    // Generates lottery tickets for users based on their current level and new level\\n    function generateLotteryTickets(address user) internal {\\n        uint256 currentLevel = _storage.lastTicketLevel(user);\\n        uint256 newLevel = getUserLotteryLevel(user);\\n        for (uint256 i = currentLevel; i < newLevel; i++) {\\n            LotteryTicket memory ticket;\\n            if (i == 0) {\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 50,\\n                    levelTwoChance: 0,\\n                    levelThreeChance: 0,\\n                    levelFourChance: 0,\\n                    levelFiveChance: 0\\n                });\\n            } else if (i == 1) {\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 75,\\n                    levelTwoChance: 50,\\n                    levelThreeChance: 0,\\n                    levelFourChance: 0,\\n                    levelFiveChance: 0\\n                });\\n            } else if (i == 2) {\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 100,\\n                    levelTwoChance: 75,\\n                    levelThreeChance: 50,\\n                    levelFourChance: 0,\\n                    levelFiveChance: 0\\n                });\\n            } else if (i == 3) {\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 100,\\n                    levelTwoChance: 100,\\n                    levelThreeChance: 75,\\n                    levelFourChance: 50,\\n                    levelFiveChance: 0\\n                });\\n            } else if (i == 4) {\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 100,\\n                    levelTwoChance: 100,\\n                    levelThreeChance: 100,\\n                    levelFourChance: 75,\\n                    levelFiveChance: 50\\n                });\\n                // Level 6 is an automatic winning ticket at every level except level 5, which is 50%\\n            } else if (i == 5) {\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 100,\\n                    levelTwoChance: 100,\\n                    levelThreeChance: 100,\\n                    levelFourChance: 100,\\n                    levelFiveChance: 50\\n                });\\n                // Level 7 is a winning ticket for each level + another winning ticket for levels 1-4\\n            } else if (i == 6) {\\n                // Winning ticket (levels 1-5)\\n                ticketCount++;\\n                tickets[ticketCount] = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 100,\\n                    levelTwoChance: 100,\\n                    levelThreeChance: 100,\\n                    levelFourChance: 100,\\n                    levelFiveChance: 100\\n                });\\n\\n                // Winning ticket (levels 1-4)\\n                ticket = LotteryTicket({\\n                    owner: user,\\n                    levelOneChance: 100,\\n                    levelTwoChance: 100,\\n                    levelThreeChance: 100,\\n                    levelFourChance: 100,\\n                    levelFiveChance: 0\\n                });\\n            }\\n\\n            // Add the ticket to the lottery\\n            if (ticket.owner != address(0)) {\\n                ticketCount++;\\n                tickets[ticketCount] = ticket;\\n            }\\n        }\\n\\n        if (newLevel >= 3) {\\n            mintRobotNFT(user);\\n        }\\n        _storage.setLastTicketLevel(user, newLevel);\\n    }\\n\\n    // Chainlink VRF mainnet functionality will change in the future: dynamic pricing\\n    function updateRngLinkFee(uint256 _rngLinkFee) public onlyOwner {\\n        rngLinkFee = _rngLinkFee;\\n    }\\n\\n    function updateKeyHash(bytes32 _keyHash) public onlyOwner {\\n        keyHash = _keyHash;\\n    }\\n}\\n\",\"keccak256\":\"0x8cb41c194016c6b55a657ecc238bd114d8c831e204abbf675cbc7b57131597e1\",\"license\":\"MIT\"},\"contracts/StorageState.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./YGYStorageV1.sol\\\";\\n\\ncontract StorageState {\\n    YGYStorageV1 _storage;\\n}\\n\",\"keccak256\":\"0xd8f72cec39b19b1759de2ccf6128fed12314c2571bb06a04ff67893ef6471b86\"},\"contracts/VRFConsumerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerInterface, and can\\n * @dev initialize VRFConsumerInterface's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness()\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls fulfillRandomness().\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it.\\n     *\\n     * @dev The VRFCoordinator expects a calling contract to have a method with\\n     * @dev this signature, and will trigger it once it has verified the proof\\n     * @dev associated with the randomness (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomness\\n     * @param randomness the VRF output\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n        internal\\n        virtual;\\n\\n    /**\\n     * @notice requestRandomness initiates a request for VRF output given _seed\\n     *\\n     * @dev See \\\"SECURITY CONSIDERATIONS\\\" above for more information on _seed.\\n     *\\n     * @dev The fulfillRandomness method receives the output, once it's provided\\n     * @dev by the Oracle, and verified by the vrfCoordinator.\\n     *\\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n     * @dev the _fee must exceed the fee specified during registration of the\\n     * @dev _keyHash.\\n     *\\n     * @param _keyHash ID of public key against which randomness is generated\\n     * @param _fee The amount of LINK to send with the request\\n     * @param _seed seed mixed into the input of the VRF\\n     *\\n     * @return requestId unique ID for this request\\n     *\\n     * @dev The returned requestId can be used to distinguish responses to *\\n     * @dev concurrent requests. It is passed as the first argument to\\n     * @dev fulfillRandomness.\\n     */\\n    function requestRandomness(\\n        bytes32 _keyHash,\\n        uint256 _fee,\\n        uint256 _seed\\n    ) internal returns (bytes32 requestId) {\\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n        // the hash of the block containing this request to obtain the seed/input\\n        // which is finally passed to the VRF cryptographic machinery.\\n        uint256 vRFSeed = makeVRFInputSeed(\\n            _keyHash,\\n            _seed,\\n            address(this),\\n            nonces[_keyHash]\\n        );\\n        // nonces[_keyHash] must stay in sync with\\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n        // This provides protection against the user repeating their input\\n        // seed, which would result in a predictable/duplicate output.\\n        nonces[_keyHash] = nonces[_keyHash].add(1);\\n        return makeRequestId(_keyHash, vRFSeed);\\n    }\\n\\n    LinkTokenInterface internal immutable LINK;\\n    address private immutable vrfCoordinator;\\n\\n    // Nonces for each VRF key from which randomness has been requested.\\n    //\\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\\n    /* keyHash */\\n    /* nonce */\\n    mapping(bytes32 => uint256) public nonces;\\n\\n    constructor(address _vrfCoordinator, address _link) public {\\n        vrfCoordinator = _vrfCoordinator;\\n        LINK = LinkTokenInterface(_link);\\n    }\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness)\\n        external\\n    {\\n        require(\\n            msg.sender == vrfCoordinator,\\n            \\\"Only VRFCoordinator can fulfill\\\"\\n        );\\n        fulfillRandomness(requestId, randomness);\\n    }\\n}\\n\",\"keccak256\":\"0xabd956edae55a463557f5e052bd6f9e41ea4af4d432626f1577d7cd91c10ccbc\"},\"contracts/YGYStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\nStorage contract for the YGY system\\n*/\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/INBUNIERC20.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract YGYStorageV1 is AccessControlUpgradeSafe {\\n    /* STORAGE CONFIG */\\n    using SafeMath for uint256;\\n    using PoolHelper for PoolInfo;\\n\\n    bytes32 public constant MODIFIER_ROLE = keccak256(\\\"MODIFIER_ROLE\\\");\\n\\n    function setModifierContracts(\\n        address _vault,\\n        address _router,\\n        address _nftFactory\\n    ) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Nono\\\");\\n        _setupRole(MODIFIER_ROLE, _vault);\\n        _setupRole(MODIFIER_ROLE, _router);\\n        _setupRole(MODIFIER_ROLE, _nftFactory);\\n    }\\n\\n    function init() external initializer {\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MODIFIER_ROLE, _msgSender());\\n    }\\n\\n    /* RAMVAULT */\\n\\n    // User properties per vault/pool.\\n    struct UserInfo {\\n        uint256 amount; // How many  tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtYGY;\\n        uint256 boostAmount;\\n        uint256 boostLevel;\\n        uint256 spentMultiplierTokens;\\n    }\\n\\n    struct NFTUsage {\\n        uint256 nftId;\\n        uint256 epoch;\\n    }\\n\\n    // Epoch -> User -> NFT ids in use.\\n    mapping(uint256 => mapping(address => NFTUsage[])) public NFTUsageInfo;\\n\\n    function setNFTInUse(uint256 _nftId, address _user) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        NFTUsageInfo[epoch][_user].push(NFTUsage({ nftId: _nftId, epoch: epoch }));\\n    }\\n\\n    function getNFTsInUse(address _user) external view returns (NFTUsage[] memory) {\\n        return NFTUsageInfo[epoch][_user];\\n    }\\n\\n    function getNFTBoost(address _user) external view returns (uint256) {\\n        uint256 NFTBoost;\\n        NFTUsage[] memory nftInfo = NFTUsageInfo[epoch][_user];\\n        for(uint i; i < nftInfo.length; i++) {\\n            if(epoch == nftInfo[i].epoch) {\\n                if(nftInfo[i].nftId == 5 || nftInfo[i].nftId == 6) {\\n                    NFTBoost = NFTBoost.add(10);\\n                }\\n            }\\n        }\\n        return NFTBoost;\\n    }\\n\\n    // Pool/Vault/Whatever-id -> userrAddress -> userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    function updateUserInfo(\\n        uint256 _poolId,\\n        address _userAddress,\\n        UserInfo memory _userInfo\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        userInfo[_poolId][_userAddress] = _userInfo;\\n    }\\n\\n    // PoolId -> UserAddress -> Spender -> Allowance\\n    mapping(uint256 => mapping(address => mapping(address => uint256)))\\n        public poolAllowance;\\n\\n    function setPoolAllowance(\\n        uint256 _pid,\\n        address _user,\\n        address _spender,\\n        uint256 _allowance\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolAllowance[_pid][_user][_spender] = _allowance;\\n    }\\n\\n    // Pool properties\\n    struct PoolInfo {\\n        IERC20 token; // Address of  token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. RAMs to distribute per block.\\n        uint256 accRAMPerShare; // Accumulated RAMs per share, times 1e12. See below.\\n        uint256 accYGYPerShare; // Accumulated YGYs per share, times 1e12. See below.\\n        bool withdrawable; // Is this pool withdrawable?\\n        uint256 effectiveAdditionalTokensFromBoosts; // Track the total additional accounting staked tokens from boosts.\\n    }\\n    // All pool properties\\n    PoolInfo[] public poolInfo;\\n\\n    function updatePoolInfo(uint256 _poolId, PoolInfo memory _userInfo)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolInfo[_poolId] = _userInfo;\\n    }\\n\\n    function setPool(\\n        uint256 _poolId,\\n        uint256 _allocPoint,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        totalAllocPoint.sub(poolInfo[_poolId].allocPoint).add(_allocPoint);\\n        poolInfo[_poolId].allocPoint = _allocPoint;\\n        poolInfo[_poolId].withdrawable = _withdrawable;\\n    }\\n\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\n        }\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            YGYStorageV1.PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                accRAMPerShare: 0,\\n                accYGYPerShare: 0,\\n                withdrawable: _withdrawable,\\n                effectiveAdditionalTokensFromBoosts: 0\\n            })\\n        );\\n    }\\n\\n    function updatePoolRewards(uint256 allRewards, uint256 allYGYRewards)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        pendingRewards = pendingRewards.sub(allRewards);\\n        pendingYGYRewards = pendingYGYRewards.sub(allYGYRewards);\\n    }\\n\\n    function addPendingRewards(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n        pendingRewards = pendingRewards.add(_amount);\\n        rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n\\n        if (YGYReserve > _amount) {\\n            pendingYGYRewards = pendingYGYRewards.add(_amount);\\n            YGYReserve = YGYReserve.sub(_amount);\\n        } else if (YGYReserve > 0) {\\n            pendingYGYRewards = pendingYGYRewards.add(YGYReserve);\\n            YGYReserve = 0;\\n        }\\n    }\\n\\n    function addAdditionalRewards(uint256 _amount, bool _ygy) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_ygy) {\\n            YGYReserve = YGYReserve.add(_amount);\\n        } else {\\n            pendingRewards = pendingRewards.add(_amount);\\n            rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n        }\\n    }\\n\\n    function getPoolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolInfo(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            IERC20 _token,\\n            uint256 _allocPointt,\\n            uint256 _accRAMPerShare,\\n            uint256 _accYGYPerShare,\\n            bool _withdrawable,\\n            uint256 _effectiveAdditionalTokensFromBoosts\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_poolId];\\n        return (\\n            pool.token,\\n            pool.allocPoint,\\n            pool.accRAMPerShare,\\n            pool.accYGYPerShare,\\n            pool.withdrawable,\\n            pool.effectiveAdditionalTokensFromBoosts\\n        );\\n    }\\n\\n    // Total allocattion points for the whole contract\\n    uint256 public totalAllocPoint;\\n\\n    // Pending rewards.\\n    uint256 public pendingRewards;\\n    uint256 public pendingYGYRewards;\\n\\n    // Extra balance-keeping for extra-token rewards\\n    uint256 public YGYReserve;\\n\\n    function setYGYReserve(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        YGYReserve = _amount;\\n    }\\n\\n    // Reward token balance-keeping\\n    uint256 internal ramBalance;\\n\\n    function setRAMBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ramBalance = _amount;\\n    }\\n\\n    uint256 internal ygyBalance;\\n\\n    function setYGYBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ygyBalance = _amount;\\n    }\\n\\n    uint256 public RAMVaultStartBlock;\\n\\n    function setRAMVaultStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        RAMVaultStartBlock = block.number;\\n    }\\n\\n    uint256 public epochCalculationStartBlock;\\n\\n    function setEpochCalculationStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochCalculationStartBlock = block.number;\\n    }\\n\\n    uint256 public cumulativeRewardsSinceStart;\\n    uint256 public cumulativeYGYRewardsSinceStart;\\n\\n    function setCumulativeRewardsSinceStart() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        cumulativeRewardsSinceStart =\\n            cumulativeRewardsSinceStart +\\n            rewardsInThisEpoch;\\n\\n        cumulativeYGYRewardsSinceStart =\\n            cumulativeYGYRewardsSinceStart +\\n            rewardsInThisEpoch;\\n    }\\n\\n    uint256 public rewardsInThisEpoch;\\n\\n    function setRewardsInThisEpoch(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        rewardsInThisEpoch = _amount;\\n    }\\n\\n    uint256 public epoch;\\n\\n    // TOKENS\\n    INBUNIERC20 public ram; // The RAM token\\n    IERC20 public ygy; // The YGY token\\n    address public _YGYRAMPair;\\n    address public _YGYToken;\\n    address public _YGYWETHPair;\\n    address public _RAMToken;\\n    IWETH public _WETH;\\n    IERC20 public _dXIOTToken;\\n\\n    function initializeRAMVault() external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        RAMVaultStartBlock = block.number;\\n\\n        boostLevelCosts[1] = 5 * 1e18; // 5 RAM tokens\\n        boostLevelCosts[2] = 15 * 1e18; // 15 RAM tokens\\n        boostLevelCosts[3] = 30 * 1e18; // 30 RAM tokens\\n        boostLevelCosts[4] = 60 * 1e18; // 60 RAM tokens\\n        boostLevelMultipliers[1] = 5; // 5%\\n        boostLevelMultipliers[2] = 15; // 15%\\n        boostLevelMultipliers[3] = 30; // 30%\\n        boostLevelMultipliers[4] = 60; // 60%\\n    }\\n\\n    function setTokens(\\n        address RAMToken,\\n        address YGYToken,\\n        address WETH,\\n        address YGYRAMPair,\\n        address YGYWethPair,\\n        address[] memory nfts,\\n        address dXIOTToken\\n    ) external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        ram = INBUNIERC20(RAMToken);\\n        ygy = IERC20(YGYToken);\\n        _RAMToken = RAMToken;\\n        _YGYToken = YGYToken;\\n        _WETH = IWETH(WETH);\\n        _YGYRAMPair = YGYRAMPair;\\n        _YGYWETHPair = YGYWethPair;\\n        _dXIOTToken = IERC20(dXIOTToken);\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            _NFTs[i + 1] = nfts[i];\\n        }\\n    }\\n\\n    // Boosts\\n    uint256 public boostFees;\\n\\n    function setBoostFees(uint256 _amount, bool _add) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_add) {\\n            boostFees = boostFees.add(_amount);\\n        } else {\\n            boostFees = _amount;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelCosts;\\n\\n    function checkRewards(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pendingRAM, uint256 pendingYGY)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 effectiveAmount = user.amount.add(user.boostAmount);\\n        uint256 YGYRewards;\\n        if (pool.accYGYPerShare > 0) {\\n            YGYRewards = effectiveAmount.mul(pool.accYGYPerShare).div(1e12).sub(\\n                user.rewardDebtYGY\\n            );\\n        }\\n        return (\\n            effectiveAmount.mul(pool.accRAMPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            ),\\n            YGYRewards\\n        );\\n    }\\n\\n    function getBoostLevelCost(uint256 _level) external view returns (uint256) {\\n        return boostLevelCosts[_level];\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelMultipliers;\\n\\n    function getBoostLevelMultiplier(uint256 _level)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return boostLevelMultipliers[_level];\\n    }\\n\\n    function updateBoosts(\\n        uint256[] memory _boostMultipliers,\\n        uint256[] memory _boostCosts\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        // Update boost costs\\n        for (uint8 i; i <= _boostMultipliers.length; i++) {\\n            boostLevelCosts[i + 1] = _boostCosts[i];\\n            boostLevelMultipliers[i + 1] = _boostMultipliers[i];\\n        }\\n    }\\n\\n    // For easy graphing historical epoch rewards\\n    mapping(uint256 => uint256) public epochRewards;\\n\\n    function setEpochRewards() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochRewards[epoch] = rewardsInThisEpoch;\\n        epoch++;\\n    }\\n\\n    /*\\n         ROUTER\\n    */\\n\\n    // Mapping of (user => last ticket level)\\n    mapping(address => uint256) public lastTicketLevel;\\n\\n    // Setter for contracts using\\n    function setLastTicketLevel(address _user, uint256 _level) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        lastTicketLevel[_user] = _level;\\n    }\\n\\n    // Total eth contributed to a vault.\\n    mapping(address => uint256) public liquidityContributedEthValue;\\n\\n    // Set value for mapping from external contracts\\n    function setLiquidityContributedEthValue(\\n        address _spender,\\n        uint256 _amount,\\n        bool _delete\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_delete) {\\n            delete liquidityContributedEthValue[_spender];\\n        } else {\\n            liquidityContributedEthValue[_spender] = liquidityContributedEthValue[_spender]\\n                .add(_amount);\\n        }\\n    }\\n\\n    // NFT STUFF\\n    // Mapping of (level number => NFT address)\\n    mapping(uint256 => address) public _NFTs;\\n\\n    // Property object, extra field for arbirtrary values in future\\n    struct NFTProperty {\\n        string pType;\\n        uint256 pValue;\\n        bytes32 extra;\\n    }\\n\\n    mapping(address => NFTProperty[]) public nftPropertyChoices;\\n\\n    function setNFTPropertiesForContract(\\n        address _contractAddress,\\n        NFTProperty[] memory _properties\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 i; i < _properties.length; i++) {\\n            nftPropertyChoices[_contractAddress].push(_properties[i]);\\n        }\\n    }\\n\\n    function getNFTAddress(uint256 _contractId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _NFTs[_contractId];\\n    }\\n\\n    function getNFTProperty(uint256 _contractId, uint256 _index)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            bytes32\\n        )\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty memory properties = nftPropertyChoices[NFTAddress][_index];\\n\\n        return (properties.pType, properties.pValue, properties.extra);\\n    }\\n\\n    function getNFTPropertyCount(uint256 _contractId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty[] memory properties = nftPropertyChoices[NFTAddress];\\n        return properties.length;\\n    }\\n\\n    // General-purpose mappings\\n    mapping(bytes32 => mapping(address => bool)) booleanMapStorage;\\n    uint256[] public booleanMapStorageCount;\\n\\n    function getBooleanMapValue(string memory _key, address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        booleanMapStorage[key][_address];\\n    }\\n\\n    mapping(bytes32 => address) addressStorage;\\n    uint256[] public addressStorageCount;\\n\\n    function getAddressStorage(string memory _key)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        return addressStorage[key];\\n    }\\n\\n    mapping(bytes32 => uint256) uintStorage;\\n    uint256[] public uintStorageCount;\\n\\n    struct StateStruct {\\n        bytes32 name;\\n        mapping(bytes32 => bytes32) value;\\n    }\\n\\n    struct ObjectStruct {\\n        StateStruct state;\\n        address owner;\\n        bool isObject;\\n    }\\n\\n    function stringToBytes32(string memory source)\\n        public\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x951765694fe17f3543dd39c4de9d5ddb895f0591d6941104c198fdc9d7836a09\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x619bd81a10e36a619af89fde8021756c06c246f3b9892d77e820e638f2259de9\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdb4db030965e88489f4aaa2ca49856e2c35428aa268e3b6d7aaeb4419be091c1\"},\"contracts/interfaces/IFeeApprover.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeApprover {\\n\\n    function check(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function setFeeMultiplier(uint _feeMultiplier) external;\\n    function feePercentX100() external view returns (uint);\\n\\n    function setTokenUniswapPair(address _tokenUniswapPair) external;\\n\\n    function setRamTokenAddress(address _ramTokenAddress) external;\\n    function setYgyTokenAddress(address _ygyTokenAddress) external;\\n    function sync() external returns (bool lastIsMint, bool lpTokenBurn);\\n    function calculateAmountsAfterFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external  returns (uint256 transferToAmount, uint256 transferToFeeBearerAmount);\\n\\n    function setPaused() external;\\n\\n\\n}\\n\",\"keccak256\":\"0x58417c1a6a93101e4e0abc0ba259345194862d3e643f317cb148c98bb1007501\",\"license\":\"MIT\"},\"contracts/interfaces/INBUNIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INBUNIERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Log(string log);\\n}\\n\",\"keccak256\":\"0x8b72d4c7a32eb1cd9c2ef9f1e02101dda1f85e396d51ed3c6c99bfa6a271ea4f\",\"license\":\"MIT\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\ninterface INFT {\\n    function mint(\\n        address _to,\\n        uint256 _randomness,\\n        YGYStorageV1 _storage\\n    ) external returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function _tokenURI() external view returns (string memory);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x9939c53220f3708dd48f7b92dc5e80b161e9e437876e0f71c1604acc62e1e1cd\",\"license\":\"MIT\"},\"contracts/interfaces/INFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../NFT.sol\\\";\\nimport \\\"./INFT.sol\\\";\\n\\ninterface INFTFactory {\\n    function deployNFT(\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) external returns (NFT newContract);\\n\\n    function mint(\\n        INFT _nft,\\n        address recipient,\\n        uint256 _randomness\\n    ) external;\\n\\n    function bondContract(address addr) external returns (bool);\\n\\n    function balanceOf(INFT _nft, address _of) external returns (uint256);\\n\\n    function burn(INFT _nft, uint256 _tokenId) external;\\n}\\n\",\"keccak256\":\"0x90838304ea3d31af5a03cd9d6b046cfbc94d83ae98dc1d16a4891699bc9253cb\",\"license\":\"MIT\"},\"contracts/interfaces/IRAMVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IRAMVault {\\n    function addPendingRewards(uint256 _amount) external;\\n\\n    function depositFor(\\n        address _depositFor,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function NFTUsage(\\n        address _user,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _poolId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3b3bf969747a03faf09778e443050290cf1d727037ab800c7368997edc7bafa7\",\"license\":\"MIT\"},\"contracts/libraries/AddressERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressERC721 {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac84a8ed965d4532086e3615fd51c912f4af0e4388e18cbc1bfbf440a9061a09\",\"license\":\"MIT\"},\"contracts/libraries/PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\nlibrary PoolHelper {\\n    using SafeMath for uint256;\\n\\n    function getPool(uint256 _poolId, YGYStorageV1 _storage)\\n        internal\\n        view\\n        returns (YGYStorageV1.PoolInfo memory)\\n    {\\n        (\\n            IERC20 token,\\n            uint256 allocPoint,\\n            uint256 accRAMPerShare,\\n            uint256 accYGYPerShare,\\n            bool withdrawable,\\n            uint256 effectiveAdditionalTokensFromBoosts\\n        ) = _storage.poolInfo(_poolId);\\n        return\\n            YGYStorageV1.PoolInfo({\\n                token: token,\\n                allocPoint: allocPoint,\\n                accRAMPerShare: accRAMPerShare,\\n                accYGYPerShare: accYGYPerShare,\\n                withdrawable: withdrawable,\\n                effectiveAdditionalTokensFromBoosts: effectiveAdditionalTokensFromBoosts\\n            });\\n    }\\n\\n    function averageFeesPerBlockSinceStart(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage\\n                .cumulativeRewardsSinceStart()\\n                .add(_storage.rewardsInThisEpoch())\\n                .div(block.number.sub(_storage.RAMVaultStartBlock()));\\n    }\\n\\n    // Returns averge fees in this epoch\\n    function averageFeesPerBlockEpoch(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage.rewardsInThisEpoch().div(\\n                block.number.sub(_storage.epochCalculationStartBlock())\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfe19d645ce5e4eb55491fb350095796a1fdbd938aeb3c6f73d2c28988e2d5f61\",\"license\":\"UNLICENSED\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2b2dfdece146425af2c3468ccd72c52cbf709eb38421a300e21ef7f57b033fce\"},\"contracts/uniswapv2/libraries/Math.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ff9437d7b69f347923a9b87279db83f634e790ff4e54c2e47e0a115a3d487ba\"},\"contracts/uniswapv2/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            IUniswapV2Factory(factory).getPair(tokenA, tokenB)\\n        )\\n            .getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05ea3142fe690088a2525bef6c9461eb0f69d094f18a40ae07b161d0ab7021e0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd3f9eb69241af8de5174a6cfa3da3cbc94e351dee495002d8675b665865ba417\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200450c3803806200450c833981016040819052620000349162000365565b6001600160601b0319606082811b821660a05283901b1660805262000058620000fe565b5050609a80546001600160a01b03199081166001600160a01b0398891617909155609880548216968816969096179095556099805486169487169490941790935560a9805485169286169290921790915560008054841692851692909217909155609c805490921692169190911790557f6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f460a05567016345785d8a0000609f5562000489565b600054600160a81b900460ff16806200011c57506200011c620001be565b80620001325750600054600160a01b900460ff16155b6200015a5760405162461bcd60e51b8152600401620001519062000425565b60405180910390fd5b600054600160a81b900460ff1615801562000192576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6200019c620001c4565b620001a662000265565b8015620001bb576000805460ff60a81b191690555b50565b303b1590565b600054600160a81b900460ff1680620001e25750620001e2620001be565b80620001f85750600054600160a01b900460ff16155b620002175760405162461bcd60e51b8152600401620001519062000425565b600054600160a81b900460ff16158015620001a6576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790558015620001bb576000805460ff60a81b1916905550565b600054600160a81b900460ff168062000283575062000283620001be565b80620002995750600054600160a01b900460ff16155b620002b85760405162461bcd60e51b8152600401620001519062000425565b600054600160a81b900460ff16158015620002f0576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6000620002fc62000361565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015620001bb576000805460ff60a81b1916905550565b3390565b600080600080600080600080610100898b03121562000382578384fd5b88516200038f8162000473565b60208a0151909850620003a28162000473565b60408a0151909750620003b58162000473565b60608a0151909650620003c88162000473565b60808a0151909550620003db8162000473565b60a08a0151909450620003ee8162000473565b60c08a0151909350620004018162000473565b60e08a0151909250620004148162000473565b809150509295985092959890939650565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6001600160a01b0381168114620001bb57600080fd5b60805160601c60a05160601c61404a620004c26000398061125352806121b9525080610c1a5280611541528061218a525061404a6000f3fe60806040526004361061025c5760003560e01c8063ab033ea911610144578063d49d5181116100b6578063f2fde38b1161007a578063f2fde38b14610644578063f4ab1a9314610664578063f7db38cb14610679578063fa69669c1461068e578063faf5db8e146106a3578063fff6cae9146106b85761025c565b8063d49d5181146105d0578063e0614322146105e5578063e0af3616146105fa578063e7fa67e51461060f578063eced55261461062f5761025c565b8063b93b4bb711610108578063b93b4bb71461053c578063bf33a1f51461055c578063cb5b332e14610571578063cde7bc7014610591578063ce665dd8146105a6578063cfbd900f146105bb5761025c565b8063ab033ea9146104b4578063adf5e1b1146104d4578063b082cc26146104e7578063b37217a414610507578063b81a0b4c146105275761025c565b806342619f66116101dd578063571c2b4d116101a1578063571c2b4d146104205780635aa6e67514610435578063715018a61461044a5780638da5cb5b1461045f57806394985ddd146104745780639e317f12146104945761025c565b806342619f661461038f5780634601723a146103a457806350b44712146103c457806353b77f52146103f6578063559ed3391461040b5761025c565b80632f4f8a7a116102245780632f4f8a7a146103105780633023af2d1461032557806330e588ac1461033a5780633b24bd4a1461035a5780633cb0b92d1461036f5761025c565b80630c57af6c1461027b5780630eb1f9081461028e57806313d4829b146102b957806322d5b25c146102d957806329e015ba146102fb575b60a5546001600160a01b03163314610279576102793360006106cd565b005b61027961028936600461382d565b6106cd565b34801561029a57600080fd5b506102a36109de565b6040516102b09190613ac0565b60405180910390f35b3480156102c557600080fd5b506102a36102d43660046138af565b6109e4565b3480156102e557600080fd5b506102ee610b5f565b6040516102b091906139d1565b34801561030757600080fd5b506102ee610b6e565b34801561031c57600080fd5b506102ee610b7d565b34801561033157600080fd5b506102ee610b8c565b34801561034657600080fd5b506102796103553660046138af565b610b9b565b34801561036657600080fd5b506102ee610bca565b34801561037b57600080fd5b506102a361038a3660046138af565b610bd9565b34801561039b57600080fd5b506102a3610ceb565b3480156103b057600080fd5b506102796103bf3660046137f5565b610cf1565b3480156103d057600080fd5b506103e46103df3660046138af565b610d77565b6040516102b096959493929190613a8d565b34801561040257600080fd5b50610279610db6565b34801561041757600080fd5b50610279610de4565b34801561042c57600080fd5b506102ee61119c565b34801561044157600080fd5b506102ee6111ab565b34801561045657600080fd5b506102796111ba565b34801561046b57600080fd5b506102ee611239565b34801561048057600080fd5b5061027961048f3660046138c7565b611248565b3480156104a057600080fd5b506102a36104af3660046138af565b61129e565b3480156104c057600080fd5b506102796104cf3660046137f5565b6112b0565b6102796104e2366004613954565b611310565b3480156104f357600080fd5b506102796105023660046137f5565b6114e3565b34801561051357600080fd5b506102a36105223660046138af565b61153a565b34801561053357600080fd5b506102ee611608565b34801561054857600080fd5b506102a36105573660046137f5565b611617565b34801561056857600080fd5b506102796117ef565b34801561057d57600080fd5b5061027961058c3660046138af565b61187c565b34801561059d57600080fd5b506102ee6118b6565b3480156105b257600080fd5b506102a36118c5565b3480156105c757600080fd5b506102a36118ca565b3480156105dc57600080fd5b506102a36118d0565b3480156105f157600080fd5b506102ee6118d6565b34801561060657600080fd5b506102ee6118e5565b34801561061b57600080fd5b5061027961062a3660046138af565b6118f4565b34801561063b57600080fd5b506102a361192e565b34801561065057600080fd5b5061027961065f3660046137f5565b611933565b34801561067057600080fd5b506102a36119ea565b34801561068557600080fd5b506102ee611a0e565b34801561069a57600080fd5b506102ee611a1d565b3480156106af57600080fd5b506102a3611a2c565b3480156106c457600080fd5b50610279611a32565b6001600160a01b0382166106fc5760405162461bcd60e51b81526004016106f390613b51565b60405180910390fd5b348061071a5760405162461bcd60e51b81526004016106f390613ee4565b60a560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050505060008061078e611ab1565b91509150600061079f848484611b9d565b60a55460a35460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb926107d79216908890600401613a2a565b602060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190613865565b5060008054604051633834374960e11b81526001600160a01b03909116916370686e929161085e918a91899190600401613a43565b600060405180830381600087803b15801561087857600080fd5b505af115801561088c573d6000803e3d6000fd5b505060a55460a254600093508392506108b1916001600160a01b039081169116611c37565b60a35460a2549294509092506001600160a01b039081169163022c0d9f918086169116146108e05760006108e2565b845b60a2546001600160a01b038581169116146108fe576000610900565b855b306040518463ffffffff1660e01b815260040161091f93929190613fae565b600060405180830381600087803b15801561093957600080fd5b505af115801561094d573d6000803e3d6000fd5b505050506000610973606461096d609d5487611cc190919063ffffffff16565b90611d04565b609c546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156109ae573d6000803e3d6000fd5b5060006109bb8583611d46565b90506109d26109cb826002611d04565b8b8b611d88565b50505050505050505050565b609f5481565b60008060006109f1612050565b90925090506000610a0d610a06866002611d04565b8484611b9d565b9050600060a160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5f57600080fd5b505afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a97919061393c565b60a25460a454919250600091610ab9916001600160a01b039081169116611c37565b5060a45490915060009081906001600160a01b03808516911614610ae857610ae2896002611d04565b85610af4565b84610af48a6002611d04565b60a454919350915060009081906001600160a01b03868116911614610b1a578888610b1d565b87895b9092509050610b5082610b308689611cc1565b81610b3757fe5b0482610b43868a611cc1565b81610b4a57fe5b0461212d565b9b9a5050505050505050505050565b6098546001600160a01b031681565b6099546001600160a01b031681565b60a1546001600160a01b031681565b609a546001600160a01b031681565b609b546001600160a01b03163314610bc55760405162461bcd60e51b81526004016106f390613c20565b609d55565b60a3546001600160a01b031681565b6000610c00604051806040016040528060048152602001636865726560e01b815250612143565b609f546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610c529133913091906004016139e5565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190613865565b610cc05760405162461bcd60e51b81526004016106f390613e69565b60aa80546001600160a01b0319163317905560a054609f54610ce3919084612186565b90505b919050565b609e5481565b610cf96122c9565b6065546001600160a01b03908116911614610d265760405162461bcd60e51b81526004016106f390613db8565b609880546001600160a01b038381166001600160a01b03198316811790935560405191169182917f9e4368dbddb338dc373020f18730584d6e9aaacad2101be6bd6d0a21fe59ffbc90600090a35050565b60a8602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909186565b609e54610dd55760405162461bcd60e51b81526004016106f390613b1a565b610ddd6122cd565b6000609e55565b610dec6122c9565b6065546001600160a01b03908116911614610e195760405162461bcd60e51b81526004016106f390613db8565b60008054906101000a90046001600160a01b03166001600160a01b0316632f4f8a7a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190613811565b60a180546001600160a01b0319166001600160a01b039283161790556000546040805163f7db38cb60e01b81529051919092169163f7db38cb916004808301926020929190829003018186803b158015610ef657600080fd5b505afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2e9190613811565b60a280546001600160a01b0319166001600160a01b0392831617905560005460408051631d925ea560e11b815290519190921691633b24bd4a916004808301926020929190829003018186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf9190613811565b60a380546001600160a01b0319166001600160a01b0392831617905560005460408051633e9a59a760e21b81529051919092169163fa69669c916004808301926020929190829003018186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190613811565b60a480546001600160a01b0319166001600160a01b03928316179055600054604080516370579b0b60e11b81529051919092169163e0af3616916004808301926020929190829003018186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190613811565b60a580546001600160a01b0319166001600160a01b0392831617905560005460408051632e0682d360e21b81529051919092169163b81a0b4c916004808301926020929190829003018186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190613811565b60a680546001600160a01b0319166001600160a01b039290921691909117905561119a6117ef565b565b609c546001600160a01b031681565b609b546001600160a01b031681565b6111c26122c9565b6065546001600160a01b039081169116146111ef5760405162461bcd60e51b81526004016106f390613db8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112905760405162461bcd60e51b81526004016106f390613ded565b61129a8282612921565b5050565b60976020526000908152604090205481565b609a54600160a01b900460ff16156112da5760405162461bcd60e51b81526004016106f390613f66565b609a805460ff60a01b1916600160a01b179055609b80546001600160a01b039092166001600160a01b0319909216919091179055565b600082116113305760405162461bcd60e51b81526004016106f390613be9565b60a2546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611364903390309087906004016139e5565b602060405180830381600087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b69190613865565b6113d25760405162461bcd60e51b81526004016106f390613d12565b6000806113dd611ab1565b9150915060006113ee858385611b9d565b9050600061140c606461096d609d5489611cc190919063ffffffff16565b609c546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611447573d6000803e3d6000fd5b5060008054604051633834374960e11b81526001600160a01b03909116916370686e929161147c913391879190600401613a43565b600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b5050505060006114c38288611d4690919063ffffffff16565b90506114da6114d3826002611d04565b3388611d88565b50505050505050565b6114eb6122c9565b6065546001600160a01b039081169116146115185760405162461bcd60e51b81526004016106f390613db8565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6000609f547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161158b91906139d1565b60206040518083038186803b1580156115a357600080fd5b505afa1580156115b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115db919061393c565b10156115f95760405162461bcd60e51b81526004016106f390613d40565b610ce360a054609f5484612186565b60a6546001600160a01b031681565b6000805460405163568a0a5960e11b815282916001600160a01b03169063ad1414b2906116489086906004016139d1565b60206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611698919061393c565b9050670de0b6b3a76400008110156116b4576000915050610ce6565b670de0b6b3a764000081101580156116d35750674563918244f4000081105b156116e2576001915050610ce6565b674563918244f4000081101580156117015750678ac7230489e8000081105b15611710576002915050610ce6565b678ac7230489e80000811015801561173057506801158e460913d0000081105b1561173f576003915050610ce6565b6801158e460913d00000811015801561176057506801a055690d9db8000081105b1561176f576004915050610ce6565b6801a055690d9db800008110158015611790575068022b1c8c1227a0000081105b1561179f576005915050610ce6565b68022b1c8c1227a0000081101580156117c057506802b5e3af16b188000081105b156117cf576006915050610ce6565b6802b5e3af16b188000081106117e9576007915050610ce6565b50919050565b60a15460995460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926118279291169060001990600401613a2a565b602060405180830381600087803b15801561184157600080fd5b505af1158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118799190613865565b50565b6118846122c9565b6065546001600160a01b039081169116146118b15760405162461bcd60e51b81526004016106f390613db8565b609f55565b60a9546001600160a01b031681565b600181565b60a75481565b60001981565b60aa546001600160a01b031681565b60a5546001600160a01b031681565b6118fc6122c9565b6065546001600160a01b039081169116146119295760405162461bcd60e51b81526004016106f390613db8565b60a055565b606481565b61193b6122c9565b6065546001600160a01b039081169116146119685760405162461bcd60e51b81526004016106f390613db8565b6001600160a01b03811661198e5760405162461bcd60e51b81526004016106f390613b7a565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b7f028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f81565b60a2546001600160a01b031681565b60a4546001600160a01b031681565b609d5481565b6098546040805160016209351760e01b0319815281516001600160a01b039093169263fff6cae9926004808401939192918290030181600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190613881565b60a55460a25460009182918291611ad4916001600160a01b039182169116611c37565b50905060008060a360009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6091906138e8565b5060a2546001600160701b039283169450911691506001600160a01b03848116911614611b8e578181611b91565b80825b90969095509350505050565b6000808411611bbe5760405162461bcd60e51b81526004016106f390613f1b565b600083118015611bce5750600082115b611bea5760405162461bcd60e51b81526004016106f390613cca565b6000611bf8856103e5611cc1565b90506000611c068285611cc1565b90506000611c2083611c1a886103e8611cc1565b90612ab9565b9050808281611c2b57fe5b04979650505050505050565b600080826001600160a01b0316846001600160a01b03161415611c6c5760405162461bcd60e51b81526004016106f390613c85565b826001600160a01b0316846001600160a01b031610611c8c578284611c8f565b83835b90925090506001600160a01b038216611cba5760405162461bcd60e51b81526004016106f390613ead565b9250929050565b600082611cd057506000611cfe565b82820282848281611cdd57fe5b0414611cfb5760405162461bcd60e51b81526004016106f390613d77565b90505b92915050565b6000611cfb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612ade565b6000611cfb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b15565b600080611d93612050565b915091506000611da4868484611b9d565b60a25460a15460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611ddc9216908a90600401613a2a565b602060405180830381600087803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e9190613865565b611e4a5760405162461bcd60e51b81526004016106f390613bc0565b60a25460a4546000918291611e6b916001600160a01b039081169116611c37565b60a15460a4549294509092506001600160a01b039081169163022c0d9f91808616911614611e9a576000611e9c565b845b60a4546001600160a01b03858116911614611eb8576000611eba565b855b306040518463ffffffff1660e01b8152600401611ed993929190613fae565b600060405180830381600087803b158015611ef357600080fd5b505af1158015611f07573d6000803e3d6000fd5b50505050611f1783898989612b41565b60a6546040516370a0823160e01b8152670de0b6b3a7640000916001600160a01b0316906370a0823190611f4f9030906004016139d1565b60206040518083038186803b158015611f6757600080fd5b505afa158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f919061393c565b11156120355760a6546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611fe19030908b90670de0b6b3a7640000906004016139e5565b602060405180830381600087803b158015611ffb57600080fd5b505af115801561200f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120339190613865565b505b61203e87612fc4565b612046611a32565b5050505050505050565b60a25460a45460009182918291612073916001600160a01b039182169116611c37565b50905060008060a160009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156120c757600080fd5b505afa1580156120db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ff91906138e8565b5060a4546001600160701b039283169450911691506001600160a01b03848116911614611b8e578181611b91565b600081831061213c5781611cfb565b5090919050565b611879816040516024016121579190613b07565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613429565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008587866040516020016121ec9291906139c3565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161221993929190613a66565b602060405180830381600087803b15801561223357600080fd5b505af1158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b9190613865565b5060008481526097602052604081205461228a9086908590309061344a565b6000868152609760205260409020549091506122a7906001612ab9565b6000868152609760205260409020556122c08582613484565b95945050505050565b3390565b60005b60a754811015612914576122e26137b6565b50600081815260a86020908152604091829020825160c08101845281546001600160a01b03168152600182015492810183905260028201549381019390935260038101546060840152600481015460808401526005015460a0830152609e541161242d5760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061238290600190600401613ac0565b60206040518083038186803b15801561239a57600080fd5b505afa1580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190613811565b8351609e546040516001600160e01b031960e086901b1681526123fa939291906004016139e5565b600060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050505b8060400151609e54116125215760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061247690600290600401613ac0565b60206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c69190613811565b8351609e546040516001600160e01b031960e086901b1681526124ee939291906004016139e5565b600060405180830381600087803b15801561250857600080fd5b505af115801561251c573d6000803e3d6000fd5b505050505b8060600151609e54116126155760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061256a90600390600401613ac0565b60206040518083038186803b15801561258257600080fd5b505afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba9190613811565b8351609e546040516001600160e01b031960e086901b1681526125e2939291906004016139e5565b600060405180830381600087803b1580156125fc57600080fd5b505af1158015612610573d6000803e3d6000fd5b505050505b8060800151609e54116127085760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061265d906004908101613ac0565b60206040518083038186803b15801561267557600080fd5b505afa158015612689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ad9190613811565b8351609e546040516001600160e01b031960e086901b1681526126d5939291906004016139e5565b600060405180830381600087803b1580156126ef57600080fd5b505af1158015612703573d6000803e3d6000fd5b505050505b8060a00151609e54116127fc5760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061275190600590600401613ac0565b60206040518083038186803b15801561276957600080fd5b505afa15801561277d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a19190613811565b8351609e546040516001600160e01b031960e086901b1681526127c9939291906004016139e5565b600060405180830381600087803b1580156127e357600080fd5b505af11580156127f7573d6000803e3d6000fd5b505050505b600080548251604051633834374960e11b81526001600160a01b03909216926370686e9292612832929190600190600401613a43565b600060405180830381600087803b15801561284c57600080fd5b505af1158015612860573d6000803e3d6000fd5b505050600083815260a8602052604080822080546001600160a01b031916815560018101839055600281018390556003810183905560048082018490556005909101839055825485519251631695fb2f60e31b81526001600160a01b03909116945063b4afd978936128d59392909101613a2a565b600060405180830381600087803b1580156128ef57600080fd5b505af1158015612903573d6000803e3d6000fd5b5050600190930192506122d0915050565b506000609e81905560a755565b61292a816134b7565b609e556000805460405163795d79f560e01b81526001600160a01b039091169063795d79f59061295f90600790600401613ac0565b60206040518083038186803b15801561297757600080fd5b505afa15801561298b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129af9190613811565b60aa546040516370a0823160e01b81529192506001600160a01b03808416926370a08231926129e29216906004016139d1565b60206040518083038186803b1580156129fa57600080fd5b505afa158015612a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a32919061393c565b612aa45760a95460aa54609e54604051636361ddf360e11b81526001600160a01b039384169363c6c3bbe693612a7193879392909116916004016139e5565b600060405180830381600087803b158015612a8b57600080fd5b505af1158015612a9f573d6000803e3d6000fd5b505050505b505060aa80546001600160a01b031916905550565b600082820183811015611cfb5760405162461bcd60e51b81526004016106f390613c4e565b60008183612aff5760405162461bcd60e51b81526004016106f39190613b07565b506000838581612b0b57fe5b0495945050505050565b60008184841115612b395760405162461bcd60e51b81526004016106f39190613b07565b505050900390565b600080612b4c612050565b915091506000612b5d8684846134c3565b9050600087821115612b7e57612b748884866134c3565b9050879150612b81565b50855b60a25460a15460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612bb7929116908590600401613a2a565b602060405180830381600087803b158015612bd157600080fd5b505af1158015612be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c099190613865565b612c0f57fe5b60a45460a15460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612c45929116908690600401613a2a565b602060405180830381600087803b158015612c5f57600080fd5b505af1158015612c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c979190613865565b612c9d57fe5b8415612e0d5760a1546040516335313c2160e11b81526001600160a01b0390911690636a62784290612cd39030906004016139d1565b602060405180830381600087803b158015612ced57600080fd5b505af1158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d25919061393c565b5060995460a1546040516370a0823160e01b81526001600160a01b0392831692634cf5fbf5928a92600092909116906370a0823190612d689030906004016139d1565b60206040518083038186803b158015612d8057600080fd5b505afa158015612d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db8919061393c565b6040518463ffffffff1660e01b8152600401612dd693929190613a09565b600060405180830381600087803b158015612df057600080fd5b505af1158015612e04573d6000803e3d6000fd5b50505050612e91565b60a1546040516335313c2160e11b81526001600160a01b0390911690636a62784290612e3d9089906004016139d1565b602060405180830381600087803b158015612e5757600080fd5b505af1158015612e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8f919061393c565b505b81881115612f265760a4546001600160a01b031663a9059cbb87612eb58b86611d46565b6040518363ffffffff1660e01b8152600401612ed2929190613a2a565b602060405180830381600087803b158015612eec57600080fd5b505af1158015612f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f249190613865565b505b808711156120465760a2546001600160a01b031663a9059cbb87612f4a8a85611d46565b6040518363ffffffff1660e01b8152600401612f67929190613a2a565b602060405180830381600087803b158015612f8157600080fd5b505af1158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb99190613865565b505050505050505050565b600080546040516333103d9960e21b81526001600160a01b039091169063cc40f66490612ff59085906004016139d1565b60206040518083038186803b15801561300d57600080fd5b505afa158015613021573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613045919061393c565b9050600061305283611617565b9050815b818110156133b7576130666137b6565b816130ad576040518060c00160405280866001600160a01b03168152602001603281526020016000815260200160008152602001600081526020016000815250905061332f565b81600114156130f8576040518060c00160405280866001600160a01b03168152602001604b81526020016032815260200160008152602001600081526020016000815250905061332f565b8160021415613143576040518060c00160405280866001600160a01b0316815260200160648152602001604b815260200160328152602001600081526020016000815250905061332f565b816003141561318e576040518060c00160405280866001600160a01b031681526020016064815260200160648152602001604b8152602001603281526020016000815250905061332f565b81600414156131d9576040518060c00160405280866001600160a01b03168152602001606481526020016064815260200160648152602001604b81526020016032815250905061332f565b8160051415613224576040518060c00160405280866001600160a01b03168152602001606481526020016064815260200160648152602001606481526020016032815250905061332f565b816006141561332f5760a7600081548092919060010191905055506040518060c00160405280866001600160a01b0316815260200160648152602001606481526020016064815260200160648152602001606481525060a8600060a754815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050506040518060c00160405280866001600160a01b0316815260200160648152602001606481526020016064815260200160648152602001600081525090505b80516001600160a01b0316156133ae5760a78054600190810191829055600091825260a86020908152604092839020845181546001600160a01b0319166001600160a01b039091161781559084015191810191909155908201516002820155606082015160038201556080820151600482015560a08201516005909101555b50600101613056565b50600381106133c9576133c98361352b565b600054604051631695fb2f60e31b81526001600160a01b039091169063b4afd978906133fb9086908590600401613a2a565b600060405180830381600087803b15801561341557600080fd5b505af11580156114da573d6000803e3d6000fd5b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000848484846040516020016134639493929190613ac9565b60408051601f19818403018152919052805160209091012095945050505050565b600082826040516020016134999291906139c3565b60405160208183030381529060405280519060200120905092915050565b60649081028190040690565b60008084116134e45760405162461bcd60e51b81526004016106f390613e24565b6000831180156134f45750600082115b6135105760405162461bcd60e51b81526004016106f390613cca565b8261351b8584611cc1565b8161352257fe5b04949350505050565b6000805460405163795d79f560e01b81526001600160a01b039091169063795d79f59061355d90600690600401613ac0565b60206040518083038186803b15801561357557600080fd5b505afa158015613589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ad9190613811565b60a6546040516370a0823160e01b81529192506801158e460913d00000916001600160a01b03909116906370a08231906135eb9086906004016139d1565b60206040518083038186803b15801561360357600080fd5b505afa158015613617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363b919061393c565b101580156136ca575060a954604051633de222bb60e21b81526001600160a01b039091169063f7888aec906136769084908690600401613aed565b602060405180830381600087803b15801561369057600080fd5b505af11580156136a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c8919061393c565b155b801561374657506032816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561370c57600080fd5b505afa158015613720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613744919061393c565b105b1561129a5760a954609e54604051636361ddf360e11b81526001600160a01b039092169163c6c3bbe69161378091859187916004016139e5565b600060405180830381600087803b15801561379a57600080fd5b505af11580156137ae573d6000803e3d6000fd5b505050505050565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215613806578081fd5b8135611cfb81613fdc565b600060208284031215613822578081fd5b8151611cfb81613fdc565b6000806040838503121561383f578081fd5b823561384a81613fdc565b9150602083013561385a81613ff1565b809150509250929050565b600060208284031215613876578081fd5b8151611cfb81613ff1565b60008060408385031215613893578182fd5b825161389e81613ff1565b602084015190925061385a81613ff1565b6000602082840312156138c0578081fd5b5035919050565b600080604083850312156138d9578182fd5b50508035926020909101359150565b6000806000606084860312156138fc578081fd5b835161390781613fff565b602085015190935061391881613fff565b604085015190925063ffffffff81168114613931578182fd5b809150509250925092565b60006020828403121561394d578081fd5b5051919050565b60008060408385031215613966578182fd5b82359150602083013561385a81613ff1565b60008151808452815b8181101561399d57602081850181015186830182015201613981565b818111156139ae5782602083870101525b50601f01601f19169290920160200192915050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b600060018060a01b0385168252836020830152606060408301526122c06060830184613978565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b6001600160a01b0392831681529116602082015260400190565b600060208252611cfb6020830184613978565b6020808252601a908201527f4e6f2072616e646f6d206e756d62657220617661696c61626c65000000000000604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526019908201527f496e73756666696369656e7420746f6b656e20616d6f756e7400000000000000604082015260600190565b6020808252601490820152734c6f636b656420746f20676f7665726e616e636560601b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b602080825260149082015273105c1c1c9bdd99481d1bdad95b9cc8199a5c9cdd60621b604082015260600190565b6020808252601b908201527f4e6f7420656e6f756768204c494e4b206f6e20636f6e74726163740000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416040820152641353d5539560da1b606082015260800190565b60208082526024908201527f4e6f7420656e6f756768204c494e4b20617070726f76656420746f20636f6e746040820152631c9858dd60e21b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526017908201527f496e73756666696369656e742045544820616d6f756e74000000000000000000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526028908201527f476f7665726e616e636520636f6e74726163742068617320616c7265616479206040820152671899595b881cd95d60c21b606082015260800190565b92835260208301919091526001600160a01b0316604082015260806060820181905260009082015260a00190565b6001600160a01b038116811461187957600080fd5b801515811461187957600080fd5b6001600160701b038116811461187957600080fdfea2646970667358221220f92b771f147e6f02011e2c318cf29927e0bb767b3ddf45e9a44eab5b2eb49d2664736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061025c5760003560e01c8063ab033ea911610144578063d49d5181116100b6578063f2fde38b1161007a578063f2fde38b14610644578063f4ab1a9314610664578063f7db38cb14610679578063fa69669c1461068e578063faf5db8e146106a3578063fff6cae9146106b85761025c565b8063d49d5181146105d0578063e0614322146105e5578063e0af3616146105fa578063e7fa67e51461060f578063eced55261461062f5761025c565b8063b93b4bb711610108578063b93b4bb71461053c578063bf33a1f51461055c578063cb5b332e14610571578063cde7bc7014610591578063ce665dd8146105a6578063cfbd900f146105bb5761025c565b8063ab033ea9146104b4578063adf5e1b1146104d4578063b082cc26146104e7578063b37217a414610507578063b81a0b4c146105275761025c565b806342619f66116101dd578063571c2b4d116101a1578063571c2b4d146104205780635aa6e67514610435578063715018a61461044a5780638da5cb5b1461045f57806394985ddd146104745780639e317f12146104945761025c565b806342619f661461038f5780634601723a146103a457806350b44712146103c457806353b77f52146103f6578063559ed3391461040b5761025c565b80632f4f8a7a116102245780632f4f8a7a146103105780633023af2d1461032557806330e588ac1461033a5780633b24bd4a1461035a5780633cb0b92d1461036f5761025c565b80630c57af6c1461027b5780630eb1f9081461028e57806313d4829b146102b957806322d5b25c146102d957806329e015ba146102fb575b60a5546001600160a01b03163314610279576102793360006106cd565b005b61027961028936600461382d565b6106cd565b34801561029a57600080fd5b506102a36109de565b6040516102b09190613ac0565b60405180910390f35b3480156102c557600080fd5b506102a36102d43660046138af565b6109e4565b3480156102e557600080fd5b506102ee610b5f565b6040516102b091906139d1565b34801561030757600080fd5b506102ee610b6e565b34801561031c57600080fd5b506102ee610b7d565b34801561033157600080fd5b506102ee610b8c565b34801561034657600080fd5b506102796103553660046138af565b610b9b565b34801561036657600080fd5b506102ee610bca565b34801561037b57600080fd5b506102a361038a3660046138af565b610bd9565b34801561039b57600080fd5b506102a3610ceb565b3480156103b057600080fd5b506102796103bf3660046137f5565b610cf1565b3480156103d057600080fd5b506103e46103df3660046138af565b610d77565b6040516102b096959493929190613a8d565b34801561040257600080fd5b50610279610db6565b34801561041757600080fd5b50610279610de4565b34801561042c57600080fd5b506102ee61119c565b34801561044157600080fd5b506102ee6111ab565b34801561045657600080fd5b506102796111ba565b34801561046b57600080fd5b506102ee611239565b34801561048057600080fd5b5061027961048f3660046138c7565b611248565b3480156104a057600080fd5b506102a36104af3660046138af565b61129e565b3480156104c057600080fd5b506102796104cf3660046137f5565b6112b0565b6102796104e2366004613954565b611310565b3480156104f357600080fd5b506102796105023660046137f5565b6114e3565b34801561051357600080fd5b506102a36105223660046138af565b61153a565b34801561053357600080fd5b506102ee611608565b34801561054857600080fd5b506102a36105573660046137f5565b611617565b34801561056857600080fd5b506102796117ef565b34801561057d57600080fd5b5061027961058c3660046138af565b61187c565b34801561059d57600080fd5b506102ee6118b6565b3480156105b257600080fd5b506102a36118c5565b3480156105c757600080fd5b506102a36118ca565b3480156105dc57600080fd5b506102a36118d0565b3480156105f157600080fd5b506102ee6118d6565b34801561060657600080fd5b506102ee6118e5565b34801561061b57600080fd5b5061027961062a3660046138af565b6118f4565b34801561063b57600080fd5b506102a361192e565b34801561065057600080fd5b5061027961065f3660046137f5565b611933565b34801561067057600080fd5b506102a36119ea565b34801561068557600080fd5b506102ee611a0e565b34801561069a57600080fd5b506102ee611a1d565b3480156106af57600080fd5b506102a3611a2c565b3480156106c457600080fd5b50610279611a32565b6001600160a01b0382166106fc5760405162461bcd60e51b81526004016106f390613b51565b60405180910390fd5b348061071a5760405162461bcd60e51b81526004016106f390613ee4565b60a560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050505060008061078e611ab1565b91509150600061079f848484611b9d565b60a55460a35460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb926107d79216908890600401613a2a565b602060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190613865565b5060008054604051633834374960e11b81526001600160a01b03909116916370686e929161085e918a91899190600401613a43565b600060405180830381600087803b15801561087857600080fd5b505af115801561088c573d6000803e3d6000fd5b505060a55460a254600093508392506108b1916001600160a01b039081169116611c37565b60a35460a2549294509092506001600160a01b039081169163022c0d9f918086169116146108e05760006108e2565b845b60a2546001600160a01b038581169116146108fe576000610900565b855b306040518463ffffffff1660e01b815260040161091f93929190613fae565b600060405180830381600087803b15801561093957600080fd5b505af115801561094d573d6000803e3d6000fd5b505050506000610973606461096d609d5487611cc190919063ffffffff16565b90611d04565b609c546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156109ae573d6000803e3d6000fd5b5060006109bb8583611d46565b90506109d26109cb826002611d04565b8b8b611d88565b50505050505050505050565b609f5481565b60008060006109f1612050565b90925090506000610a0d610a06866002611d04565b8484611b9d565b9050600060a160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5f57600080fd5b505afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a97919061393c565b60a25460a454919250600091610ab9916001600160a01b039081169116611c37565b5060a45490915060009081906001600160a01b03808516911614610ae857610ae2896002611d04565b85610af4565b84610af48a6002611d04565b60a454919350915060009081906001600160a01b03868116911614610b1a578888610b1d565b87895b9092509050610b5082610b308689611cc1565b81610b3757fe5b0482610b43868a611cc1565b81610b4a57fe5b0461212d565b9b9a5050505050505050505050565b6098546001600160a01b031681565b6099546001600160a01b031681565b60a1546001600160a01b031681565b609a546001600160a01b031681565b609b546001600160a01b03163314610bc55760405162461bcd60e51b81526004016106f390613c20565b609d55565b60a3546001600160a01b031681565b6000610c00604051806040016040528060048152602001636865726560e01b815250612143565b609f546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610c529133913091906004016139e5565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190613865565b610cc05760405162461bcd60e51b81526004016106f390613e69565b60aa80546001600160a01b0319163317905560a054609f54610ce3919084612186565b90505b919050565b609e5481565b610cf96122c9565b6065546001600160a01b03908116911614610d265760405162461bcd60e51b81526004016106f390613db8565b609880546001600160a01b038381166001600160a01b03198316811790935560405191169182917f9e4368dbddb338dc373020f18730584d6e9aaacad2101be6bd6d0a21fe59ffbc90600090a35050565b60a8602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909186565b609e54610dd55760405162461bcd60e51b81526004016106f390613b1a565b610ddd6122cd565b6000609e55565b610dec6122c9565b6065546001600160a01b03908116911614610e195760405162461bcd60e51b81526004016106f390613db8565b60008054906101000a90046001600160a01b03166001600160a01b0316632f4f8a7a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190613811565b60a180546001600160a01b0319166001600160a01b039283161790556000546040805163f7db38cb60e01b81529051919092169163f7db38cb916004808301926020929190829003018186803b158015610ef657600080fd5b505afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2e9190613811565b60a280546001600160a01b0319166001600160a01b0392831617905560005460408051631d925ea560e11b815290519190921691633b24bd4a916004808301926020929190829003018186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf9190613811565b60a380546001600160a01b0319166001600160a01b0392831617905560005460408051633e9a59a760e21b81529051919092169163fa69669c916004808301926020929190829003018186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190613811565b60a480546001600160a01b0319166001600160a01b03928316179055600054604080516370579b0b60e11b81529051919092169163e0af3616916004808301926020929190829003018186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190613811565b60a580546001600160a01b0319166001600160a01b0392831617905560005460408051632e0682d360e21b81529051919092169163b81a0b4c916004808301926020929190829003018186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190613811565b60a680546001600160a01b0319166001600160a01b039290921691909117905561119a6117ef565b565b609c546001600160a01b031681565b609b546001600160a01b031681565b6111c26122c9565b6065546001600160a01b039081169116146111ef5760405162461bcd60e51b81526004016106f390613db8565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112905760405162461bcd60e51b81526004016106f390613ded565b61129a8282612921565b5050565b60976020526000908152604090205481565b609a54600160a01b900460ff16156112da5760405162461bcd60e51b81526004016106f390613f66565b609a805460ff60a01b1916600160a01b179055609b80546001600160a01b039092166001600160a01b0319909216919091179055565b600082116113305760405162461bcd60e51b81526004016106f390613be9565b60a2546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611364903390309087906004016139e5565b602060405180830381600087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b69190613865565b6113d25760405162461bcd60e51b81526004016106f390613d12565b6000806113dd611ab1565b9150915060006113ee858385611b9d565b9050600061140c606461096d609d5489611cc190919063ffffffff16565b609c546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611447573d6000803e3d6000fd5b5060008054604051633834374960e11b81526001600160a01b03909116916370686e929161147c913391879190600401613a43565b600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b5050505060006114c38288611d4690919063ffffffff16565b90506114da6114d3826002611d04565b3388611d88565b50505050505050565b6114eb6122c9565b6065546001600160a01b039081169116146115185760405162461bcd60e51b81526004016106f390613db8565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6000609f547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161158b91906139d1565b60206040518083038186803b1580156115a357600080fd5b505afa1580156115b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115db919061393c565b10156115f95760405162461bcd60e51b81526004016106f390613d40565b610ce360a054609f5484612186565b60a6546001600160a01b031681565b6000805460405163568a0a5960e11b815282916001600160a01b03169063ad1414b2906116489086906004016139d1565b60206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611698919061393c565b9050670de0b6b3a76400008110156116b4576000915050610ce6565b670de0b6b3a764000081101580156116d35750674563918244f4000081105b156116e2576001915050610ce6565b674563918244f4000081101580156117015750678ac7230489e8000081105b15611710576002915050610ce6565b678ac7230489e80000811015801561173057506801158e460913d0000081105b1561173f576003915050610ce6565b6801158e460913d00000811015801561176057506801a055690d9db8000081105b1561176f576004915050610ce6565b6801a055690d9db800008110158015611790575068022b1c8c1227a0000081105b1561179f576005915050610ce6565b68022b1c8c1227a0000081101580156117c057506802b5e3af16b188000081105b156117cf576006915050610ce6565b6802b5e3af16b188000081106117e9576007915050610ce6565b50919050565b60a15460995460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926118279291169060001990600401613a2a565b602060405180830381600087803b15801561184157600080fd5b505af1158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118799190613865565b50565b6118846122c9565b6065546001600160a01b039081169116146118b15760405162461bcd60e51b81526004016106f390613db8565b609f55565b60a9546001600160a01b031681565b600181565b60a75481565b60001981565b60aa546001600160a01b031681565b60a5546001600160a01b031681565b6118fc6122c9565b6065546001600160a01b039081169116146119295760405162461bcd60e51b81526004016106f390613db8565b60a055565b606481565b61193b6122c9565b6065546001600160a01b039081169116146119685760405162461bcd60e51b81526004016106f390613db8565b6001600160a01b03811661198e5760405162461bcd60e51b81526004016106f390613b7a565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b7f028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f81565b60a2546001600160a01b031681565b60a4546001600160a01b031681565b609d5481565b6098546040805160016209351760e01b0319815281516001600160a01b039093169263fff6cae9926004808401939192918290030181600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190613881565b60a55460a25460009182918291611ad4916001600160a01b039182169116611c37565b50905060008060a360009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6091906138e8565b5060a2546001600160701b039283169450911691506001600160a01b03848116911614611b8e578181611b91565b80825b90969095509350505050565b6000808411611bbe5760405162461bcd60e51b81526004016106f390613f1b565b600083118015611bce5750600082115b611bea5760405162461bcd60e51b81526004016106f390613cca565b6000611bf8856103e5611cc1565b90506000611c068285611cc1565b90506000611c2083611c1a886103e8611cc1565b90612ab9565b9050808281611c2b57fe5b04979650505050505050565b600080826001600160a01b0316846001600160a01b03161415611c6c5760405162461bcd60e51b81526004016106f390613c85565b826001600160a01b0316846001600160a01b031610611c8c578284611c8f565b83835b90925090506001600160a01b038216611cba5760405162461bcd60e51b81526004016106f390613ead565b9250929050565b600082611cd057506000611cfe565b82820282848281611cdd57fe5b0414611cfb5760405162461bcd60e51b81526004016106f390613d77565b90505b92915050565b6000611cfb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612ade565b6000611cfb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b15565b600080611d93612050565b915091506000611da4868484611b9d565b60a25460a15460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92611ddc9216908a90600401613a2a565b602060405180830381600087803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e9190613865565b611e4a5760405162461bcd60e51b81526004016106f390613bc0565b60a25460a4546000918291611e6b916001600160a01b039081169116611c37565b60a15460a4549294509092506001600160a01b039081169163022c0d9f91808616911614611e9a576000611e9c565b845b60a4546001600160a01b03858116911614611eb8576000611eba565b855b306040518463ffffffff1660e01b8152600401611ed993929190613fae565b600060405180830381600087803b158015611ef357600080fd5b505af1158015611f07573d6000803e3d6000fd5b50505050611f1783898989612b41565b60a6546040516370a0823160e01b8152670de0b6b3a7640000916001600160a01b0316906370a0823190611f4f9030906004016139d1565b60206040518083038186803b158015611f6757600080fd5b505afa158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f919061393c565b11156120355760a6546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611fe19030908b90670de0b6b3a7640000906004016139e5565b602060405180830381600087803b158015611ffb57600080fd5b505af115801561200f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120339190613865565b505b61203e87612fc4565b612046611a32565b5050505050505050565b60a25460a45460009182918291612073916001600160a01b039182169116611c37565b50905060008060a160009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156120c757600080fd5b505afa1580156120db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ff91906138e8565b5060a4546001600160701b039283169450911691506001600160a01b03848116911614611b8e578181611b91565b600081831061213c5781611cfb565b5090919050565b611879816040516024016121579190613b07565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613429565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f00000000000000000000000000000000000000000000000000000000000000008587866040516020016121ec9291906139c3565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161221993929190613a66565b602060405180830381600087803b15801561223357600080fd5b505af1158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b9190613865565b5060008481526097602052604081205461228a9086908590309061344a565b6000868152609760205260409020549091506122a7906001612ab9565b6000868152609760205260409020556122c08582613484565b95945050505050565b3390565b60005b60a754811015612914576122e26137b6565b50600081815260a86020908152604091829020825160c08101845281546001600160a01b03168152600182015492810183905260028201549381019390935260038101546060840152600481015460808401526005015460a0830152609e541161242d5760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061238290600190600401613ac0565b60206040518083038186803b15801561239a57600080fd5b505afa1580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190613811565b8351609e546040516001600160e01b031960e086901b1681526123fa939291906004016139e5565b600060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050505b8060400151609e54116125215760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061247690600290600401613ac0565b60206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c69190613811565b8351609e546040516001600160e01b031960e086901b1681526124ee939291906004016139e5565b600060405180830381600087803b15801561250857600080fd5b505af115801561251c573d6000803e3d6000fd5b505050505b8060600151609e54116126155760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061256a90600390600401613ac0565b60206040518083038186803b15801561258257600080fd5b505afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba9190613811565b8351609e546040516001600160e01b031960e086901b1681526125e2939291906004016139e5565b600060405180830381600087803b1580156125fc57600080fd5b505af1158015612610573d6000803e3d6000fd5b505050505b8060800151609e54116127085760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061265d906004908101613ac0565b60206040518083038186803b15801561267557600080fd5b505afa158015612689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ad9190613811565b8351609e546040516001600160e01b031960e086901b1681526126d5939291906004016139e5565b600060405180830381600087803b1580156126ef57600080fd5b505af1158015612703573d6000803e3d6000fd5b505050505b8060a00151609e54116127fc5760a95460005460405163795d79f560e01b81526001600160a01b039283169263c6c3bbe692169063795d79f59061275190600590600401613ac0565b60206040518083038186803b15801561276957600080fd5b505afa15801561277d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a19190613811565b8351609e546040516001600160e01b031960e086901b1681526127c9939291906004016139e5565b600060405180830381600087803b1580156127e357600080fd5b505af11580156127f7573d6000803e3d6000fd5b505050505b600080548251604051633834374960e11b81526001600160a01b03909216926370686e9292612832929190600190600401613a43565b600060405180830381600087803b15801561284c57600080fd5b505af1158015612860573d6000803e3d6000fd5b505050600083815260a8602052604080822080546001600160a01b031916815560018101839055600281018390556003810183905560048082018490556005909101839055825485519251631695fb2f60e31b81526001600160a01b03909116945063b4afd978936128d59392909101613a2a565b600060405180830381600087803b1580156128ef57600080fd5b505af1158015612903573d6000803e3d6000fd5b5050600190930192506122d0915050565b506000609e81905560a755565b61292a816134b7565b609e556000805460405163795d79f560e01b81526001600160a01b039091169063795d79f59061295f90600790600401613ac0565b60206040518083038186803b15801561297757600080fd5b505afa15801561298b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129af9190613811565b60aa546040516370a0823160e01b81529192506001600160a01b03808416926370a08231926129e29216906004016139d1565b60206040518083038186803b1580156129fa57600080fd5b505afa158015612a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a32919061393c565b612aa45760a95460aa54609e54604051636361ddf360e11b81526001600160a01b039384169363c6c3bbe693612a7193879392909116916004016139e5565b600060405180830381600087803b158015612a8b57600080fd5b505af1158015612a9f573d6000803e3d6000fd5b505050505b505060aa80546001600160a01b031916905550565b600082820183811015611cfb5760405162461bcd60e51b81526004016106f390613c4e565b60008183612aff5760405162461bcd60e51b81526004016106f39190613b07565b506000838581612b0b57fe5b0495945050505050565b60008184841115612b395760405162461bcd60e51b81526004016106f39190613b07565b505050900390565b600080612b4c612050565b915091506000612b5d8684846134c3565b9050600087821115612b7e57612b748884866134c3565b9050879150612b81565b50855b60a25460a15460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612bb7929116908590600401613a2a565b602060405180830381600087803b158015612bd157600080fd5b505af1158015612be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c099190613865565b612c0f57fe5b60a45460a15460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612c45929116908690600401613a2a565b602060405180830381600087803b158015612c5f57600080fd5b505af1158015612c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c979190613865565b612c9d57fe5b8415612e0d5760a1546040516335313c2160e11b81526001600160a01b0390911690636a62784290612cd39030906004016139d1565b602060405180830381600087803b158015612ced57600080fd5b505af1158015612d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d25919061393c565b5060995460a1546040516370a0823160e01b81526001600160a01b0392831692634cf5fbf5928a92600092909116906370a0823190612d689030906004016139d1565b60206040518083038186803b158015612d8057600080fd5b505afa158015612d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db8919061393c565b6040518463ffffffff1660e01b8152600401612dd693929190613a09565b600060405180830381600087803b158015612df057600080fd5b505af1158015612e04573d6000803e3d6000fd5b50505050612e91565b60a1546040516335313c2160e11b81526001600160a01b0390911690636a62784290612e3d9089906004016139d1565b602060405180830381600087803b158015612e5757600080fd5b505af1158015612e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8f919061393c565b505b81881115612f265760a4546001600160a01b031663a9059cbb87612eb58b86611d46565b6040518363ffffffff1660e01b8152600401612ed2929190613a2a565b602060405180830381600087803b158015612eec57600080fd5b505af1158015612f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f249190613865565b505b808711156120465760a2546001600160a01b031663a9059cbb87612f4a8a85611d46565b6040518363ffffffff1660e01b8152600401612f67929190613a2a565b602060405180830381600087803b158015612f8157600080fd5b505af1158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb99190613865565b505050505050505050565b600080546040516333103d9960e21b81526001600160a01b039091169063cc40f66490612ff59085906004016139d1565b60206040518083038186803b15801561300d57600080fd5b505afa158015613021573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613045919061393c565b9050600061305283611617565b9050815b818110156133b7576130666137b6565b816130ad576040518060c00160405280866001600160a01b03168152602001603281526020016000815260200160008152602001600081526020016000815250905061332f565b81600114156130f8576040518060c00160405280866001600160a01b03168152602001604b81526020016032815260200160008152602001600081526020016000815250905061332f565b8160021415613143576040518060c00160405280866001600160a01b0316815260200160648152602001604b815260200160328152602001600081526020016000815250905061332f565b816003141561318e576040518060c00160405280866001600160a01b031681526020016064815260200160648152602001604b8152602001603281526020016000815250905061332f565b81600414156131d9576040518060c00160405280866001600160a01b03168152602001606481526020016064815260200160648152602001604b81526020016032815250905061332f565b8160051415613224576040518060c00160405280866001600160a01b03168152602001606481526020016064815260200160648152602001606481526020016032815250905061332f565b816006141561332f5760a7600081548092919060010191905055506040518060c00160405280866001600160a01b0316815260200160648152602001606481526020016064815260200160648152602001606481525060a8600060a754815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050506040518060c00160405280866001600160a01b0316815260200160648152602001606481526020016064815260200160648152602001600081525090505b80516001600160a01b0316156133ae5760a78054600190810191829055600091825260a86020908152604092839020845181546001600160a01b0319166001600160a01b039091161781559084015191810191909155908201516002820155606082015160038201556080820151600482015560a08201516005909101555b50600101613056565b50600381106133c9576133c98361352b565b600054604051631695fb2f60e31b81526001600160a01b039091169063b4afd978906133fb9086908590600401613a2a565b600060405180830381600087803b15801561341557600080fd5b505af11580156114da573d6000803e3d6000fd5b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000848484846040516020016134639493929190613ac9565b60408051601f19818403018152919052805160209091012095945050505050565b600082826040516020016134999291906139c3565b60405160208183030381529060405280519060200120905092915050565b60649081028190040690565b60008084116134e45760405162461bcd60e51b81526004016106f390613e24565b6000831180156134f45750600082115b6135105760405162461bcd60e51b81526004016106f390613cca565b8261351b8584611cc1565b8161352257fe5b04949350505050565b6000805460405163795d79f560e01b81526001600160a01b039091169063795d79f59061355d90600690600401613ac0565b60206040518083038186803b15801561357557600080fd5b505afa158015613589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ad9190613811565b60a6546040516370a0823160e01b81529192506801158e460913d00000916001600160a01b03909116906370a08231906135eb9086906004016139d1565b60206040518083038186803b15801561360357600080fd5b505afa158015613617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363b919061393c565b101580156136ca575060a954604051633de222bb60e21b81526001600160a01b039091169063f7888aec906136769084908690600401613aed565b602060405180830381600087803b15801561369057600080fd5b505af11580156136a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c8919061393c565b155b801561374657506032816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561370c57600080fd5b505afa158015613720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613744919061393c565b105b1561129a5760a954609e54604051636361ddf360e11b81526001600160a01b039092169163c6c3bbe69161378091859187916004016139e5565b600060405180830381600087803b15801561379a57600080fd5b505af11580156137ae573d6000803e3d6000fd5b505050505050565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215613806578081fd5b8135611cfb81613fdc565b600060208284031215613822578081fd5b8151611cfb81613fdc565b6000806040838503121561383f578081fd5b823561384a81613fdc565b9150602083013561385a81613ff1565b809150509250929050565b600060208284031215613876578081fd5b8151611cfb81613ff1565b60008060408385031215613893578182fd5b825161389e81613ff1565b602084015190925061385a81613ff1565b6000602082840312156138c0578081fd5b5035919050565b600080604083850312156138d9578182fd5b50508035926020909101359150565b6000806000606084860312156138fc578081fd5b835161390781613fff565b602085015190935061391881613fff565b604085015190925063ffffffff81168114613931578182fd5b809150509250925092565b60006020828403121561394d578081fd5b5051919050565b60008060408385031215613966578182fd5b82359150602083013561385a81613ff1565b60008151808452815b8181101561399d57602081850181015186830182015201613981565b818111156139ae5782602083870101525b50601f01601f19169290920160200192915050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b600060018060a01b0385168252836020830152606060408301526122c06060830184613978565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b6001600160a01b0392831681529116602082015260400190565b600060208252611cfb6020830184613978565b6020808252601a908201527f4e6f2072616e646f6d206e756d62657220617661696c61626c65000000000000604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60208082526019908201527f496e73756666696369656e7420746f6b656e20616d6f756e7400000000000000604082015260600190565b6020808252601490820152734c6f636b656420746f20676f7665726e616e636560601b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b602080825260149082015273105c1c1c9bdd99481d1bdad95b9cc8199a5c9cdd60621b604082015260600190565b6020808252601b908201527f4e6f7420656e6f756768204c494e4b206f6e20636f6e74726163740000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416040820152641353d5539560da1b606082015260800190565b60208082526024908201527f4e6f7420656e6f756768204c494e4b20617070726f76656420746f20636f6e746040820152631c9858dd60e21b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526017908201527f496e73756666696369656e742045544820616d6f756e74000000000000000000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526028908201527f476f7665726e616e636520636f6e74726163742068617320616c7265616479206040820152671899595b881cd95d60c21b606082015260800190565b92835260208301919091526001600160a01b0316604082015260806060820181905260009082015260a00190565b6001600160a01b038116811461187957600080fd5b801515811461187957600080fd5b6001600160701b038116811461187957600080fdfea2646970667358221220f92b771f147e6f02011e2c318cf29927e0bb767b3ddf45e9a44eab5b2eb49d2664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRandomNumber(uint256)": {
        "notice": "Requests randomness from a user-provided seed"
      },
      "selfRequestRandomNumber(uint256)": {
        "notice": "Requests randomness from a user-provided seed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13652,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_storage",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(YGYStorageV1)15376"
      },
      {
        "astId": 195,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 263,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 188,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 565,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 683,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13735,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "nonces",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 10015,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_feeApprover",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IFeeApprover)15564"
      },
      {
        "astId": 10017,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_RAMVault",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IRAMVault)15780"
      },
      {
        "astId": 10019,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_uniV2Factory",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 10021,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "governanceSet",
        "offset": 20,
        "slot": "154",
        "type": "t_bool"
      },
      {
        "astId": 10023,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "governance",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 10025,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "regenerator",
        "offset": 0,
        "slot": "156",
        "type": "t_address_payable"
      },
      {
        "astId": 10027,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "regeneratorTax",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 10047,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "randomResult",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 10049,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "rngLinkFee",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 10051,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "keyHash",
        "offset": 0,
        "slot": "160",
        "type": "t_bytes32"
      },
      {
        "astId": 10053,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_YGYRAMPair",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 10055,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_YGYToken",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 10057,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_YGYWETHPair",
        "offset": 0,
        "slot": "163",
        "type": "t_address"
      },
      {
        "astId": 10059,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_RAMToken",
        "offset": 0,
        "slot": "164",
        "type": "t_address"
      },
      {
        "astId": 10061,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_WETH",
        "offset": 0,
        "slot": "165",
        "type": "t_contract(IWETH)23082"
      },
      {
        "astId": 10063,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_dXIOTToken",
        "offset": 0,
        "slot": "166",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 10078,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "ticketCount",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 10082,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "tickets",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_uint256,t_struct(LotteryTicket)10076_storage)"
      },
      {
        "astId": 10084,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "_NFTFactory",
        "offset": 0,
        "slot": "169",
        "type": "t_contract(INFTFactory)15752"
      },
      {
        "astId": 11022,
        "contract": "contracts/RAMV1router.sol:RAMv1Router",
        "label": "lotteryTriggerer",
        "offset": 0,
        "slot": "170",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeApprover)15564": {
        "encoding": "inplace",
        "label": "contract IFeeApprover",
        "numberOfBytes": "20"
      },
      "t_contract(INFTFactory)15752": {
        "encoding": "inplace",
        "label": "contract INFTFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IRAMVault)15780": {
        "encoding": "inplace",
        "label": "contract IRAMVault",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)23082": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_contract(YGYStorageV1)15376": {
        "encoding": "inplace",
        "label": "contract YGYStorageV1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(LotteryTicket)10076_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RAMv1Router.LotteryTicket)",
        "numberOfBytes": "32",
        "value": "t_struct(LotteryTicket)10076_storage"
      },
      "t_struct(LotteryTicket)10076_storage": {
        "encoding": "inplace",
        "label": "struct RAMv1Router.LotteryTicket",
        "members": [
          {
            "astId": 10065,
            "contract": "contracts/RAMV1router.sol:RAMv1Router",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10067,
            "contract": "contracts/RAMV1router.sol:RAMv1Router",
            "label": "levelOneChance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10069,
            "contract": "contracts/RAMV1router.sol:RAMv1Router",
            "label": "levelTwoChance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10071,
            "contract": "contracts/RAMV1router.sol:RAMv1Router",
            "label": "levelThreeChance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10073,
            "contract": "contracts/RAMV1router.sol:RAMv1Router",
            "label": "levelFourChance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10075,
            "contract": "contracts/RAMV1router.sol:RAMv1Router",
            "label": "levelFiveChance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}