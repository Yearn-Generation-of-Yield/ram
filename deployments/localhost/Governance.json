{
  "address": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_YGYToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_RAMRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "RAMRouter",
      "outputs": [
        {
          "internalType": "contract IRAMv1Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YGYToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRegeneratorUpdateStagingMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getDurationForLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getMultiplierForLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRAMRouterUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "setUserNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "timelockYGY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "unlockOldestTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRAMRouterRegeneratorTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStagingMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStagingReadyTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelockedYGY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fcfbae4f015c008ef9578b2cf1a0c65f821c9cbba488486a2805d76d1fda5db",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
    "transactionIndex": 0,
    "gasUsed": "856183",
    "logsBloom": "0x
    "blockHash": "0x23bb6ccdf76af2702bfa37d515ef37e26843d9e7c48e3c697103cd863a5f35f8",
    "transactionHash": "0x0fcfbae4f015c008ef9578b2cf1a0c65f821c9cbba488486a2805d76d1fda5db",
    "logs": [],
    "blockNumber": 54,
    "cumulativeGasUsed": "856183",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8"
  ],
  "solcInputHash": "e1126a469c08dd05a8ec89baab354616",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_YGYToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RAMRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RAMRouter\",\"outputs\":[{\"internalType\":\"contract IRAMv1Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YGYToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRegeneratorUpdateStagingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getDurationForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMultiplierForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRAMRouterUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setUserNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"timelockYGY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"unlockOldestTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRAMRouterRegeneratorTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStagingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStagingReadyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockedYGY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"contracts/Governance.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IRAMv1Router.sol\\\";\\n\\ncontract Governance {\\n    using SafeMath for uint256;\\n\\n    IERC20 public YGYToken;\\n    IRAMv1Router public RAMRouter;\\n\\n    uint256 public weightedNumber; // Number 1-8 weighted by total user numbers\\n    uint256 public votingShares; // Includes voting shares generated fromimelocked YGY\\n\\n    uint256 public lastRAMRouterUpdateTime; // Last time the regenerator tax on the router was updated\\n    bool public updateStagingMode;\\n    uint256 public updateStagingReadyTime;\\n\\n    struct User {\\n        uint256 number; // Number from 1-8 indicating the desired LGE regenerator tax %\\n        uint256 timelockedYGY;\\n        // The timelocks are stack data structure implemented via hashmaps,\\n        // there's a stack at each level (1-4)\\n        mapping(uint256 => mapping(uint256 => TimeLock)) timelocks; // mapping(level => timelock ID => timelock object)\\n        mapping(uint256 => uint256) timelockTop; // mapping (level => top of stack at this level)\\n        mapping(uint256 => uint256) timelockCount; // mapping (level => current number timelocks at this level)\\n    }\\n\\n    struct TimeLock {\\n        uint256 multipliedAmount;\\n        uint256 level;\\n        uint256 unlockTime;\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    constructor(address _YGYToken, address _RAMRouter) public {\\n        YGYToken = IERC20(_YGYToken);\\n        RAMRouter = IRAMv1Router(_RAMRouter);\\n        weightedNumber = 1; // start at 1%\\n    }\\n\\n    function setUserNumber(uint256 _number) public {\\n        require(_number >= 1 && _number <= 8, \\\"Number must be in range 1-8\\\");\\n        User storage user = users[msg.sender];\\n        user.number = _number;\\n\\n        calcWeightedNumber(msg.sender);\\n    }\\n\\n    function enterRegeneratorUpdateStagingMode() public {\\n        // 1 day mandatory wait time after last router regenerator tax update\\n        require(\\n            block.timestamp >= lastRAMRouterUpdateTime.add(1 days),\\n            \\\"Must wait 1 day since last update\\\"\\n        );\\n        updateStagingMode = true;\\n        updateStagingReadyTime = block.timestamp.add(10 minutes);\\n    }\\n\\n    function updateRAMRouterRegeneratorTax() public {\\n        require(updateStagingMode, \\\"Must be in update staging mode\\\");\\n        require(\\n            block.timestamp >= updateStagingReadyTime,\\n            \\\"Must wait 10 minutes since update staged\\\"\\n        );\\n        updateStagingMode = false;\\n        lastRAMRouterUpdateTime = block.timestamp;\\n\\n        // Update the RAM router's regenerator tax\\n        RAMRouter.setRegeneratorTax(weightedNumber);\\n    }\\n\\n    // users can lock YGY for time durations to get multipliers on their YGY\\n    function timelockYGY(\\n        uint256 _amount,\\n        uint256 _level,\\n        uint256 _number\\n    ) public {\\n        require(_number >= 1 && _number <= 8, \\\"Number must be in range 1-8\\\");\\n        require(\\n            YGYToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Have tokens been approved?\\\"\\n        );\\n\\n        User storage user = users[msg.sender];\\n\\n        // Calculate effective voting power and create new timelock\\n        uint256 effectiveAmount = _amount\\n            .mul(getMultiplierForLevel(_level))\\n            .div(100);\\n        TimeLock memory timelock = TimeLock({\\n            multipliedAmount: effectiveAmount,\\n            level: _level,\\n            unlockTime: block.timestamp.add(getDurationForLevel(_level))\\n        });\\n\\n        if (user.timelockTop[_level] == 0) {\\n            user.timelockTop[_level] = user.timelockTop[_level].add(1);\\n        }\\n\\n        uint256 newTimelockCount = user.timelockCount[_level].add(1);\\n        user.timelocks[_level][newTimelockCount] = timelock;\\n        user.timelockCount[_level] = newTimelockCount;\\n\\n        // Add the new voting power to user and the total voting power\\n        user.timelockedYGY = user.timelockedYGY.add(effectiveAmount);\\n        votingShares = votingShares.add(effectiveAmount);\\n\\n        // Update number and calc new weighted number\\n        user.number = _number;\\n        calcWeightedNumber(msg.sender);\\n    }\\n\\n    // User unlocks their oldest timelock, receiving all the YGY tokens directly to their address\\n    function unlockOldestTimelock(uint256 _level) public {\\n        User storage user = users[msg.sender];\\n        uint256 levelTimelockTop = user.timelockTop[_level];\\n        TimeLock storage timelock = user.timelocks[_level][levelTimelockTop];\\n        require(\\n            block.timestamp >= timelock.unlockTime,\\n            \\\"Tokens are still timelocked\\\"\\n        );\\n\\n        // Update user's timelocked balances and the total YGY balance\\n        user.timelockedYGY = user.timelockedYGY.sub(timelock.multipliedAmount);\\n        votingShares = votingShares.sub(timelock.multipliedAmount);\\n\\n        // Send underlying amount of tokens to user\\n        uint256 underlyingAmount = timelock.multipliedAmount.div(\\n            getMultiplierForLevel(timelock.level).div(100)\\n        );\\n        YGYToken.transfer(msg.sender, underlyingAmount);\\n\\n        // Delete the timelock and update user's timelock stack\\n        delete user.timelocks[_level][levelTimelockTop];\\n        user.timelockTop[_level] = levelTimelockTop.add(1);\\n        user.timelockCount[_level] = user.timelockCount[_level].sub(1);\\n\\n        calcWeightedNumber(msg.sender);\\n    }\\n\\n    function calcWeightedNumber(address addr) internal {\\n        User storage user = users[addr];\\n\\n        // Calculate the sum of all weights\\n        uint256 otherTotalYGY = votingShares.sub(user.timelockedYGY);\\n\\n        // Calculate the sum of all weighing factors\\n        uint256 userWeighingFactor = user.timelockedYGY.mul(user.number);\\n        uint256 otherWeighingFactor = otherTotalYGY.mul(weightedNumber);\\n        uint256 sumOfWeighingFactors = userWeighingFactor.add(\\n            otherWeighingFactor\\n        );\\n\\n        // Weighted average = (sum weighing factors / sum of weight)\\n        if (votingShares > 0 && user.timelockedYGY > 0) {\\n            weightedNumber = sumOfWeighingFactors.div(votingShares);\\n        }\\n    }\\n\\n    function getDurationForLevel(uint256 _level) public pure returns (uint256) {\\n        if (_level == 1) {\\n            return 2 weeks;\\n        } else if (_level == 2) {\\n            return 4 weeks;\\n        } else if (_level == 3) {\\n            return 12 weeks;\\n        } else if (_level == 4) {\\n            return 24 weeks;\\n        }\\n        return 2 weeks;\\n    }\\n\\n    function getMultiplierForLevel(uint256 _level)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_level == 1) {\\n            return 150; // 1.5x\\n        } else if (_level == 2) {\\n            return 300; // 3x\\n        } else if (_level == 3) {\\n            return 1000; // 10x\\n        } else if (_level == 4) {\\n            return 2500; // 25x\\n        } else {\\n            return 150;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdb55af0b7a10611870f8931d46b96a362e7606507b8c19beea91086c700df5e\"},\"contracts/interfaces/IRAMv1Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRAMv1Router {\\n    function setRegeneratorTax(uint256 _regeneratorTax) external;\\n}\\n\",\"keccak256\":\"0xfc5433bd442a03c46cda472b143ba1edb4c8220ae2186c53d26647e685200bb9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ddc380380610ddc8339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b03199182161790915560018054939092169216919091178155600255610d5f8061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063978f254b11610097578063bbdc1d6711610066578063bbdc1d6714610219578063bf6ece4014610236578063c94c820114610252578063d80137e11461025a576100f5565b8063978f254b146101ad578063a3323159146101b5578063a87430ba146101d2578063ae38e47814610211576100f5565b8063776fb9c0116100d3578063776fb9c01461013b5780638a48abc4146101435780638e75217e14610160578063952c5df714610184576100f5565b80632a23cf20146100fa578063310fdd0a1461011957806370e5603014610133575b600080fd5b6101176004803603602081101561011057600080fd5b5035610262565b005b6101216102e5565b60408051918252519081900360200190f35b6101216102eb565b6101216102f1565b6101216004803603602081101561015957600080fd5b50356102f7565b610168610349565b604080516001600160a01b039092168252519081900360200190f35b6101176004803603606081101561019a57600080fd5b5080359060208101359060400135610358565b6101176105d9565b610117600480360360208110156101cb57600080fd5b50356106e9565b6101f8600480360360208110156101e857600080fd5b50356001600160a01b03166108c7565b6040805192835260208301919091528051918290030190f35b6101216108e0565b6101216004803603602081101561022f57600080fd5b50356108e6565b61023e61093e565b604080519115158252519081900360200190f35b610117610947565b6101686109b3565b60018110158015610274575060088111155b6102c5576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b336000818152600760205260409020828155906102e1906109c2565b5050565b60035481565b60065481565b60025481565b6000816001141561030a57506096610344565b816002141561031c575061012c610344565b816003141561032e57506103e8610344565b816004141561034057506109c4610344565b5060965b919050565b6000546001600160a01b031681565b6001811015801561036a575060088111155b6103bb576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b60008054604080516323b872dd60e01b81523360048201523060248201526044810187905290516001600160a01b03909216926323b872dd926064808401936020939083900390910190829087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b505050506040513d602081101561044057600080fd5b5051610493576040805162461bcd60e51b815260206004820152601a60248201527f4861766520746f6b656e73206265656e20617070726f7665643f000000000000604482015290519081900360640190fd5b336000908152600760205260408120906104c160646104bb6104b4876102f7565b8890610a62565b90610ac4565b90506104cb610c9e565b60405180606001604052808381526020018681526020016104f56104ee886108e6565b4290610b06565b9052600086815260038501602052604090205490915061053d57600085815260038401602052604090205461052b906001610b06565b60008681526003850160205260409020555b6000858152600484016020526040812054610559906001610b06565b6000878152600280870160209081526040808420858552825280842087518155828801516001808301919091558289015191909401558a8452600489019091529091208290558501549091506105af9084610b06565b60018501556003546105c19084610b06565b6003558484556105d0336109c2565b50505050505050565b60055460ff16610630576040805162461bcd60e51b815260206004820152601e60248201527f4d75737420626520696e207570646174652073746167696e67206d6f64650000604482015290519081900360640190fd5b6006544210156106715760405162461bcd60e51b8152600401808060200182810382526028815260200180610d026028913960400191505060405180910390fd5b6005805460ff1916905542600490815560015460025460408051630c39622b60e21b815293840191909152516001600160a01b03909116916330e588ac91602480830192600092919082900301818387803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b50505050565b33600090815260076020908152604080832084845260038101835281842054600280830185528386208287529094529190932091820154909190421015610777576040805162461bcd60e51b815260206004820152601b60248201527f546f6b656e7320617265207374696c6c2074696d656c6f636b65640000000000604482015290519081900360640190fd5b8054600184015461078791610b60565b6001840155805460035461079a91610b60565b60038190555060006107bf6107b760646104bb85600101546102f7565b835490610ac4565b600080546040805163a9059cbb60e01b81523360048201526024810185905290519394506001600160a01b039091169263a9059cbb92604480840193602093929083900390910190829087803b15801561081857600080fd5b505af115801561082c573d6000803e3d6000fd5b505050506040513d602081101561084257600080fd5b505060008581526002808601602090815260408084208785529091528220828155600180820184905591019190915561087c908490610b06565b600086815260038601602090815260408083209390935560048701905220546108a6906001610b60565b60008681526004860160205260409020556108c0336109c2565b5050505050565b6007602052600090815260409020805460019091015482565b60045481565b600081600114156108fb575062127500610344565b816002141561090e57506224ea00610344565b81600314156109215750626ebe00610344565b8160041415610934575062dd7c00610344565b5062127500919050565b60055460ff1681565b6004546109579062015180610b06565b4210156109955760405162461bcd60e51b8152600401808060200182810382526021815260200180610ce16021913960400191505060405180910390fd5b6005805460ff191660011790556109ae42610258610b06565b600655565b6001546001600160a01b031681565b6001600160a01b038116600090815260076020526040812060018101546003549192916109ee91610b60565b82546001840154919250600091610a0491610a62565b90506000610a1d60025484610a6290919063ffffffff16565b90506000610a2b8383610b06565b90506000600354118015610a43575060008560010154115b15610a5a57600354610a56908290610ac4565b6002555b505050505050565b600082610a7157506000610abe565b82820282848281610a7e57fe5b0414610abb5760405162461bcd60e51b8152600401808060200182810382526021815260200180610cc06021913960400191505060405180910390fd5b90505b92915050565b6000610abb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610ba2565b600082820183811015610abb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610abb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610c44565b60008183610c2e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bf3578181015183820152602001610bdb565b50505050905090810190601f168015610c205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610c3a57fe5b0495945050505050565b60008184841115610c965760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bf3578181015183820152602001610bdb565b505050900390565b6040518060600160405280600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d75737420776169742031206461792073696e6365206c617374207570646174654d7573742077616974203130206d696e757465732073696e63652075706461746520737461676564a2646970667358221220bd3207c8874d87a58455ae6f0def20abbf1fc21db82d0f6c326d0bc0d93bea8b64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063978f254b11610097578063bbdc1d6711610066578063bbdc1d6714610219578063bf6ece4014610236578063c94c820114610252578063d80137e11461025a576100f5565b8063978f254b146101ad578063a3323159146101b5578063a87430ba146101d2578063ae38e47814610211576100f5565b8063776fb9c0116100d3578063776fb9c01461013b5780638a48abc4146101435780638e75217e14610160578063952c5df714610184576100f5565b80632a23cf20146100fa578063310fdd0a1461011957806370e5603014610133575b600080fd5b6101176004803603602081101561011057600080fd5b5035610262565b005b6101216102e5565b60408051918252519081900360200190f35b6101216102eb565b6101216102f1565b6101216004803603602081101561015957600080fd5b50356102f7565b610168610349565b604080516001600160a01b039092168252519081900360200190f35b6101176004803603606081101561019a57600080fd5b5080359060208101359060400135610358565b6101176105d9565b610117600480360360208110156101cb57600080fd5b50356106e9565b6101f8600480360360208110156101e857600080fd5b50356001600160a01b03166108c7565b6040805192835260208301919091528051918290030190f35b6101216108e0565b6101216004803603602081101561022f57600080fd5b50356108e6565b61023e61093e565b604080519115158252519081900360200190f35b610117610947565b6101686109b3565b60018110158015610274575060088111155b6102c5576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b336000818152600760205260409020828155906102e1906109c2565b5050565b60035481565b60065481565b60025481565b6000816001141561030a57506096610344565b816002141561031c575061012c610344565b816003141561032e57506103e8610344565b816004141561034057506109c4610344565b5060965b919050565b6000546001600160a01b031681565b6001811015801561036a575060088111155b6103bb576040805162461bcd60e51b815260206004820152601b60248201527f4e756d626572206d75737420626520696e2072616e676520312d380000000000604482015290519081900360640190fd5b60008054604080516323b872dd60e01b81523360048201523060248201526044810187905290516001600160a01b03909216926323b872dd926064808401936020939083900390910190829087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b505050506040513d602081101561044057600080fd5b5051610493576040805162461bcd60e51b815260206004820152601a60248201527f4861766520746f6b656e73206265656e20617070726f7665643f000000000000604482015290519081900360640190fd5b336000908152600760205260408120906104c160646104bb6104b4876102f7565b8890610a62565b90610ac4565b90506104cb610c9e565b60405180606001604052808381526020018681526020016104f56104ee886108e6565b4290610b06565b9052600086815260038501602052604090205490915061053d57600085815260038401602052604090205461052b906001610b06565b60008681526003850160205260409020555b6000858152600484016020526040812054610559906001610b06565b6000878152600280870160209081526040808420858552825280842087518155828801516001808301919091558289015191909401558a8452600489019091529091208290558501549091506105af9084610b06565b60018501556003546105c19084610b06565b6003558484556105d0336109c2565b50505050505050565b60055460ff16610630576040805162461bcd60e51b815260206004820152601e60248201527f4d75737420626520696e207570646174652073746167696e67206d6f64650000604482015290519081900360640190fd5b6006544210156106715760405162461bcd60e51b8152600401808060200182810382526028815260200180610d026028913960400191505060405180910390fd5b6005805460ff1916905542600490815560015460025460408051630c39622b60e21b815293840191909152516001600160a01b03909116916330e588ac91602480830192600092919082900301818387803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b50505050565b33600090815260076020908152604080832084845260038101835281842054600280830185528386208287529094529190932091820154909190421015610777576040805162461bcd60e51b815260206004820152601b60248201527f546f6b656e7320617265207374696c6c2074696d656c6f636b65640000000000604482015290519081900360640190fd5b8054600184015461078791610b60565b6001840155805460035461079a91610b60565b60038190555060006107bf6107b760646104bb85600101546102f7565b835490610ac4565b600080546040805163a9059cbb60e01b81523360048201526024810185905290519394506001600160a01b039091169263a9059cbb92604480840193602093929083900390910190829087803b15801561081857600080fd5b505af115801561082c573d6000803e3d6000fd5b505050506040513d602081101561084257600080fd5b505060008581526002808601602090815260408084208785529091528220828155600180820184905591019190915561087c908490610b06565b600086815260038601602090815260408083209390935560048701905220546108a6906001610b60565b60008681526004860160205260409020556108c0336109c2565b5050505050565b6007602052600090815260409020805460019091015482565b60045481565b600081600114156108fb575062127500610344565b816002141561090e57506224ea00610344565b81600314156109215750626ebe00610344565b8160041415610934575062dd7c00610344565b5062127500919050565b60055460ff1681565b6004546109579062015180610b06565b4210156109955760405162461bcd60e51b8152600401808060200182810382526021815260200180610ce16021913960400191505060405180910390fd5b6005805460ff191660011790556109ae42610258610b06565b600655565b6001546001600160a01b031681565b6001600160a01b038116600090815260076020526040812060018101546003549192916109ee91610b60565b82546001840154919250600091610a0491610a62565b90506000610a1d60025484610a6290919063ffffffff16565b90506000610a2b8383610b06565b90506000600354118015610a43575060008560010154115b15610a5a57600354610a56908290610ac4565b6002555b505050505050565b600082610a7157506000610abe565b82820282848281610a7e57fe5b0414610abb5760405162461bcd60e51b8152600401808060200182810382526021815260200180610cc06021913960400191505060405180910390fd5b90505b92915050565b6000610abb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610ba2565b600082820183811015610abb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610abb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610c44565b60008183610c2e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bf3578181015183820152602001610bdb565b50505050905090810190601f168015610c205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610c3a57fe5b0495945050505050565b60008184841115610c965760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610bf3578181015183820152602001610bdb565b505050900390565b6040518060600160405280600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d75737420776169742031206461792073696e6365206c617374207570646174654d7573742077616974203130206d696e757465732073696e63652075706461746520737461676564a2646970667358221220bd3207c8874d87a58455ae6f0def20abbf1fc21db82d0f6c326d0bc0d93bea8b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6148,
        "contract": "contracts/Governance.sol:Governance",
        "label": "YGYToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 6150,
        "contract": "contracts/Governance.sol:Governance",
        "label": "RAMRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRAMv1Router)15788"
      },
      {
        "astId": 6152,
        "contract": "contracts/Governance.sol:Governance",
        "label": "weightedNumber",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6154,
        "contract": "contracts/Governance.sol:Governance",
        "label": "votingShares",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6156,
        "contract": "contracts/Governance.sol:Governance",
        "label": "lastRAMRouterUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6158,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updateStagingMode",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 6160,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updateStagingReadyTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6190,
        "contract": "contracts/Governance.sol:Governance",
        "label": "users",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(User)6179_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRAMv1Router)15788": {
        "encoding": "inplace",
        "label": "contract IRAMv1Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)6179_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Governance.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6179_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TimeLock)6186_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Governance.TimeLock))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TimeLock)6186_storage)"
      },
      "t_mapping(t_uint256,t_struct(TimeLock)6186_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governance.TimeLock)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeLock)6186_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TimeLock)6186_storage": {
        "encoding": "inplace",
        "label": "struct Governance.TimeLock",
        "members": [
          {
            "astId": 6181,
            "contract": "contracts/Governance.sol:Governance",
            "label": "multipliedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6183,
            "contract": "contracts/Governance.sol:Governance",
            "label": "level",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6185,
            "contract": "contracts/Governance.sol:Governance",
            "label": "unlockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(User)6179_storage": {
        "encoding": "inplace",
        "label": "struct Governance.User",
        "members": [
          {
            "astId": 6162,
            "contract": "contracts/Governance.sol:Governance",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6164,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelockedYGY",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6170,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelocks",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TimeLock)6186_storage))"
          },
          {
            "astId": 6174,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelockTop",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 6178,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timelockCount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}