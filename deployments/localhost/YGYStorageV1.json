{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NFTUsageInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAMVaultStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YGYReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_NFTs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_RAMToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_YGYRAMPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_YGYToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_YGYWETHPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_dXIOTToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ygy",
          "type": "bool"
        }
      ],
      "name": "addAdditionalRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressStorageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "booleanMapStorageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boostLevelCosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "boostLevelMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "checkRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRAM",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingYGY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeRewardsSinceStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeYGYRewardsSinceStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochCalculationStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "getAddressStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getBooleanMapValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getBoostLevelCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getBoostLevelMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getNFTAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getNFTBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNFTProperty",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getNFTPropertyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getNFTsInUse",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct YGYStorageV1.NFTUsage[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPointt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_accRAMPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_accYGYPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_effectiveAdditionalTokensFromBoosts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeRAMVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastTicketLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityContributedEthValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftPropertyChoices",
      "outputs": [
        {
          "internalType": "string",
          "name": "pType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "extra",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingYGYRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRAMPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accYGYPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withdrawable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "effectiveAdditionalTokensFromBoosts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ram",
      "outputs": [
        {
          "internalType": "contract INBUNIERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsInThisEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        }
      ],
      "name": "setBoostFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setCumulativeRewardsSinceStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEpochCalculationStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEpochRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "setLastTicketLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_delete",
          "type": "bool"
        }
      ],
      "name": "setLiquidityContributedEthValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftFactory",
          "type": "address"
        }
      ],
      "name": "setModifierContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "setNFTInUse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "pType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "pValue",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extra",
              "type": "bytes32"
            }
          ],
          "internalType": "struct YGYStorageV1.NFTProperty[]",
          "name": "_properties",
          "type": "tuple[]"
        }
      ],
      "name": "setNFTPropertiesForContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        }
      ],
      "name": "setPoolAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setRAMBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setRAMVaultStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setRewardsInThisEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "RAMToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "YGYToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "YGYRAMPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "YGYWethPair",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "nfts",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "dXIOTToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setYGYBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setYGYReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uintStorageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_boostMultipliers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_boostCosts",
          "type": "uint256[]"
        }
      ],
      "name": "updateBoosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRAMPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accYGYPerShare",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "withdrawable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "effectiveAdditionalTokensFromBoosts",
              "type": "uint256"
            }
          ],
          "internalType": "struct YGYStorageV1.PoolInfo",
          "name": "_userInfo",
          "type": "tuple"
        }
      ],
      "name": "updatePoolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allYGYRewards",
          "type": "uint256"
        }
      ],
      "name": "updatePoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebtYGY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boostAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boostLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spentMultiplierTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct YGYStorageV1.UserInfo",
          "name": "_userInfo",
          "type": "tuple"
        }
      ],
      "name": "updateUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebtYGY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spentMultiplierTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ygy",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1298a2cf8f7d778c83be664c9915bbbd77c24e6cd1863624b2c1f1970011e093",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "2917921",
    "logsBloom": "0x
    "blockHash": "0xfaaaf890413c4b941385549a26e0e077bfd58fed558e7d141e464eb5c793cda5",
    "transactionHash": "0x1298a2cf8f7d778c83be664c9915bbbd77c24e6cd1863624b2c1f1970011e093",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "2917921",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8a21a3f9e14869920d063900d00a3322",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTUsageInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAMVaultStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YGYReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_NFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RAMToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_YGYRAMPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_YGYToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_YGYWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dXIOTToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ygy\",\"type\":\"bool\"}],\"name\":\"addAdditionalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressStorageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"booleanMapStorageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostLevelCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostLevelMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRAM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingYGY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardsSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeYGYRewardsSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCalculationStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getAddressStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBooleanMapValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getBoostLevelCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getBoostLevelMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNFTBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNFTProperty\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getNFTPropertyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNFTsInUse\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct YGYStorageV1.NFTUsage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPointt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accRAMPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accYGYPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveAdditionalTokensFromBoosts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeRAMVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTicketLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityContributedEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftPropertyChoices\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingYGYRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRAMPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accYGYPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAdditionalTokensFromBoosts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ram\",\"outputs\":[{\"internalType\":\"contract INBUNIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInThisEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"setBoostFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCumulativeRewardsSinceStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEpochCalculationStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEpochRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setLastTicketLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_delete\",\"type\":\"bool\"}],\"name\":\"setLiquidityContributedEthValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftFactory\",\"type\":\"address\"}],\"name\":\"setModifierContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setNFTInUse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"pType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct YGYStorageV1.NFTProperty[]\",\"name\":\"_properties\",\"type\":\"tuple[]\"}],\"name\":\"setNFTPropertiesForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"setPoolAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRAMBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRAMVaultStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardsInThisEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"RAMToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"YGYToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"YGYRAMPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"YGYWethPair\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"dXIOTToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setYGYBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setYGYReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uintStorageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_boostMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_boostCosts\",\"type\":\"uint256[]\"}],\"name\":\"updateBoosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRAMPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accYGYPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAdditionalTokensFromBoosts\",\"type\":\"uint256\"}],\"internalType\":\"struct YGYStorageV1.PoolInfo\",\"name\":\"_userInfo\",\"type\":\"tuple\"}],\"name\":\"updatePoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allYGYRewards\",\"type\":\"uint256\"}],\"name\":\"updatePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtYGY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentMultiplierTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct YGYStorageV1.UserInfo\",\"name\":\"_userInfo\",\"type\":\"tuple\"}],\"name\":\"updateUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtYGY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentMultiplierTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ygy\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YGYStorageV1.sol\":\"YGYStorageV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"contracts/YGYStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\nStorage contract for the YGY system\\n*/\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/INBUNIERC20.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract YGYStorageV1 is AccessControlUpgradeSafe {\\n    /* STORAGE CONFIG */\\n    using SafeMath for uint256;\\n    using PoolHelper for PoolInfo;\\n\\n    bytes32 public constant MODIFIER_ROLE = keccak256(\\\"MODIFIER_ROLE\\\");\\n\\n    function setModifierContracts(\\n        address _vault,\\n        address _router,\\n        address _nftFactory\\n    ) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Nono\\\");\\n        _setupRole(MODIFIER_ROLE, _vault);\\n        _setupRole(MODIFIER_ROLE, _router);\\n        _setupRole(MODIFIER_ROLE, _nftFactory);\\n    }\\n\\n    function init() external initializer {\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MODIFIER_ROLE, _msgSender());\\n    }\\n\\n    /* RAMVAULT */\\n\\n    // User properties per vault/pool.\\n    struct UserInfo {\\n        uint256 amount; // How many  tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtYGY;\\n        uint256 boostAmount;\\n        uint256 boostLevel;\\n        uint256 spentMultiplierTokens;\\n    }\\n\\n    struct NFTUsage {\\n        uint256 nftId;\\n        uint256 epoch;\\n    }\\n\\n    // Epoch -> User -> NFT ids in use.\\n    mapping(uint256 => mapping(address => NFTUsage[])) public NFTUsageInfo;\\n\\n    function setNFTInUse(uint256 _nftId, address _user) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        NFTUsageInfo[epoch][_user].push(NFTUsage({ nftId: _nftId, epoch: epoch }));\\n    }\\n\\n    function getNFTsInUse(address _user) external view returns (NFTUsage[] memory) {\\n        return NFTUsageInfo[epoch][_user];\\n    }\\n\\n    function getNFTBoost(address _user) external view returns (uint256) {\\n        uint256 NFTBoost;\\n        NFTUsage[] memory nftInfo = NFTUsageInfo[epoch][_user];\\n        for(uint i; i < nftInfo.length; i++) {\\n            if(epoch == nftInfo[i].epoch) {\\n                if(nftInfo[i].nftId == 5 || nftInfo[i].nftId == 6) {\\n                    NFTBoost = NFTBoost.add(10);\\n                }\\n            }\\n        }\\n        return NFTBoost;\\n    }\\n\\n    // Pool/Vault/Whatever-id -> userrAddress -> userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    function updateUserInfo(\\n        uint256 _poolId,\\n        address _userAddress,\\n        UserInfo memory _userInfo\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        userInfo[_poolId][_userAddress] = _userInfo;\\n    }\\n\\n    // PoolId -> UserAddress -> Spender -> Allowance\\n    mapping(uint256 => mapping(address => mapping(address => uint256)))\\n        public poolAllowance;\\n\\n    function setPoolAllowance(\\n        uint256 _pid,\\n        address _user,\\n        address _spender,\\n        uint256 _allowance\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolAllowance[_pid][_user][_spender] = _allowance;\\n    }\\n\\n    // Pool properties\\n    struct PoolInfo {\\n        IERC20 token; // Address of  token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. RAMs to distribute per block.\\n        uint256 accRAMPerShare; // Accumulated RAMs per share, times 1e12. See below.\\n        uint256 accYGYPerShare; // Accumulated YGYs per share, times 1e12. See below.\\n        bool withdrawable; // Is this pool withdrawable?\\n        uint256 effectiveAdditionalTokensFromBoosts; // Track the total additional accounting staked tokens from boosts.\\n    }\\n    // All pool properties\\n    PoolInfo[] public poolInfo;\\n\\n    function updatePoolInfo(uint256 _poolId, PoolInfo memory _userInfo)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolInfo[_poolId] = _userInfo;\\n    }\\n\\n    function setPool(\\n        uint256 _poolId,\\n        uint256 _allocPoint,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        totalAllocPoint.sub(poolInfo[_poolId].allocPoint).add(_allocPoint);\\n        poolInfo[_poolId].allocPoint = _allocPoint;\\n        poolInfo[_poolId].withdrawable = _withdrawable;\\n    }\\n\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\n        }\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            YGYStorageV1.PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                accRAMPerShare: 0,\\n                accYGYPerShare: 0,\\n                withdrawable: _withdrawable,\\n                effectiveAdditionalTokensFromBoosts: 0\\n            })\\n        );\\n    }\\n\\n    function updatePoolRewards(uint256 allRewards, uint256 allYGYRewards)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        pendingRewards = pendingRewards.sub(allRewards);\\n        pendingYGYRewards = pendingYGYRewards.sub(allYGYRewards);\\n    }\\n\\n    function addPendingRewards(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n        pendingRewards = pendingRewards.add(_amount);\\n        rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n\\n        if (YGYReserve > _amount) {\\n            pendingYGYRewards = pendingYGYRewards.add(_amount);\\n            YGYReserve = YGYReserve.sub(_amount);\\n        } else if (YGYReserve > 0) {\\n            pendingYGYRewards = pendingYGYRewards.add(YGYReserve);\\n            YGYReserve = 0;\\n        }\\n    }\\n\\n    function addAdditionalRewards(uint256 _amount, bool _ygy) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_ygy) {\\n            YGYReserve = YGYReserve.add(_amount);\\n        } else {\\n            pendingRewards = pendingRewards.add(_amount);\\n            rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n        }\\n    }\\n\\n    function getPoolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolInfo(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            IERC20 _token,\\n            uint256 _allocPointt,\\n            uint256 _accRAMPerShare,\\n            uint256 _accYGYPerShare,\\n            bool _withdrawable,\\n            uint256 _effectiveAdditionalTokensFromBoosts\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_poolId];\\n        return (\\n            pool.token,\\n            pool.allocPoint,\\n            pool.accRAMPerShare,\\n            pool.accYGYPerShare,\\n            pool.withdrawable,\\n            pool.effectiveAdditionalTokensFromBoosts\\n        );\\n    }\\n\\n    // Total allocattion points for the whole contract\\n    uint256 public totalAllocPoint;\\n\\n    // Pending rewards.\\n    uint256 public pendingRewards;\\n    uint256 public pendingYGYRewards;\\n\\n    // Extra balance-keeping for extra-token rewards\\n    uint256 public YGYReserve;\\n\\n    function setYGYReserve(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        YGYReserve = _amount;\\n    }\\n\\n    // Reward token balance-keeping\\n    uint256 internal ramBalance;\\n\\n    function setRAMBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ramBalance = _amount;\\n    }\\n\\n    uint256 internal ygyBalance;\\n\\n    function setYGYBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ygyBalance = _amount;\\n    }\\n\\n    uint256 public RAMVaultStartBlock;\\n\\n    function setRAMVaultStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        RAMVaultStartBlock = block.number;\\n    }\\n\\n    uint256 public epochCalculationStartBlock;\\n\\n    function setEpochCalculationStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochCalculationStartBlock = block.number;\\n    }\\n\\n    uint256 public cumulativeRewardsSinceStart;\\n    uint256 public cumulativeYGYRewardsSinceStart;\\n\\n    function setCumulativeRewardsSinceStart() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        cumulativeRewardsSinceStart =\\n            cumulativeRewardsSinceStart +\\n            rewardsInThisEpoch;\\n\\n        cumulativeYGYRewardsSinceStart =\\n            cumulativeYGYRewardsSinceStart +\\n            rewardsInThisEpoch;\\n    }\\n\\n    uint256 public rewardsInThisEpoch;\\n\\n    function setRewardsInThisEpoch(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        rewardsInThisEpoch = _amount;\\n    }\\n\\n    uint256 public epoch;\\n\\n    // TOKENS\\n    INBUNIERC20 public ram; // The RAM token\\n    IERC20 public ygy; // The YGY token\\n    address public _YGYRAMPair;\\n    address public _YGYToken;\\n    address public _YGYWETHPair;\\n    address public _RAMToken;\\n    IWETH public _WETH;\\n    IERC20 public _dXIOTToken;\\n\\n    function initializeRAMVault() external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        RAMVaultStartBlock = block.number;\\n\\n        boostLevelCosts[1] = 5 * 1e18; // 5 RAM tokens\\n        boostLevelCosts[2] = 15 * 1e18; // 15 RAM tokens\\n        boostLevelCosts[3] = 30 * 1e18; // 30 RAM tokens\\n        boostLevelCosts[4] = 60 * 1e18; // 60 RAM tokens\\n        boostLevelMultipliers[1] = 5; // 5%\\n        boostLevelMultipliers[2] = 15; // 15%\\n        boostLevelMultipliers[3] = 30; // 30%\\n        boostLevelMultipliers[4] = 60; // 60%\\n    }\\n\\n    function setTokens(\\n        address RAMToken,\\n        address YGYToken,\\n        address WETH,\\n        address YGYRAMPair,\\n        address YGYWethPair,\\n        address[] memory nfts,\\n        address dXIOTToken\\n    ) external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        ram = INBUNIERC20(RAMToken);\\n        ygy = IERC20(YGYToken);\\n        _RAMToken = RAMToken;\\n        _YGYToken = YGYToken;\\n        _WETH = IWETH(WETH);\\n        _YGYRAMPair = YGYRAMPair;\\n        _YGYWETHPair = YGYWethPair;\\n        _dXIOTToken = IERC20(dXIOTToken);\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            _NFTs[i + 1] = nfts[i];\\n        }\\n    }\\n\\n    // Boosts\\n    uint256 public boostFees;\\n\\n    function setBoostFees(uint256 _amount, bool _add) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_add) {\\n            boostFees = boostFees.add(_amount);\\n        } else {\\n            boostFees = _amount;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelCosts;\\n\\n    function checkRewards(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pendingRAM, uint256 pendingYGY)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 effectiveAmount = user.amount.add(user.boostAmount);\\n        uint256 YGYRewards;\\n        if (pool.accYGYPerShare > 0) {\\n            YGYRewards = effectiveAmount.mul(pool.accYGYPerShare).div(1e12).sub(\\n                user.rewardDebtYGY\\n            );\\n        }\\n        return (\\n            effectiveAmount.mul(pool.accRAMPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            ),\\n            YGYRewards\\n        );\\n    }\\n\\n    function getBoostLevelCost(uint256 _level) external view returns (uint256) {\\n        return boostLevelCosts[_level];\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelMultipliers;\\n\\n    function getBoostLevelMultiplier(uint256 _level)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return boostLevelMultipliers[_level];\\n    }\\n\\n    function updateBoosts(\\n        uint256[] memory _boostMultipliers,\\n        uint256[] memory _boostCosts\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        // Update boost costs\\n        for (uint8 i; i <= _boostMultipliers.length; i++) {\\n            boostLevelCosts[i + 1] = _boostCosts[i];\\n            boostLevelMultipliers[i + 1] = _boostMultipliers[i];\\n        }\\n    }\\n\\n    // For easy graphing historical epoch rewards\\n    mapping(uint256 => uint256) public epochRewards;\\n\\n    function setEpochRewards() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochRewards[epoch] = rewardsInThisEpoch;\\n        epoch++;\\n    }\\n\\n    /*\\n         ROUTER\\n    */\\n\\n    // Mapping of (user => last ticket level)\\n    mapping(address => uint256) public lastTicketLevel;\\n\\n    // Setter for contracts using\\n    function setLastTicketLevel(address _user, uint256 _level) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        lastTicketLevel[_user] = _level;\\n    }\\n\\n    // Total eth contributed to a vault.\\n    mapping(address => uint256) public liquidityContributedEthValue;\\n\\n    // Set value for mapping from external contracts\\n    function setLiquidityContributedEthValue(\\n        address _spender,\\n        uint256 _amount,\\n        bool _delete\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_delete) {\\n            delete liquidityContributedEthValue[_spender];\\n        } else {\\n            liquidityContributedEthValue[_spender] = liquidityContributedEthValue[_spender]\\n                .add(_amount);\\n        }\\n    }\\n\\n    // NFT STUFF\\n    // Mapping of (level number => NFT address)\\n    mapping(uint256 => address) public _NFTs;\\n\\n    // Property object, extra field for arbirtrary values in future\\n    struct NFTProperty {\\n        string pType;\\n        uint256 pValue;\\n        bytes32 extra;\\n    }\\n\\n    mapping(address => NFTProperty[]) public nftPropertyChoices;\\n\\n    function setNFTPropertiesForContract(\\n        address _contractAddress,\\n        NFTProperty[] memory _properties\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 i; i < _properties.length; i++) {\\n            nftPropertyChoices[_contractAddress].push(_properties[i]);\\n        }\\n    }\\n\\n    function getNFTAddress(uint256 _contractId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _NFTs[_contractId];\\n    }\\n\\n    function getNFTProperty(uint256 _contractId, uint256 _index)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            bytes32\\n        )\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty memory properties = nftPropertyChoices[NFTAddress][_index];\\n\\n        return (properties.pType, properties.pValue, properties.extra);\\n    }\\n\\n    function getNFTPropertyCount(uint256 _contractId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty[] memory properties = nftPropertyChoices[NFTAddress];\\n        return properties.length;\\n    }\\n\\n    // General-purpose mappings\\n    mapping(bytes32 => mapping(address => bool)) booleanMapStorage;\\n    uint256[] public booleanMapStorageCount;\\n\\n    function getBooleanMapValue(string memory _key, address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        booleanMapStorage[key][_address];\\n    }\\n\\n    mapping(bytes32 => address) addressStorage;\\n    uint256[] public addressStorageCount;\\n\\n    function getAddressStorage(string memory _key)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        return addressStorage[key];\\n    }\\n\\n    mapping(bytes32 => uint256) uintStorage;\\n    uint256[] public uintStorageCount;\\n\\n    struct StateStruct {\\n        bytes32 name;\\n        mapping(bytes32 => bytes32) value;\\n    }\\n\\n    struct ObjectStruct {\\n        StateStruct state;\\n        address owner;\\n        bool isObject;\\n    }\\n\\n    function stringToBytes32(string memory source)\\n        public\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x951765694fe17f3543dd39c4de9d5ddb895f0591d6941104c198fdc9d7836a09\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INBUNIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INBUNIERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Log(string log);\\n}\\n\",\"keccak256\":\"0x8b72d4c7a32eb1cd9c2ef9f1e02101dda1f85e396d51ed3c6c99bfa6a271ea4f\",\"license\":\"MIT\"},\"contracts/libraries/PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\nlibrary PoolHelper {\\n    using SafeMath for uint256;\\n\\n    function getPool(uint256 _poolId, YGYStorageV1 _storage)\\n        internal\\n        view\\n        returns (YGYStorageV1.PoolInfo memory)\\n    {\\n        (\\n            IERC20 token,\\n            uint256 allocPoint,\\n            uint256 accRAMPerShare,\\n            uint256 accYGYPerShare,\\n            bool withdrawable,\\n            uint256 effectiveAdditionalTokensFromBoosts\\n        ) = _storage.poolInfo(_poolId);\\n        return\\n            YGYStorageV1.PoolInfo({\\n                token: token,\\n                allocPoint: allocPoint,\\n                accRAMPerShare: accRAMPerShare,\\n                accYGYPerShare: accYGYPerShare,\\n                withdrawable: withdrawable,\\n                effectiveAdditionalTokensFromBoosts: effectiveAdditionalTokensFromBoosts\\n            });\\n    }\\n\\n    function averageFeesPerBlockSinceStart(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage\\n                .cumulativeRewardsSinceStart()\\n                .add(_storage.rewardsInThisEpoch())\\n                .div(block.number.sub(_storage.RAMVaultStartBlock()));\\n    }\\n\\n    // Returns averge fees in this epoch\\n    function averageFeesPerBlockEpoch(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage.rewardsInThisEpoch().div(\\n                block.number.sub(_storage.epochCalculationStartBlock())\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfe19d645ce5e4eb55491fb350095796a1fdbd938aeb3c6f73d2c28988e2d5f61\",\"license\":\"UNLICENSED\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2b2dfdece146425af2c3468ccd72c52cbf709eb38421a300e21ef7f57b033fce\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd3f9eb69241af8de5174a6cfa3da3cbc94e351dee495002d8675b665865ba417\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506133d2806100206000396000f3fe608060405234801561001057600080fd5b506004361061048b5760003560e01c80638792a26511610262578063b81a0b4c11610151578063d6cf8021116100ce578063eded3fda11610092578063eded3fda146109a4578063ee02ea1b146109ac578063f63e3d6c146109bf578063f7db38cb146109c7578063fa69669c146109cf578063fb70c3bf146109d75761048b565b8063d6cf80211461095b578063e0af36161461096e578063e1c7392a14610976578063e671fab51461097e578063e941c856146109915761048b565b8063cc40f66411610115578063cc40f66414610907578063cfb519281461091a578063d4665bb71461092d578063d547741f14610940578063d662f4f6146109535761048b565b8063b81a0b4c146108be578063bcb49086146108c6578063bd57954e146108d9578063c8ffb873146108ec578063ca15c873146108f45761048b565b80639649d76c116101df578063a5f8ace8116101a3578063a5f8ace81461086a578063ad1414b21461087d578063b2f4b44a14610890578063b3944d52146108a3578063b4afd978146108ab5761048b565b80639649d76c146108215780639d18f773146108295780639df3e6d01461083c5780639eec69051461084f578063a217fddf146108625761048b565b8063900cf0cf11610226578063900cf0cf146107ae5780639010d07c146107b657806391328af2146107c957806391d14854146107dc57806393f1a40b146107fc5761048b565b80638792a26514610770578063884817dc146107835780638b6ff57b1461078b5780638f33b5e5146107935780638f838a9f1461079b5761048b565b80633d780dfc1161037e57806360443a45116102fb57806370686e92116102bf57806370686e921461071c5780637575aa8a1461072f5780637828fec014610737578063795d79f51461074a5780637abceffd1461075d5761048b565b806360443a45146106c8578063608c8d3a146106db5780636798f19f146106e35780636a9d1f6f146106f65780636b42ee55146107095761048b565b80634dc47d34116103425780634dc47d34146106655780635105a975146106785780635498d4c01461068b57806358739fc8146106ad5780635d577c18146106c05761048b565b80633d780dfc14610611578063423d6fa014610624578063469fcdcb1461063757806346ca6bea1461064a5780634a2ac43a1461065d5761048b565b80631dbf779e1161040c57806330ff3d97116103d057806330ff3d97146105bb57806331db122c146105db57806336568abe146105e357806337d28932146105f65780633b24bd4a146106095761048b565b80631dbf779e14610565578063248a9ca31461056d5780632f2ff15d146105805780632f380b35146105935780632f4f8a7a146105a65761048b565b806310178d9c1161045357806310178d9c146104f15780631526fe2714610512578063158dd3931461053757806317caf6f11461054a57806319a5c13a146105525761048b565b8063045fda0e146104905780630788733a1461049a578063094601f1146104ad57806309e3de41146104c05780630a08f1d4146104de575b600080fd5b6104986109df565b005b6104986104a8366004612d62565b610a08565b6104986104bb366004612c0d565b610a86565b6104c8610aae565b6040516104d59190612ff0565b60405180910390f35b6104c86104ec366004612c0d565b610ab4565b6105046104ff366004612c25565b610bdb565b6040516104d59291906132dc565b610525610520366004612c0d565b610cad565b6040516104d596959493929190612ff9565b6104c8610545366004612cf5565b610d00565b6104c8610d23565b610498610560366004612a60565b610d29565b6104c8610ddd565b6104c861057b366004612c0d565b610de3565b61049861058e366004612c25565b610df8565b6105256105a1366004612c0d565b610e49565b6105ae610ee9565b6040516104d59190612f82565b6105ce6105c93660046128f1565b610ef8565b6040516104d59190612f96565b6104c8610f8b565b6104986105f1366004612c25565b610f91565b610498610604366004612e23565b610fd3565b6105ae611017565b61049861061f36600461290d565b611026565b610498610632366004612c0d565b611097565b6104c8610645366004612c0d565b61113f565b610498610658366004612f0a565b611151565b61049861120a565b6104c8610673366004612c0d565b61124f565b610498610686366004612c54565b611261565b61069e610699366004612c54565b6112a8565b6040516104d593929190613041565b61069e6106bb366004612b4b565b6113d2565b6104c861149a565b6104986106d6366004612d1b565b6114a0565b6104c86114f5565b6104c86106f1366004612c0d565b6114fb565b6104c8610704366004612c0d565b61150d565b6104c8610717366004612c0d565b61151f565b61049861072a366004612b76565b61153d565b6104c86115c5565b610498610745366004612e23565b6115d7565b6105ae610758366004612c0d565b611639565b61049861076b366004612e47565b611654565b61049861077e366004612c25565b611844565b6104986118c0565b6104c86118f9565b6105ae6118ff565b6104986107a9366004612c0d565b61190e565b6104c8611936565b6105ae6107c4366004612c54565b61193c565b6104c86107d73660046128f1565b61195d565b6107ef6107ea366004612c25565b611a7a565b6040516104d59190612fe5565b61080f61080a366004612c25565b611a92565b6040516104d5969594939291906132ea565b6104c8611ad2565b6105ae610837366004612c0d565b611ad8565b61049861084a366004612c0d565b611af3565b61050461085d366004612dec565b611b1b565b6104c8611b62565b610498610878366004612957565b611b67565b6104c861088b3660046128f1565b611c91565b61049861089e366004612bac565b611ca3565b6104c8611d42565b6104986108b9366004612b4b565b611d48565b6105ae611d87565b6104c86108d4366004612c0d565b611d96565b6104986108e7366004612c0d565b611da8565b6104c8611dd0565b6104c8610902366004612c0d565b611dd6565b6104c86109153660046128f1565b611ded565b6104c8610928366004612c75565b611dff565b61049861093b366004612e7d565b611e1d565b61049861094e366004612c25565b611ec4565b610498611efe565b6104c8610969366004612c0d565b612095565b6105ae6120a2565b6104986120b1565b6107ef61098c366004612cb0565b612167565b6104c861099f366004612c0d565b61219b565b6104c86121a8565b6105ae6109ba366004612c75565b6121ae565b6104986121d9565b6105ae612202565b6105ae612211565b6105ae612220565b6109f960008051602061337d8339815191526107ea61222f565b610a0257600080fd5b4360a255565b610a2260008051602061337d8339815191526107ea61222f565b610a2b57600080fd5b60009283526098602090815260408085206001600160a01b0390941685529281529282902081518155928101516001840155908101516002830155606081015160038301556080810151600483015560a00151600590910155565b610aa060008051602061337d8339815191526107ea61222f565b610aa957600080fd5b60a055565b60af5481565b600081815260b560209081526040808320546001600160a01b031680845260b68352818420805483518186028101860190945280845291936060939290869084015b82821015610bcb5760008481526020908190206040805160038602909201805460026001821615610100026000190190911604601f8101859004909402830160809081019092526060830184815292939092849290918491840182828015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b505050505081526020016001820154815260200160028201548152505081526020019060010190610af6565b505091519450505050505b919050565b6000806000609a8581548110610bed57fe5b600091825260208083208884526098825260408085206001600160a01b038a16865290925290832060038101548154600690940290920194509291610c3191612233565b905060008084600301541115610c7857610c758360020154610c6f64e8d4a51000610c6988600301548761225890919063ffffffff16565b90612292565b906122d4565b90505b610ca08360010154610c6f64e8d4a51000610c6988600201548761225890919063ffffffff16565b9890975095505050505050565b609a8181548110610cba57fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909260ff9091169086565b609960209081526000938452604080852082529284528284209052825290205481565b609b5481565b610d4360008051602061337d8339815191526107ea61222f565b610d4c57600080fd5b60005b8151811015610dd8576001600160a01b038316600090815260b6602052604090208251839083908110610d7e57fe5b602090810291909101810151825460018101845560009384529282902081518051929460030290910192610db792849290910190612717565b50602082015160018083019190915560409092015160029091015501610d4f565b505050565b609e5481565b60009081526065602052604090206002015490565b600082815260656020526040902060020154610e16906107ea61222f565b610e3b5760405162461bcd60e51b8152600401610e32906130d3565b60405180910390fd5b610e458282612316565b5050565b600080600080600080610e5a612795565b609a8881548110610e6757fe5b60009182526020918290206040805160c08101825260069390930290910180546001600160a01b031680845260018201549484018590526002820154928401839052600382015460608501819052600483015460ff1615156080860181905260059093015460a0909501859052909d949c50919a509098509650945092505050565b60a9546001600160a01b031681565b60a65460009081526097602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b82821015610f8057838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610f3a565b505050509050919050565b60a15481565b610f9961222f565b6001600160a01b0316816001600160a01b031614610fc95760405162461bcd60e51b8152600401610e329061328d565b610e45828261237f565b610fed60008051602061337d8339815191526107ea61222f565b610ff657600080fd5b80156110115760af546110099083612233565b60af55610e45565b5060af55565b60ab546001600160a01b031681565b61103360006107ea61222f565b61104f5760405162461bcd60e51b8152600401610e32906131a9565b61106760008051602061337d83398151915284610e3b565b61107f60008051602061337d83398151915283610e3b565b610dd860008051602061337d83398151915282610e3b565b6110b160008051602061337d8339815191526107ea61222f565b6110cd5760405162461bcd60e51b8152600401610e32906130a8565b609c546110da9082612233565b609c5560a5546110ea9082612233565b60a555609e5481101561111c57609d546111049082612233565b609d55609e5461111490826122d4565b609e5561113c565b609e541561113c57609e54609d5461113391612233565b609d556000609e555b50565b60b06020526000908152604090205481565b61116b60008051602061337d8339815191526107ea61222f565b61117457600080fd5b6111b1826111ab609a868154811061118857fe5b906000526020600020906006020160010154609b546122d490919063ffffffff16565b90612233565b5081609a84815481106111c057fe5b90600052602060002090600602016001018190555080609a84815481106111e357fe5b60009182526020909120600690910201600401805460ff1916911515919091179055505050565b61122460008051602061337d8339815191526107ea61222f565b61122d57600080fd5b60a55460a68054600090815260b2602052604090209190915580546001019055565b60b26020526000908152604090205481565b61127b60008051602061337d8339815191526107ea61222f565b61128457600080fd5b609c5461129190836122d4565b609c55609d546112a190826122d4565b609d555050565b600082815260b560205260408120546060919081906001600160a01b03166112ce6127d6565b6001600160a01b038216600090815260b6602052604090208054879081106112f257fe5b600091825260209182902060408051600393909302909101805460026001821615610100026000190190911604601f81018590049094028301608090810190925260608301848152929390928492909184918401828280156113955780601f1061136a57610100808354040283529160200191611395565b820191906000526020600020905b81548152906001019060200180831161137857829003601f168201915b5050505050815260200160018201548152602001600282015481525050905080600001518160200151826040015194509450945050509250925092565b60b660205281600052604060002081815481106113eb57fe5b60009182526020918290206003919091020180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919450925083918301828280156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b5050505050908060010154908060020154905083565b60a25481565b6114ba60008051602061337d8339815191526107ea61222f565b6114c357600080fd5b60009384526099602090815260408086206001600160a01b039586168752825280862093909416855291909152912055565b60a55481565b600090815260b1602052604090205490565b600090815260b0602052604090205490565b60ba818154811061152c57fe5b600091825260209091200154905081565b61155760008051602061337d8339815191526107ea61222f565b61156057600080fd5b8015611584576001600160a01b038316600090815260b46020526040812055610dd8565b6001600160a01b038316600090815260b460205260409020546115a79083612233565b6001600160a01b038416600090815260b46020526040902055505050565b60008051602061337d83398151915281565b6115f160008051602061337d8339815191526107ea61222f565b6115fa57600080fd5b801561161557609e5461160d9083612233565b609e55610e45565b609c546116229083612233565b609c5560a5546116329083612233565b60a5555050565b60b5602052600090815260409020546001600160a01b031681565b61166e60008051602061337d8339815191526107ea61222f565b61167757600080fd5b60005b609a548110156116db57826001600160a01b0316609a828154811061169b57fe5b60009182526020909120600690910201546001600160a01b031614156116d35760405162461bcd60e51b8152600401610e3290613256565b60010161167a565b50609b546116e99084612233565b609b556040805160c0810182526001600160a01b039384168152602081019485526000918101828152606082018381529315156080830190815260a08301848152609a8054600181018255955292517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be4600690950294850180546001600160a01b031916919097161790955594517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be583015593517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be682015590517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be782015590517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be88201805460ff191691151591909117905590517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be990910155565b61185e60008051602061337d8339815191526107ea61222f565b61186757600080fd5b60a65460008181526097602090815260408083206001600160a01b039095168352938152838220845180860190955294845283810192835284546001818101875595835291209251600290910290920191825551910155565b6118da60008051602061337d8339815191526107ea61222f565b6118e357600080fd5b60a55460a380548201905560a480549091019055565b609d5481565b60a7546001600160a01b031681565b61192860008051602061337d8339815191526107ea61222f565b61193157600080fd5b609f55565b60a65481565b600082815260656020526040812061195490836123e8565b90505b92915050565b60a65460009081526097602090815260408083206001600160a01b0385168452825280832080548251818502810185019093528083528493606093929190859084015b828210156119e6578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906119a0565b50505050905060005b8151811015611a7157818181518110611a0457fe5b60200260200101516020015160a6541415611a6957818181518110611a2557fe5b60200260200101516000015160051480611a565750818181518110611a4657fe5b6020026020010151600001516006145b15611a6957611a6683600a612233565b92505b6001016119ef565b50909392505050565b600082815260656020526040812061195490836123f4565b6098602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b60a45481565b600090815260b560205260409020546001600160a01b031690565b611b0d60008051602061337d8339815191526107ea61222f565b611b1657600080fd5b60a555565b60976020528260005260406000206020528160005260406000208181548110611b4057fe5b6000918252602090912060029091020180546001909101549093509150839050565b600081565b611b8160008051602061337d8339815191526107ea61222f565b80611b945750611b9460006107ea61222f565b611bb05760405162461bcd60e51b8152600401610e32906130a8565b60a780546001600160a01b03199081166001600160a01b038a811691821790935560a8805483168a851690811790915560ac8054841690921790915560aa80548316909117905560ad8054821688841617905560a98054821687841617905560ab8054821686841617905560ae805490911691831691909117905560005b8251811015611c8757828181518110611c4357fe5b602090810291909101810151600192909201600081815260b5909252604090912080546001600160a01b0319166001600160a01b0390931692909217909155611c2e565b5050505050505050565b60b46020526000908152604090205481565b611cbd60008051602061337d8339815191526107ea61222f565b611cc657600080fd5b60005b82518160ff1611610dd857818160ff1681518110611ce357fe5b602002602001015160b060008360010160ff16815260200190815260200160002081905550828160ff1681518110611d1757fe5b60209081029190910181015160ff6001909301928316600090815260b1909252604090912055611cc9565b609a5490565b611d6260008051602061337d8339815191526107ea61222f565b611d6b57600080fd5b6001600160a01b03909116600090815260b36020526040902055565b60ae546001600160a01b031681565b60b16020526000908152604090205481565b611dc260008051602061337d8339815191526107ea61222f565b611dcb57600080fd5b609e55565b60a35481565b600081815260656020526040812061195790612409565b60b36020526000908152604090205481565b80516000908290611e14575060009050610bd6565b50506020015190565b611e3760008051602061337d8339815191526107ea61222f565b611e4057600080fd5b80609a8381548110611e4e57fe5b600091825260209182902083516006929092020180546001600160a01b0319166001600160a01b039092169190911781559082015160018201556040820151600282015560608201516003820155608082015160048201805460ff191691151591909117905560a0909101516005909101555050565b600082815260656020526040902060020154611ee2906107ea61222f565b610fc95760405162461bcd60e51b8152600401610e3290613159565b611f1860008051602061337d8339815191526107ea61222f565b80611f2b5750611f2b60006107ea61222f565b611f475760405162461bcd60e51b8152600401610e32906130a8565b4360a155674563918244f400007f2ece0d27245ca4a357e8d077613a722d4d1521036879824658dc484c52c7c0a15567d02ab486cedc00007f6e01826bd384b53cadd411dfb0d7b9bb8347fa1fdfb968d963ab9753a36f3ee1556801a055690d9db800007f1b47d0ec8866f11488ba3f9889b2cb3acfff2dfb8ebe8a1c3bdcf69e2f06577e55680340aad21b3b7000007f4a1be165f25a7987e337edc4e6b4ebb4f17cf12ecbb3dc24632b9c6b8bcff4ce5560b160205260057fd7e297a316c321c40332cfb8dc1701afefe5c7db49edec748122ee7e43d355c455600f7f7ae7ad9a4c32d2f3e019743ac18a175616ca69d351bbf6528cf9a64ce6017f7255601e7f8ad2446af2a0369fe8964797f78858d5dc0e301ab1acc8cdf1f7252f94e5c061556004600052603c7f8a66bef5dd30a7468a9bb314b1a60dbb73161e7e2f190bd4e69027c3498b6fa555565b60b8818154811061152c57fe5b60ad546001600160a01b031681565b600054610100900460ff16806120ca57506120ca612414565b806120d8575060005460ff16155b6120f45760405162461bcd60e51b8152600401610e3290613208565b600054610100900460ff1615801561211f576000805460ff1961ff0019909116610100171660011790555b61212761241a565b612139600061213461222f565b610e3b565b61215360008051602061337d83398151915261213461222f565b801561113c576000805461ff001916905550565b60008061217384611dff565b600090815260b76020908152604082206001600160a01b039095169091529290925292915050565b60bc818154811061152c57fe5b609c5481565b6000806121ba83611dff565b600090815260b960205260409020546001600160a01b03169392505050565b6121f360008051602061337d8339815191526107ea61222f565b6121fc57600080fd5b4360a155565b60aa546001600160a01b031681565b60ac546001600160a01b031681565b60a8546001600160a01b031681565b3390565b6000828201838110156119545760405162461bcd60e51b8152600401610e3290613122565b60008261226757506000611957565b8282028284828161227457fe5b04146119545760405162461bcd60e51b8152600401610e32906131c7565b600061195483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612498565b600061195483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124cf565b600082815260656020526040902061232e90826124fb565b15610e455761233b61222f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206123979082612510565b15610e45576123a461222f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006119548383612525565b6000611954836001600160a01b03841661256a565b600061195782612582565b303b1590565b600054610100900460ff16806124335750612433612414565b80612441575060005460ff16155b61245d5760405162461bcd60e51b8152600401610e3290613208565b600054610100900460ff16158015612488576000805460ff1961ff0019909116610100171660011790555b612490612586565b612153612586565b600081836124b95760405162461bcd60e51b8152600401610e32919061302e565b5060008385816124c557fe5b0495945050505050565b600081848411156124f35760405162461bcd60e51b8152600401610e32919061302e565b505050900390565b6000611954836001600160a01b038416612607565b6000611954836001600160a01b038416612651565b815460009082106125485760405162461bcd60e51b8152600401610e3290613066565b82600001828154811061255757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600054610100900460ff168061259f575061259f612414565b806125ad575060005460ff16155b6125c95760405162461bcd60e51b8152600401610e3290613208565b600054610100900460ff16158015612153576000805460ff1961ff001990911661010017166001179055801561113c576000805461ff001916905550565b6000612613838361256a565b61264957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611957565b506000611957565b6000818152600183016020526040812054801561270d578354600019808301919081019060009087908390811061268457fe5b90600052602060002001549050808760000184815481106126a157fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806126d157fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611957565b6000915050611957565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061275857805160ff1916838001178555612785565b82800160010185558215612785579182015b8281111561278557825182559160200191906001019061276a565b506127919291506127fa565b5090565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b60405180606001604052806060815260200160008152602001600080191681525090565b5b8082111561279157600081556001016127fb565b803561195781613359565b600082601f83011261282a578081fd5b813561283d61283882613339565b613312565b81815291506020808301908481018184028601820187101561285e57600080fd5b60005b8481101561287d57813584529282019290820190600101612861565b505050505092915050565b600082601f830112612898578081fd5b813567ffffffffffffffff8111156128ae578182fd5b6128c1601f8201601f1916602001613312565b91508082528360208285010111156128d857600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215612902578081fd5b813561195481613359565b600080600060608486031215612921578182fd5b833561292c81613359565b9250602084013561293c81613359565b9150604084013561294c81613359565b809150509250925092565b600080600080600080600060e0888a031215612971578283fd5b873561297c81613359565b965060208881013561298d81613359565b9650604089013561299d81613359565b955060608901356129ad81613359565b945060808901356129bd81613359565b935060a089013567ffffffffffffffff8111156129d8578384fd5b8901601f81018b136129e8578384fd5b80356129f661283882613339565b81815283810190838501858402850186018f1015612a12578788fd5b8794505b83851015612a3c57612a288f8261280f565b835260019490940193918501918501612a16565b508096505050505050612a528960c08a0161280f565b905092959891949750929550565b60008060408385031215612a72578182fd5b8235612a7d81613359565b915060208381013567ffffffffffffffff80821115612a9a578384fd5b818601915086601f830112612aad578384fd5b8135612abb61283882613339565b81815284810190848601875b84811015612b3a57813587016060818e03601f19011215612ae657898afd5b612af06060613312565b8982013588811115612b00578b8cfd5b612b0e8f8c83860101612888565b8252506040828101358b8301526060909201359181019190915284529287019290870190600101612ac7565b50979a909950975050505050505050565b60008060408385031215612b5d578182fd5b8235612b6881613359565b946020939093013593505050565b600080600060608486031215612b8a578283fd5b8335612b9581613359565b925060208401359150604084013561294c8161336e565b60008060408385031215612bbe578182fd5b823567ffffffffffffffff80821115612bd5578384fd5b612be18683870161281a565b93506020850135915080821115612bf6578283fd5b50612c038582860161281a565b9150509250929050565b600060208284031215612c1e578081fd5b5035919050565b60008060408385031215612c37578182fd5b823591506020830135612c4981613359565b809150509250929050565b60008060408385031215612c66578182fd5b50508035926020909101359150565b600060208284031215612c86578081fd5b813567ffffffffffffffff811115612c9c578182fd5b612ca884828501612888565b949350505050565b60008060408385031215612cc2578182fd5b823567ffffffffffffffff811115612cd8578283fd5b612ce485828601612888565b9250506020830135612c4981613359565b600080600060608486031215612d09578081fd5b83359250602084013561293c81613359565b60008060008060808587031215612d30578182fd5b843593506020850135612d4281613359565b92506040850135612d5281613359565b9396929550929360600135925050565b6000806000838503610100811215612d78578182fd5b843593506020850135612d8a81613359565b925060c0603f1982011215612d9d578182fd5b50612da860c0613312565b60408501358152606085013560208201526080850135604082015260a0850135606082015260c0850135608082015260e085013560a0820152809150509250925092565b600080600060608486031215612e00578081fd5b833592506020840135612e1281613359565b929592945050506040919091013590565b60008060408385031215612e35578182fd5b823591506020830135612c498161336e565b600080600060608486031215612e5b578081fd5b833592506020840135612e6d81613359565b9150604084013561294c8161336e565b60008082840360e0811215612e90578283fd5b8335925060c0601f1982011215612ea5578182fd5b50612eb060c0613312565b6020840135612ebe81613359565b8082525060408401356020820152606084013560408201526080840135606082015260a08401358015158114612ef2578283fd5b608082015260c0939093013560a08401525092909150565b600080600060608486031215612f1e578081fd5b8335925060208401359150604084013561294c8161336e565b60008151808452815b81811015612f5c57602081850181015186830182015201612f40565b81811115612f6d5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015612fd857815180518552860151868501529284019290850190600101612fb3565b5091979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b039690961686526020860194909452604085019290925260608401521515608083015260a082015260c00190565b6000602082526119546020830184612f37565b6000606082526130546060830186612f37565b60208301949094525060400152919050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b602080825260119082015270283937b434b134ba32b21031b0b63632b960791b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252600490820152634e6f6e6f60e01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526018908201527f4572726f7220706f6f6c20616c72656164792061646465640000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b918252602082015260400190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561333157600080fd5b604052919050565b600067ffffffffffffffff82111561334f578081fd5b5060209081020190565b6001600160a01b038116811461113c57600080fd5b801515811461113c57600080fdfe62ca43aa15f7f495faa685ce5a258aa390fdc8d7094251dd23d32353f496ddfea26469706673582212206f45d36ef46ed8dc1976df9249269b27af836a9a7f6e334d41e7720d7a81185964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048b5760003560e01c80638792a26511610262578063b81a0b4c11610151578063d6cf8021116100ce578063eded3fda11610092578063eded3fda146109a4578063ee02ea1b146109ac578063f63e3d6c146109bf578063f7db38cb146109c7578063fa69669c146109cf578063fb70c3bf146109d75761048b565b8063d6cf80211461095b578063e0af36161461096e578063e1c7392a14610976578063e671fab51461097e578063e941c856146109915761048b565b8063cc40f66411610115578063cc40f66414610907578063cfb519281461091a578063d4665bb71461092d578063d547741f14610940578063d662f4f6146109535761048b565b8063b81a0b4c146108be578063bcb49086146108c6578063bd57954e146108d9578063c8ffb873146108ec578063ca15c873146108f45761048b565b80639649d76c116101df578063a5f8ace8116101a3578063a5f8ace81461086a578063ad1414b21461087d578063b2f4b44a14610890578063b3944d52146108a3578063b4afd978146108ab5761048b565b80639649d76c146108215780639d18f773146108295780639df3e6d01461083c5780639eec69051461084f578063a217fddf146108625761048b565b8063900cf0cf11610226578063900cf0cf146107ae5780639010d07c146107b657806391328af2146107c957806391d14854146107dc57806393f1a40b146107fc5761048b565b80638792a26514610770578063884817dc146107835780638b6ff57b1461078b5780638f33b5e5146107935780638f838a9f1461079b5761048b565b80633d780dfc1161037e57806360443a45116102fb57806370686e92116102bf57806370686e921461071c5780637575aa8a1461072f5780637828fec014610737578063795d79f51461074a5780637abceffd1461075d5761048b565b806360443a45146106c8578063608c8d3a146106db5780636798f19f146106e35780636a9d1f6f146106f65780636b42ee55146107095761048b565b80634dc47d34116103425780634dc47d34146106655780635105a975146106785780635498d4c01461068b57806358739fc8146106ad5780635d577c18146106c05761048b565b80633d780dfc14610611578063423d6fa014610624578063469fcdcb1461063757806346ca6bea1461064a5780634a2ac43a1461065d5761048b565b80631dbf779e1161040c57806330ff3d97116103d057806330ff3d97146105bb57806331db122c146105db57806336568abe146105e357806337d28932146105f65780633b24bd4a146106095761048b565b80631dbf779e14610565578063248a9ca31461056d5780632f2ff15d146105805780632f380b35146105935780632f4f8a7a146105a65761048b565b806310178d9c1161045357806310178d9c146104f15780631526fe2714610512578063158dd3931461053757806317caf6f11461054a57806319a5c13a146105525761048b565b8063045fda0e146104905780630788733a1461049a578063094601f1146104ad57806309e3de41146104c05780630a08f1d4146104de575b600080fd5b6104986109df565b005b6104986104a8366004612d62565b610a08565b6104986104bb366004612c0d565b610a86565b6104c8610aae565b6040516104d59190612ff0565b60405180910390f35b6104c86104ec366004612c0d565b610ab4565b6105046104ff366004612c25565b610bdb565b6040516104d59291906132dc565b610525610520366004612c0d565b610cad565b6040516104d596959493929190612ff9565b6104c8610545366004612cf5565b610d00565b6104c8610d23565b610498610560366004612a60565b610d29565b6104c8610ddd565b6104c861057b366004612c0d565b610de3565b61049861058e366004612c25565b610df8565b6105256105a1366004612c0d565b610e49565b6105ae610ee9565b6040516104d59190612f82565b6105ce6105c93660046128f1565b610ef8565b6040516104d59190612f96565b6104c8610f8b565b6104986105f1366004612c25565b610f91565b610498610604366004612e23565b610fd3565b6105ae611017565b61049861061f36600461290d565b611026565b610498610632366004612c0d565b611097565b6104c8610645366004612c0d565b61113f565b610498610658366004612f0a565b611151565b61049861120a565b6104c8610673366004612c0d565b61124f565b610498610686366004612c54565b611261565b61069e610699366004612c54565b6112a8565b6040516104d593929190613041565b61069e6106bb366004612b4b565b6113d2565b6104c861149a565b6104986106d6366004612d1b565b6114a0565b6104c86114f5565b6104c86106f1366004612c0d565b6114fb565b6104c8610704366004612c0d565b61150d565b6104c8610717366004612c0d565b61151f565b61049861072a366004612b76565b61153d565b6104c86115c5565b610498610745366004612e23565b6115d7565b6105ae610758366004612c0d565b611639565b61049861076b366004612e47565b611654565b61049861077e366004612c25565b611844565b6104986118c0565b6104c86118f9565b6105ae6118ff565b6104986107a9366004612c0d565b61190e565b6104c8611936565b6105ae6107c4366004612c54565b61193c565b6104c86107d73660046128f1565b61195d565b6107ef6107ea366004612c25565b611a7a565b6040516104d59190612fe5565b61080f61080a366004612c25565b611a92565b6040516104d5969594939291906132ea565b6104c8611ad2565b6105ae610837366004612c0d565b611ad8565b61049861084a366004612c0d565b611af3565b61050461085d366004612dec565b611b1b565b6104c8611b62565b610498610878366004612957565b611b67565b6104c861088b3660046128f1565b611c91565b61049861089e366004612bac565b611ca3565b6104c8611d42565b6104986108b9366004612b4b565b611d48565b6105ae611d87565b6104c86108d4366004612c0d565b611d96565b6104986108e7366004612c0d565b611da8565b6104c8611dd0565b6104c8610902366004612c0d565b611dd6565b6104c86109153660046128f1565b611ded565b6104c8610928366004612c75565b611dff565b61049861093b366004612e7d565b611e1d565b61049861094e366004612c25565b611ec4565b610498611efe565b6104c8610969366004612c0d565b612095565b6105ae6120a2565b6104986120b1565b6107ef61098c366004612cb0565b612167565b6104c861099f366004612c0d565b61219b565b6104c86121a8565b6105ae6109ba366004612c75565b6121ae565b6104986121d9565b6105ae612202565b6105ae612211565b6105ae612220565b6109f960008051602061337d8339815191526107ea61222f565b610a0257600080fd5b4360a255565b610a2260008051602061337d8339815191526107ea61222f565b610a2b57600080fd5b60009283526098602090815260408085206001600160a01b0390941685529281529282902081518155928101516001840155908101516002830155606081015160038301556080810151600483015560a00151600590910155565b610aa060008051602061337d8339815191526107ea61222f565b610aa957600080fd5b60a055565b60af5481565b600081815260b560209081526040808320546001600160a01b031680845260b68352818420805483518186028101860190945280845291936060939290869084015b82821015610bcb5760008481526020908190206040805160038602909201805460026001821615610100026000190190911604601f8101859004909402830160809081019092526060830184815292939092849290918491840182828015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b505050505081526020016001820154815260200160028201548152505081526020019060010190610af6565b505091519450505050505b919050565b6000806000609a8581548110610bed57fe5b600091825260208083208884526098825260408085206001600160a01b038a16865290925290832060038101548154600690940290920194509291610c3191612233565b905060008084600301541115610c7857610c758360020154610c6f64e8d4a51000610c6988600301548761225890919063ffffffff16565b90612292565b906122d4565b90505b610ca08360010154610c6f64e8d4a51000610c6988600201548761225890919063ffffffff16565b9890975095505050505050565b609a8181548110610cba57fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909260ff9091169086565b609960209081526000938452604080852082529284528284209052825290205481565b609b5481565b610d4360008051602061337d8339815191526107ea61222f565b610d4c57600080fd5b60005b8151811015610dd8576001600160a01b038316600090815260b6602052604090208251839083908110610d7e57fe5b602090810291909101810151825460018101845560009384529282902081518051929460030290910192610db792849290910190612717565b50602082015160018083019190915560409092015160029091015501610d4f565b505050565b609e5481565b60009081526065602052604090206002015490565b600082815260656020526040902060020154610e16906107ea61222f565b610e3b5760405162461bcd60e51b8152600401610e32906130d3565b60405180910390fd5b610e458282612316565b5050565b600080600080600080610e5a612795565b609a8881548110610e6757fe5b60009182526020918290206040805160c08101825260069390930290910180546001600160a01b031680845260018201549484018590526002820154928401839052600382015460608501819052600483015460ff1615156080860181905260059093015460a0909501859052909d949c50919a509098509650945092505050565b60a9546001600160a01b031681565b60a65460009081526097602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b82821015610f8057838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610f3a565b505050509050919050565b60a15481565b610f9961222f565b6001600160a01b0316816001600160a01b031614610fc95760405162461bcd60e51b8152600401610e329061328d565b610e45828261237f565b610fed60008051602061337d8339815191526107ea61222f565b610ff657600080fd5b80156110115760af546110099083612233565b60af55610e45565b5060af55565b60ab546001600160a01b031681565b61103360006107ea61222f565b61104f5760405162461bcd60e51b8152600401610e32906131a9565b61106760008051602061337d83398151915284610e3b565b61107f60008051602061337d83398151915283610e3b565b610dd860008051602061337d83398151915282610e3b565b6110b160008051602061337d8339815191526107ea61222f565b6110cd5760405162461bcd60e51b8152600401610e32906130a8565b609c546110da9082612233565b609c5560a5546110ea9082612233565b60a555609e5481101561111c57609d546111049082612233565b609d55609e5461111490826122d4565b609e5561113c565b609e541561113c57609e54609d5461113391612233565b609d556000609e555b50565b60b06020526000908152604090205481565b61116b60008051602061337d8339815191526107ea61222f565b61117457600080fd5b6111b1826111ab609a868154811061118857fe5b906000526020600020906006020160010154609b546122d490919063ffffffff16565b90612233565b5081609a84815481106111c057fe5b90600052602060002090600602016001018190555080609a84815481106111e357fe5b60009182526020909120600690910201600401805460ff1916911515919091179055505050565b61122460008051602061337d8339815191526107ea61222f565b61122d57600080fd5b60a55460a68054600090815260b2602052604090209190915580546001019055565b60b26020526000908152604090205481565b61127b60008051602061337d8339815191526107ea61222f565b61128457600080fd5b609c5461129190836122d4565b609c55609d546112a190826122d4565b609d555050565b600082815260b560205260408120546060919081906001600160a01b03166112ce6127d6565b6001600160a01b038216600090815260b6602052604090208054879081106112f257fe5b600091825260209182902060408051600393909302909101805460026001821615610100026000190190911604601f81018590049094028301608090810190925260608301848152929390928492909184918401828280156113955780601f1061136a57610100808354040283529160200191611395565b820191906000526020600020905b81548152906001019060200180831161137857829003601f168201915b5050505050815260200160018201548152602001600282015481525050905080600001518160200151826040015194509450945050509250925092565b60b660205281600052604060002081815481106113eb57fe5b60009182526020918290206003919091020180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919450925083918301828280156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b5050505050908060010154908060020154905083565b60a25481565b6114ba60008051602061337d8339815191526107ea61222f565b6114c357600080fd5b60009384526099602090815260408086206001600160a01b039586168752825280862093909416855291909152912055565b60a55481565b600090815260b1602052604090205490565b600090815260b0602052604090205490565b60ba818154811061152c57fe5b600091825260209091200154905081565b61155760008051602061337d8339815191526107ea61222f565b61156057600080fd5b8015611584576001600160a01b038316600090815260b46020526040812055610dd8565b6001600160a01b038316600090815260b460205260409020546115a79083612233565b6001600160a01b038416600090815260b46020526040902055505050565b60008051602061337d83398151915281565b6115f160008051602061337d8339815191526107ea61222f565b6115fa57600080fd5b801561161557609e5461160d9083612233565b609e55610e45565b609c546116229083612233565b609c5560a5546116329083612233565b60a5555050565b60b5602052600090815260409020546001600160a01b031681565b61166e60008051602061337d8339815191526107ea61222f565b61167757600080fd5b60005b609a548110156116db57826001600160a01b0316609a828154811061169b57fe5b60009182526020909120600690910201546001600160a01b031614156116d35760405162461bcd60e51b8152600401610e3290613256565b60010161167a565b50609b546116e99084612233565b609b556040805160c0810182526001600160a01b039384168152602081019485526000918101828152606082018381529315156080830190815260a08301848152609a8054600181018255955292517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be4600690950294850180546001600160a01b031916919097161790955594517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be583015593517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be682015590517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be782015590517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be88201805460ff191691151591909117905590517f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be990910155565b61185e60008051602061337d8339815191526107ea61222f565b61186757600080fd5b60a65460008181526097602090815260408083206001600160a01b039095168352938152838220845180860190955294845283810192835284546001818101875595835291209251600290910290920191825551910155565b6118da60008051602061337d8339815191526107ea61222f565b6118e357600080fd5b60a55460a380548201905560a480549091019055565b609d5481565b60a7546001600160a01b031681565b61192860008051602061337d8339815191526107ea61222f565b61193157600080fd5b609f55565b60a65481565b600082815260656020526040812061195490836123e8565b90505b92915050565b60a65460009081526097602090815260408083206001600160a01b0385168452825280832080548251818502810185019093528083528493606093929190859084015b828210156119e6578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906119a0565b50505050905060005b8151811015611a7157818181518110611a0457fe5b60200260200101516020015160a6541415611a6957818181518110611a2557fe5b60200260200101516000015160051480611a565750818181518110611a4657fe5b6020026020010151600001516006145b15611a6957611a6683600a612233565b92505b6001016119ef565b50909392505050565b600082815260656020526040812061195490836123f4565b6098602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b60a45481565b600090815260b560205260409020546001600160a01b031690565b611b0d60008051602061337d8339815191526107ea61222f565b611b1657600080fd5b60a555565b60976020528260005260406000206020528160005260406000208181548110611b4057fe5b6000918252602090912060029091020180546001909101549093509150839050565b600081565b611b8160008051602061337d8339815191526107ea61222f565b80611b945750611b9460006107ea61222f565b611bb05760405162461bcd60e51b8152600401610e32906130a8565b60a780546001600160a01b03199081166001600160a01b038a811691821790935560a8805483168a851690811790915560ac8054841690921790915560aa80548316909117905560ad8054821688841617905560a98054821687841617905560ab8054821686841617905560ae805490911691831691909117905560005b8251811015611c8757828181518110611c4357fe5b602090810291909101810151600192909201600081815260b5909252604090912080546001600160a01b0319166001600160a01b0390931692909217909155611c2e565b5050505050505050565b60b46020526000908152604090205481565b611cbd60008051602061337d8339815191526107ea61222f565b611cc657600080fd5b60005b82518160ff1611610dd857818160ff1681518110611ce357fe5b602002602001015160b060008360010160ff16815260200190815260200160002081905550828160ff1681518110611d1757fe5b60209081029190910181015160ff6001909301928316600090815260b1909252604090912055611cc9565b609a5490565b611d6260008051602061337d8339815191526107ea61222f565b611d6b57600080fd5b6001600160a01b03909116600090815260b36020526040902055565b60ae546001600160a01b031681565b60b16020526000908152604090205481565b611dc260008051602061337d8339815191526107ea61222f565b611dcb57600080fd5b609e55565b60a35481565b600081815260656020526040812061195790612409565b60b36020526000908152604090205481565b80516000908290611e14575060009050610bd6565b50506020015190565b611e3760008051602061337d8339815191526107ea61222f565b611e4057600080fd5b80609a8381548110611e4e57fe5b600091825260209182902083516006929092020180546001600160a01b0319166001600160a01b039092169190911781559082015160018201556040820151600282015560608201516003820155608082015160048201805460ff191691151591909117905560a0909101516005909101555050565b600082815260656020526040902060020154611ee2906107ea61222f565b610fc95760405162461bcd60e51b8152600401610e3290613159565b611f1860008051602061337d8339815191526107ea61222f565b80611f2b5750611f2b60006107ea61222f565b611f475760405162461bcd60e51b8152600401610e32906130a8565b4360a155674563918244f400007f2ece0d27245ca4a357e8d077613a722d4d1521036879824658dc484c52c7c0a15567d02ab486cedc00007f6e01826bd384b53cadd411dfb0d7b9bb8347fa1fdfb968d963ab9753a36f3ee1556801a055690d9db800007f1b47d0ec8866f11488ba3f9889b2cb3acfff2dfb8ebe8a1c3bdcf69e2f06577e55680340aad21b3b7000007f4a1be165f25a7987e337edc4e6b4ebb4f17cf12ecbb3dc24632b9c6b8bcff4ce5560b160205260057fd7e297a316c321c40332cfb8dc1701afefe5c7db49edec748122ee7e43d355c455600f7f7ae7ad9a4c32d2f3e019743ac18a175616ca69d351bbf6528cf9a64ce6017f7255601e7f8ad2446af2a0369fe8964797f78858d5dc0e301ab1acc8cdf1f7252f94e5c061556004600052603c7f8a66bef5dd30a7468a9bb314b1a60dbb73161e7e2f190bd4e69027c3498b6fa555565b60b8818154811061152c57fe5b60ad546001600160a01b031681565b600054610100900460ff16806120ca57506120ca612414565b806120d8575060005460ff16155b6120f45760405162461bcd60e51b8152600401610e3290613208565b600054610100900460ff1615801561211f576000805460ff1961ff0019909116610100171660011790555b61212761241a565b612139600061213461222f565b610e3b565b61215360008051602061337d83398151915261213461222f565b801561113c576000805461ff001916905550565b60008061217384611dff565b600090815260b76020908152604082206001600160a01b039095169091529290925292915050565b60bc818154811061152c57fe5b609c5481565b6000806121ba83611dff565b600090815260b960205260409020546001600160a01b03169392505050565b6121f360008051602061337d8339815191526107ea61222f565b6121fc57600080fd5b4360a155565b60aa546001600160a01b031681565b60ac546001600160a01b031681565b60a8546001600160a01b031681565b3390565b6000828201838110156119545760405162461bcd60e51b8152600401610e3290613122565b60008261226757506000611957565b8282028284828161227457fe5b04146119545760405162461bcd60e51b8152600401610e32906131c7565b600061195483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612498565b600061195483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124cf565b600082815260656020526040902061232e90826124fb565b15610e455761233b61222f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206123979082612510565b15610e45576123a461222f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006119548383612525565b6000611954836001600160a01b03841661256a565b600061195782612582565b303b1590565b600054610100900460ff16806124335750612433612414565b80612441575060005460ff16155b61245d5760405162461bcd60e51b8152600401610e3290613208565b600054610100900460ff16158015612488576000805460ff1961ff0019909116610100171660011790555b612490612586565b612153612586565b600081836124b95760405162461bcd60e51b8152600401610e32919061302e565b5060008385816124c557fe5b0495945050505050565b600081848411156124f35760405162461bcd60e51b8152600401610e32919061302e565b505050900390565b6000611954836001600160a01b038416612607565b6000611954836001600160a01b038416612651565b815460009082106125485760405162461bcd60e51b8152600401610e3290613066565b82600001828154811061255757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600054610100900460ff168061259f575061259f612414565b806125ad575060005460ff16155b6125c95760405162461bcd60e51b8152600401610e3290613208565b600054610100900460ff16158015612153576000805460ff1961ff001990911661010017166001179055801561113c576000805461ff001916905550565b6000612613838361256a565b61264957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611957565b506000611957565b6000818152600183016020526040812054801561270d578354600019808301919081019060009087908390811061268457fe5b90600052602060002001549050808760000184815481106126a157fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806126d157fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611957565b6000915050611957565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061275857805160ff1916838001178555612785565b82800160010185558215612785579182015b8281111561278557825182559160200191906001019061276a565b506127919291506127fa565b5090565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b60405180606001604052806060815260200160008152602001600080191681525090565b5b8082111561279157600081556001016127fb565b803561195781613359565b600082601f83011261282a578081fd5b813561283d61283882613339565b613312565b81815291506020808301908481018184028601820187101561285e57600080fd5b60005b8481101561287d57813584529282019290820190600101612861565b505050505092915050565b600082601f830112612898578081fd5b813567ffffffffffffffff8111156128ae578182fd5b6128c1601f8201601f1916602001613312565b91508082528360208285010111156128d857600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215612902578081fd5b813561195481613359565b600080600060608486031215612921578182fd5b833561292c81613359565b9250602084013561293c81613359565b9150604084013561294c81613359565b809150509250925092565b600080600080600080600060e0888a031215612971578283fd5b873561297c81613359565b965060208881013561298d81613359565b9650604089013561299d81613359565b955060608901356129ad81613359565b945060808901356129bd81613359565b935060a089013567ffffffffffffffff8111156129d8578384fd5b8901601f81018b136129e8578384fd5b80356129f661283882613339565b81815283810190838501858402850186018f1015612a12578788fd5b8794505b83851015612a3c57612a288f8261280f565b835260019490940193918501918501612a16565b508096505050505050612a528960c08a0161280f565b905092959891949750929550565b60008060408385031215612a72578182fd5b8235612a7d81613359565b915060208381013567ffffffffffffffff80821115612a9a578384fd5b818601915086601f830112612aad578384fd5b8135612abb61283882613339565b81815284810190848601875b84811015612b3a57813587016060818e03601f19011215612ae657898afd5b612af06060613312565b8982013588811115612b00578b8cfd5b612b0e8f8c83860101612888565b8252506040828101358b8301526060909201359181019190915284529287019290870190600101612ac7565b50979a909950975050505050505050565b60008060408385031215612b5d578182fd5b8235612b6881613359565b946020939093013593505050565b600080600060608486031215612b8a578283fd5b8335612b9581613359565b925060208401359150604084013561294c8161336e565b60008060408385031215612bbe578182fd5b823567ffffffffffffffff80821115612bd5578384fd5b612be18683870161281a565b93506020850135915080821115612bf6578283fd5b50612c038582860161281a565b9150509250929050565b600060208284031215612c1e578081fd5b5035919050565b60008060408385031215612c37578182fd5b823591506020830135612c4981613359565b809150509250929050565b60008060408385031215612c66578182fd5b50508035926020909101359150565b600060208284031215612c86578081fd5b813567ffffffffffffffff811115612c9c578182fd5b612ca884828501612888565b949350505050565b60008060408385031215612cc2578182fd5b823567ffffffffffffffff811115612cd8578283fd5b612ce485828601612888565b9250506020830135612c4981613359565b600080600060608486031215612d09578081fd5b83359250602084013561293c81613359565b60008060008060808587031215612d30578182fd5b843593506020850135612d4281613359565b92506040850135612d5281613359565b9396929550929360600135925050565b6000806000838503610100811215612d78578182fd5b843593506020850135612d8a81613359565b925060c0603f1982011215612d9d578182fd5b50612da860c0613312565b60408501358152606085013560208201526080850135604082015260a0850135606082015260c0850135608082015260e085013560a0820152809150509250925092565b600080600060608486031215612e00578081fd5b833592506020840135612e1281613359565b929592945050506040919091013590565b60008060408385031215612e35578182fd5b823591506020830135612c498161336e565b600080600060608486031215612e5b578081fd5b833592506020840135612e6d81613359565b9150604084013561294c8161336e565b60008082840360e0811215612e90578283fd5b8335925060c0601f1982011215612ea5578182fd5b50612eb060c0613312565b6020840135612ebe81613359565b8082525060408401356020820152606084013560408201526080840135606082015260a08401358015158114612ef2578283fd5b608082015260c0939093013560a08401525092909150565b600080600060608486031215612f1e578081fd5b8335925060208401359150604084013561294c8161336e565b60008151808452815b81811015612f5c57602081850181015186830182015201612f40565b81811115612f6d5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b82811015612fd857815180518552860151868501529284019290850190600101612fb3565b5091979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b039690961686526020860194909452604085019290925260608401521515608083015260a082015260c00190565b6000602082526119546020830184612f37565b6000606082526130546060830186612f37565b60208301949094525060400152919050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b602080825260119082015270283937b434b134ba32b21031b0b63632b960791b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252600490820152634e6f6e6f60e01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526018908201527f4572726f7220706f6f6c20616c72656164792061646465640000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b918252602082015260400190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561333157600080fd5b604052919050565b600067ffffffffffffffff82111561334f578081fd5b5060209081020190565b6001600160a01b038116811461113c57600080fd5b801515811461113c57600080fdfe62ca43aa15f7f495faa685ce5a258aa390fdc8d7094251dd23d32353f496ddfea26469706673582212206f45d36ef46ed8dc1976df9249269b27af836a9a7f6e334d41e7720d7a81185964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 195,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 263,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 188,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 308,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)304_storage)"
      },
      {
        "astId": 553,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14275,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "NFTUsageInfo",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(NFTUsage)14268_storage)dyn_storage))"
      },
      {
        "astId": 14389,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "userInfo",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14263_storage))"
      },
      {
        "astId": 14423,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "poolAllowance",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 14469,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "poolInfo",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_struct(PoolInfo)14466_storage)dyn_storage"
      },
      {
        "astId": 14781,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 14783,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "pendingRewards",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 14785,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "pendingYGYRewards",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 14787,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "YGYReserve",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 14807,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "ramBalance",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 14827,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "ygyBalance",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 14847,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "RAMVaultStartBlock",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 14866,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "epochCalculationStartBlock",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 14885,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "cumulativeRewardsSinceStart",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 14887,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "cumulativeYGYRewardsSinceStart",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 14913,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "rewardsInThisEpoch",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 14933,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "epoch",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 14935,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "ram",
        "offset": 0,
        "slot": "167",
        "type": "t_contract(INBUNIERC20)15907"
      },
      {
        "astId": 14937,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "ygy",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 14939,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_YGYRAMPair",
        "offset": 0,
        "slot": "169",
        "type": "t_address"
      },
      {
        "astId": 14941,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_YGYToken",
        "offset": 0,
        "slot": "170",
        "type": "t_address"
      },
      {
        "astId": 14943,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_YGYWETHPair",
        "offset": 0,
        "slot": "171",
        "type": "t_address"
      },
      {
        "astId": 14945,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_RAMToken",
        "offset": 0,
        "slot": "172",
        "type": "t_address"
      },
      {
        "astId": 14947,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_WETH",
        "offset": 0,
        "slot": "173",
        "type": "t_contract(IWETH)23343"
      },
      {
        "astId": 14949,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_dXIOTToken",
        "offset": 0,
        "slot": "174",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 15128,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "boostFees",
        "offset": 0,
        "slot": "175",
        "type": "t_uint256"
      },
      {
        "astId": 15163,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "boostLevelCosts",
        "offset": 0,
        "slot": "176",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15253,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "boostLevelMultipliers",
        "offset": 0,
        "slot": "177",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15319,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "epochRewards",
        "offset": 0,
        "slot": "178",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15344,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "lastTicketLevel",
        "offset": 0,
        "slot": "179",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15370,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "liquidityContributedEthValue",
        "offset": 0,
        "slot": "180",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15412,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "_NFTs",
        "offset": 0,
        "slot": "181",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 15424,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "nftPropertyChoices",
        "offset": 0,
        "slot": "182",
        "type": "t_mapping(t_address,t_array(t_struct(NFTProperty)15419_storage)dyn_storage)"
      },
      {
        "astId": 15541,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "booleanMapStorage",
        "offset": 0,
        "slot": "183",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15544,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "booleanMapStorageCount",
        "offset": 0,
        "slot": "184",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 15570,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "addressStorage",
        "offset": 0,
        "slot": "185",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 15573,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "addressStorageCount",
        "offset": 0,
        "slot": "186",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 15595,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "uintStorage",
        "offset": 0,
        "slot": "187",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 15598,
        "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
        "label": "uintStorageCount",
        "offset": 0,
        "slot": "188",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NFTProperty)15419_storage)dyn_storage": {
        "base": "t_struct(NFTProperty)15419_storage",
        "encoding": "dynamic_array",
        "label": "struct YGYStorageV1.NFTProperty[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NFTUsage)14268_storage)dyn_storage": {
        "base": "t_struct(NFTUsage)14268_storage",
        "encoding": "dynamic_array",
        "label": "struct YGYStorageV1.NFTUsage[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)14466_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)14466_storage",
        "encoding": "dynamic_array",
        "label": "struct YGYStorageV1.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(INBUNIERC20)15907": {
        "encoding": "inplace",
        "label": "contract INBUNIERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)23343": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(NFTProperty)15419_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YGYStorageV1.NFTProperty[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(NFTProperty)15419_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(NFTUsage)14268_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YGYStorageV1.NFTUsage[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(NFTUsage)14268_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)14263_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YGYStorageV1.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)14263_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)304_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)304_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(NFTUsage)14268_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct YGYStorageV1.NFTUsage[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(NFTUsage)14268_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14263_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct YGYStorageV1.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)14263_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2033_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2032,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1853_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTProperty)15419_storage": {
        "encoding": "inplace",
        "label": "struct YGYStorageV1.NFTProperty",
        "members": [
          {
            "astId": 15414,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "pType",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15416,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "pValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15418,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "extra",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(NFTUsage)14268_storage": {
        "encoding": "inplace",
        "label": "struct YGYStorageV1.NFTUsage",
        "members": [
          {
            "astId": 14265,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "nftId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14267,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)14466_storage": {
        "encoding": "inplace",
        "label": "struct YGYStorageV1.PoolInfo",
        "members": [
          {
            "astId": 14455,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1045"
          },
          {
            "astId": 14457,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14459,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "accRAMPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14461,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "accYGYPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14463,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "withdrawable",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 14465,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "effectiveAdditionalTokensFromBoosts",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)304_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 301,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2033_storage"
          },
          {
            "astId": 303,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1853_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1848,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1852,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)14263_storage": {
        "encoding": "inplace",
        "label": "struct YGYStorageV1.UserInfo",
        "members": [
          {
            "astId": 14252,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14254,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14256,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "rewardDebtYGY",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14258,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "boostAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14260,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "boostLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14262,
            "contract": "contracts/YGYStorageV1.sol:YGYStorageV1",
            "label": "spentMultiplierTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}