{
  "address": "0x5b9A40693859e3F56a8494C779F69509a4d66fDB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromNFT",
          "type": "bool"
        }
      ],
      "name": "Boost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SuperAdminTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "NFTUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addRAMRewardsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addYGYRewardsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "checkRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRAM",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingYGY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositFor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__superAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_regeneratoraddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teamaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "newSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teamaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_regeneratoraddr",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setAllowanceForPoolToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_DEV_FEE",
          "type": "uint16"
        }
      ],
      "name": "setDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setStrategyContractOrDistributionContractAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferRAMDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferYGYDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x836160c8c5d206ceac425ca82236347acace5077235720d90b4d134f6f1fc3b6",
  "receipt": {
    "to": null,
    "from": "0x117C8f87Cc495b29bdDB20E2a54c6F4DacDdAb5C",
    "contractAddress": "0x5b9A40693859e3F56a8494C779F69509a4d66fDB",
    "transactionIndex": 3,
    "gasUsed": "4733056",
    "logsBloom": "0x
    "blockHash": "0xecc373729cb22f8b789e47b7d45f4c326f7abc28eaf097689a5827b61837f6b1",
    "transactionHash": "0x836160c8c5d206ceac425ca82236347acace5077235720d90b4d134f6f1fc3b6",
    "logs": [],
    "blockNumber": 22736795,
    "cumulativeGasUsed": "4886238",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ac7b371f6e191aaf3845c9283da8575b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromNFT\",\"type\":\"bool\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SuperAdminTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"NFTUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRAMRewardsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addYGYRewardsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRAM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingYGY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositFor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__superAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regeneratoraddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"newSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regeneratoraddr\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAllowanceForPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_DEV_FEE\",\"type\":\"uint16\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStrategyContractOrDistributionContractAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRAMDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferYGYDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RAMVault.sol\":\"RAMVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"contracts/RAMVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./libraries/Bytes.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\nimport \\\"./libraries/UserHelper.sol\\\";\\nimport \\\"./interfaces/INFT.sol\\\";\\nimport \\\"./StorageState.sol\\\";\\n\\n\\n// Ram Vault distributes fees equally amongst staked pools\\ncontract RAMVault is StorageState, OwnableUpgradeSafe {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using Bytes for bytes;\\n  using UserHelper for YGYStorageV1.UserInfo;\\n  using PoolHelper for YGYStorageV1.PoolInfo;\\n\\n  event NewEpoch(uint256);\\n  event RewardPaid(uint256 pid, address to);\\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 _pid, uint256 value);\\n  event Boost(address indexed user, uint256 indexed pid, uint256 indexed level, bool fromNFT);\\n\\n  address private devaddr;\\n  address private teamaddr;\\n  address private regeneratoraddr;\\n  address private nftFactory;\\n\\n  function initialize(\\n    address __superAdmin,\\n    address _regeneratoraddr,\\n    address _devaddr,\\n    address _teamaddr,\\n    address _nftFactory\\n  ) public initializer {\\n    OwnableUpgradeSafe.__Ownable_init();\\n    DEV_FEE = 724;\\n    _superAdmin = __superAdmin;\\n    regeneratoraddr = _regeneratoraddr;\\n    devaddr = _devaddr;\\n    teamaddr = _teamaddr;\\n    nftFactory = _nftFactory;\\n  }\\n\\n  function NFTUsage(\\n    address _user,\\n    address _tokenAddress,\\n    uint256 _tokenId,\\n    uint256 _poolId\\n  ) external {\\n    require(msg.sender == nftFactory, \\\"Prohibited caller\\\");\\n    INFT nft = INFT(_tokenAddress);\\n    YGYStorageV1.NFTProperty memory properties = nft.getTokenProperty(_tokenId);\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_poolId, _user, _storage);\\n\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_poolId, _storage);\\n    if (keccak256(abi.encodePacked(properties.pType)) == keccak256(\\\"boost\\\")) {\\n      _storage.setNFTInUse(nft.contractId(), _user);\\n      user.adjustEffectiveStake(pool, _user, 0, false, _storage);\\n    }\\n    nft.burn(_tokenId);\\n    _storage.updateUserInfo(_poolId, _user, user);\\n    _storage.updatePoolInfo(_poolId, pool);\\n    emit Boost(_user, _poolId, 0, true);\\n  }\\n\\n  // --------------------------------------------\\n  //                  EPOCH\\n  // --------------------------------------------\\n\\n  // Starts a new calculation epoch\\n  // Also dismisses NFT boost effects\\n  // Because averge since start will not be accurate\\n  function startNewEpoch() public {\\n    // require(_storage.epochCalculationStartBlock() + 5760 < block.number); // about 3 days.\\n    _storage.setEpochRewards();\\n    _storage.setCumulativeRewardsSinceStart();\\n    _storage.setRewardsInThisEpoch(0, 0);\\n    _storage.setEpochCalculationStartBlock();\\n    emit NewEpoch(_storage.epoch());\\n  }\\n\\n  // --------------------------------------------\\n  //                OWNER\\n  // --------------------------------------------\\n\\n  // Adds additional RAM rewards\\n  function addRAMRewardsOwner(uint256 _amount) public onlyOwner {\\n    require(_storage.ram().transferFrom(msg.sender, address(this), _amount) && _amount > 0);\\n    _storage.addAdditionalRewards(_amount, false);\\n  }\\n\\n  // Adds additional YGY rewards\\n  function addYGYRewardsOwner(uint256 _amount) public onlyOwner {\\n    require(_storage.ygy().transferFrom(msg.sender, address(this), _amount) && _amount > 0);\\n    _storage.addAdditionalRewards(_amount, true);\\n  }\\n\\n  // --------------------------------------------\\n  //                  POOL\\n  // --------------------------------------------\\n\\n  // Add a new token pool. Can only be called by the owner.\\n  // Note contract owner is meant to be a governance contract allowing RAM governance consensus\\n  function addPool(\\n    uint256 _allocPoint,\\n    IERC20 _token,\\n    bool _withdrawable\\n  ) public onlyOwner {\\n    massUpdatePools();\\n    _storage.addPool(_allocPoint, _token, _withdrawable);\\n  }\\n\\n  // Update the given pool's RAMs allocation point. Can only be called by the owner.\\n  // Note contract owner is meant to be a governance contract allowing RAM governance consensus\\n  function set(\\n    uint256 _pid,\\n    uint256 _allocPoint,\\n    bool _withdrawable\\n  ) public onlyOwner {\\n    massUpdatePools();\\n    _storage.setPool(_pid, _allocPoint, _withdrawable);\\n  }\\n\\n  // Function that adds pending rewards, called by the RAM token.\\n  function addPendingRewards(uint256 _amount) external {\\n    require(msg.sender == address(_storage.ram()));\\n    _storage.addPendingRewards(_amount);\\n  }\\n\\n  // Update reward variables of the given pool to be up-to-date.\\n  function updatePool(uint256 _pid) internal returns (uint256 ramRewardsWhole, uint256 ygyRewardsWhole) {\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n\\n    uint256 tokenSupply = pool.token.balanceOf(address(this));\\n    if (tokenSupply == 0) {\\n      return (0, 0);\\n    }\\n    uint256 effectivePoolStakedSupply = tokenSupply.add(pool.effectiveAdditionalTokensFromBoosts);\\n\\n    ramRewardsWhole = _storage.pendingRewards().mul(pool.allocPoint).div(_storage.totalAllocPoint());\\n\\n    // Ram rewards\\n    uint256 ramRewardFee = ramRewardsWhole.mul(DEV_FEE).div(10000);\\n    pending_DEV_rewards = pending_DEV_rewards.add(ramRewardFee);\\n\\n    // Ygy rewards should be zero most of the time running.\\n    uint256 pendingYGYRewards = _storage.pendingYGYRewards();\\n    if (pendingYGYRewards > 0) {\\n      ygyRewardsWhole = pendingYGYRewards.mul(pool.allocPoint).div(_storage.totalAllocPoint());\\n      uint256 ygyRewardFee = ygyRewardsWhole.mul(DEV_FEE).div(10000);\\n      pending_DEV_YGY_rewards = pending_DEV_YGY_rewards.add(ygyRewardFee);\\n      pool.accYGYPerShare = pool.accYGYPerShare.add(ygyRewardsWhole.sub(ygyRewardFee).mul(1e12).div(effectivePoolStakedSupply));\\n    }\\n\\n    // Update shares\\n    pool.accRAMPerShare = pool.accRAMPerShare.add(ramRewardsWhole.sub(ramRewardFee).mul(1e12).div(effectivePoolStakedSupply));\\n    _storage.updatePoolInfo(_pid, pool);\\n  }\\n\\n  // Deposit tokens to RamVault for RAM allocation.\\n  function deposit(uint256 _pid, uint256 _amount) public {\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_pid, msg.sender, _storage);\\n    // Pay the user\\n    updateAndPayOutPending(_pid, msg.sender);\\n\\n    // save gas\\n    if (_amount > 0) {\\n      pool.token.transferFrom(address(msg.sender), address(this), _amount);\\n      user.amount = user.amount.add(_amount);\\n\\n      // Users that have bought multipliers will have an extra balance added to their stake according to the boost multiplier.\\n      if (user.boostAmount > 0 || user.boostLevel > 0) {\\n        user.adjustEffectiveStake(pool, msg.sender, 0, false, _storage);\\n      }\\n    }\\n\\n    user.updateDebts(pool);\\n    _storage.updateUserInfo(_pid, msg.sender, user);\\n    _storage.updatePoolInfo(_pid, pool);\\n    emit Deposit(msg.sender, _pid, _amount);\\n  }\\n\\n  function claimRewards(uint256 _pid) external {\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_pid, msg.sender, _storage);\\n\\n    // Adjust the stake since user might have not acted after an epoch change and got boost amounts reduced\\n    if (user.boostAmount > 0) {\\n      user.adjustEffectiveStake(pool, msg.sender, 0, false, _storage);\\n    }\\n    updateAndPayOutPending(_pid, msg.sender);\\n\\n    user.updateDebts(pool);\\n    _storage.updateUserInfo(_pid, msg.sender, user);\\n    _storage.updatePoolInfo(_pid, pool);\\n    emit RewardPaid(_pid, msg.sender);\\n  }\\n\\n  // Test coverage\\n  // [x] Does user get the deposited amounts?\\n  // [x] Does user that its deposited for update correcty?\\n  // [x] Does the depositor get their tokens decreased\\n  function depositFor(\\n    address _depositFor,\\n    uint256 _pid,\\n    uint256 _amount\\n  ) public {\\n    // requires no allowances\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_pid, _depositFor, _storage);\\n\\n    // Pay the user\\n    updateAndPayOutPending(_pid, _depositFor);\\n\\n    // Update the balances of person that amount is being deposited for\\n    if (_amount > 0) {\\n      pool.token.transferFrom(msg.sender, address(this), _amount);\\n      user.amount = user.amount.add(_amount); // This is depositedFor address\\n\\n      // Users that have bought multipliers will have an extra balance added to their stake according to the boost multiplier.\\n      if (user.boostAmount > 0 || user.boostLevel > 0) {\\n        user.adjustEffectiveStake(pool, _depositFor, 0, false, _storage);\\n      }\\n    }\\n\\n    user.updateDebts(pool);\\n    _storage.updateUserInfo(_pid, _depositFor, user);\\n    _storage.updatePoolInfo(_pid, pool);\\n    emit Deposit(_depositFor, _pid, _amount);\\n  }\\n\\n  // Test coverage\\n  // [x] Does allowance update correctly?\\n  function setAllowanceForPoolToken(\\n    address spender,\\n    uint256 _pid,\\n    uint256 value\\n  ) public {\\n    _storage.setPoolAllowance(_pid, msg.sender, spender, value);\\n    emit Approval(msg.sender, spender, _pid, value);\\n  }\\n\\n  // Test coverage\\n  // [x] Does allowance decrease?\\n  // [x] Do oyu need allowance\\n  // [x] Withdraws to correct address\\n  function withdrawFrom(\\n    address owner,\\n    uint256 _pid,\\n    uint256 _amount\\n  ) public {\\n    uint256 allowance = _storage.poolAllowance(_pid, owner, msg.sender);\\n    require(allowance >= _amount, \\\"No allowance\\\");\\n    _storage.setPoolAllowance(_pid, owner, msg.sender, allowance.sub(_amount));\\n    _withdraw(_pid, _amount, owner, msg.sender);\\n  }\\n\\n  // Withdraw  tokens from RamVault.\\n  function withdraw(uint256 _pid, uint256 _amount) public {\\n    _withdraw(_pid, _amount, msg.sender, msg.sender);\\n  }\\n\\n  // Low level withdraw function\\n  function _withdraw(\\n    uint256 _pid,\\n    uint256 _amount,\\n    address from,\\n    address to\\n  ) internal {\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n    require(pool.withdrawable, \\\"Not withdrawable\\\");\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_pid, from, _storage);\\n\\n    require(user.amount >= _amount, \\\"Withdraw amount exceeds balance\\\");\\n    updateAndPayOutPending(_pid, from); // Update balances of from, this is not withdrawal but claiming RAM farmed\\n\\n    if (_amount > 0) {\\n      user.amount = user.amount.sub(_amount);\\n      pool.token.safeTransfer(address(to), _amount);\\n\\n      // Users who have bought multipliers will have their accounting balances readjusted.\\n      if (user.boostAmount > 0 || user.boostLevel > 0) {\\n        user.adjustEffectiveStake(pool, from, 0, true, _storage);\\n      }\\n    }\\n\\n    user.updateDebts(pool);\\n    _storage.updateUserInfo(_pid, msg.sender, user);\\n    _storage.updatePoolInfo(_pid, pool);\\n    emit Withdraw(to, _pid, _amount);\\n  }\\n\\n  function massUpdatePools() public {\\n    uint256 allRewards;\\n    uint256 allYGYRewards;\\n    for (uint256 pid = 0; pid < _storage.getPoolLength(); ++pid) {\\n      (uint256 ramWholeReward, uint256 ygyWholeReward) = updatePool(pid);\\n      allRewards = allRewards.add(ramWholeReward);\\n      allYGYRewards = allYGYRewards.add(ygyWholeReward);\\n    }\\n\\n    _storage.updatePoolRewards(allRewards, allYGYRewards);\\n  }\\n\\n  function checkRewards(uint256 _pid, address _user) public view returns (uint256 pendingRAM, uint256 pendingYGY) {\\n    return _storage.checkRewards(_pid, _user);\\n  }\\n\\n  function updateAndPayOutPending(uint256 _pid, address _from) internal {\\n    massUpdatePools();\\n\\n    (uint256 pendingRAM, uint256 pendingYGY) = checkRewards(_pid, _from);\\n    if (pendingRAM > 0) {\\n      safeRamTransfer(_from, pendingRAM);\\n    }\\n    if (pendingYGY > 0) {\\n      safeYgyTransfer(_from, pendingYGY);\\n    }\\n  }\\n\\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\\n  // !Caution this will remove all your pending rewards!\\n  function emergencyWithdraw(uint256 _pid) public {\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n    require(pool.withdrawable, \\\"Pool not withdrawable\\\");\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_pid, msg.sender, _storage);\\n    pool.token.safeTransfer(address(msg.sender), user.amount);\\n    emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    user.amount = 0;\\n    user.boostAmount = 0;\\n    user.rewardDebt = 0;\\n    user.rewardDebtYGY = 0;\\n    _storage.updateUserInfo(_pid, msg.sender, user);\\n    _storage.updatePoolInfo(_pid, pool);\\n    // No mass update dont update pending rewards\\n  }\\n\\n  // --------------------------------------------\\n  //                  BOOST\\n  // --------------------------------------------\\n\\n  // Purchase a multiplier level for an individual user for an individual pool, same level cannot be purchased twice.\\n  function purchase(uint256 _pid, uint256 _level) external {\\n    YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n    YGYStorageV1.UserInfo memory user = UserHelper.getUser(_pid, msg.sender, _storage);\\n\\n    require(_level > user.boostLevel && _level <= 4);\\n\\n    // Cost will be reduced by the amount already spent on multipliers.\\n    uint256 cost = _storage.getBoostLevelCost(_level);\\n    uint256 finalCost = cost.sub(user.spentMultiplierTokens);\\n\\n    // Transfer RAM tokens to the contract\\n    require(_storage.ram().transferFrom(msg.sender, address(this), finalCost));\\n\\n    // Update balances and level\\n    user.spentMultiplierTokens = user.spentMultiplierTokens.add(finalCost);\\n    user.boostLevel = _level;\\n\\n    // If user has staked balances, then set their new accounting balance\\n    if (user.amount > 0) {\\n      // Get the new multiplier\\n      user.adjustEffectiveStake(pool, msg.sender, _level, false, _storage);\\n    }\\n\\n    _storage.updateUserInfo(_pid, msg.sender, user);\\n    _storage.updatePoolInfo(_pid, pool);\\n    _storage.setBoostFees(finalCost, true);\\n    emit Boost(msg.sender, _pid, _level, false);\\n  }\\n\\n  // Distributes boost fees to devs and protocol\\n  function distributeFees() public {\\n    // Reset taxes to 0 before distributing any funds\\n    _storage.setBoostFees(0, false);\\n\\n    // Distribute taxes to regenerator and team 50/50%\\n    uint256 halfDistAmt = _storage.boostFees().div(2);\\n    if (halfDistAmt > 0) {\\n      // 50% to regenerator\\n      require(_storage.ram().transfer(regeneratoraddr, halfDistAmt));\\n      // 70% of the other 50% to devs\\n      uint256 devDistAmt = halfDistAmt.mul(70).div(100);\\n      if (devDistAmt > 0) {\\n        require(_storage.ram().transfer(devaddr, devDistAmt));\\n      }\\n      // 30% of the other 50% to team\\n      uint256 teamDistAmt = halfDistAmt.mul(30).div(100);\\n      if (teamDistAmt > 0) {\\n        require(_storage.ram().transfer(teamaddr, teamDistAmt));\\n      }\\n    }\\n  }\\n\\n  // --------------------------------------------\\n  //                  Utils\\n  // --------------------------------------------\\n\\n  // Sets the dev fee for this contract\\n  // defaults at 7.24%\\n  // Note contract owner is meant to be a governance contract allowing RAM governance consensus\\n  uint16 DEV_FEE;\\n\\n  function setDevFee(uint16 _DEV_FEE) public onlyOwner {\\n    require(_DEV_FEE <= 1000, \\\"Max 10%\\\");\\n    DEV_FEE = _DEV_FEE;\\n  }\\n\\n  uint256 pending_DEV_rewards;\\n  uint256 pending_DEV_YGY_rewards;\\n\\n  // function that lets owner/governance contract\\n  // approve allowance for any token inside this contract\\n  // This means all future UNI like airdrops are covered\\n  // And at the same time allows us to give allowance to strategy contracts.\\n  // Upcoming cYFI etc vaults strategy contracts will  se this function to manage and farm yield on value locked\\n  function setStrategyContractOrDistributionContractAllowance(\\n    address tokenAddress,\\n    uint256 _amount,\\n    address contractAddress\\n  ) external {\\n    require(isContract(contractAddress) && _superAdmin == _msgSender());\\n    require(block.number > _storage.RAMVaultStartBlock().add(95_000), \\\"Gov not ready\\\");\\n    IERC20(tokenAddress).approve(contractAddress, _amount);\\n  }\\n\\n  function isContract(address addr) internal view returns (bool) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(addr)\\n    }\\n    return size > 0;\\n  }\\n\\n  function safeRamTransfer(address _to, uint256 _amount) internal {\\n    uint256 ramBal = _storage.ram().balanceOf(address(this));\\n\\n    if (_amount > ramBal) {\\n      _storage.ram().transfer(_to, ramBal);\\n    } else {\\n      _storage.ram().transfer(_to, _amount);\\n    }\\n    transferRAMDevFee();\\n    _storage.setRAMBalance(_storage.ram().balanceOf(address(this)));\\n  }\\n\\n  function safeYgyTransfer(address _to, uint256 _amount) internal {\\n    uint256 ygyBal = _storage.ygy().balanceOf(address(this));\\n\\n    if (_amount > ygyBal) {\\n      _storage.ygy().transfer(_to, ygyBal);\\n    } else {\\n      _storage.ygy().transfer(_to, _amount);\\n    }\\n    _storage.setYGYBalance(_storage.ygy().balanceOf(address(this)));\\n    transferYGYDevFee();\\n  }\\n\\n  function transferRAMDevFee() public {\\n    if (pending_DEV_rewards > 0) {\\n      uint256 devDistAmt;\\n      uint256 teamDistAmt;\\n      uint256 ramBal = _storage.ram().balanceOf(address(this));\\n      if (pending_DEV_rewards > ramBal) {\\n        devDistAmt = ramBal.mul(70).div(100);\\n        teamDistAmt = ramBal.mul(30).div(100);\\n      } else {\\n        devDistAmt = pending_DEV_rewards.mul(70).div(100);\\n        teamDistAmt = pending_DEV_rewards.mul(30).div(100);\\n      }\\n\\n      if (devDistAmt > 0) {\\n        _storage.ram().transfer(devaddr, devDistAmt);\\n      }\\n      if (teamDistAmt > 0) {\\n        _storage.ram().transfer(teamaddr, teamDistAmt);\\n      }\\n\\n      _storage.setRAMBalance(_storage.ram().balanceOf(address(this)));\\n      pending_DEV_rewards = 0;\\n    }\\n  }\\n\\n  function transferYGYDevFee() public {\\n    if (pending_DEV_YGY_rewards > 0) {\\n      uint256 devDistAmt;\\n      uint256 teamDistAmt;\\n      uint256 ygyBal = _storage.ygy().balanceOf(address(this));\\n      if (pending_DEV_YGY_rewards > ygyBal) {\\n        devDistAmt = ygyBal.mul(70).div(100);\\n        teamDistAmt = ygyBal.mul(30).div(100);\\n      } else {\\n        devDistAmt = pending_DEV_YGY_rewards.mul(70).div(100);\\n        teamDistAmt = pending_DEV_YGY_rewards.mul(30).div(100);\\n      }\\n\\n      if (devDistAmt > 0) {\\n        _storage.ygy().transfer(devaddr, devDistAmt);\\n      }\\n      if (teamDistAmt > 0) {\\n        _storage.ygy().transfer(teamaddr, teamDistAmt);\\n      }\\n\\n      _storage.setYGYBalance(_storage.ygy().balanceOf(address(this)));\\n      pending_DEV_YGY_rewards = 0;\\n    }\\n  }\\n\\n  function setAddresses(\\n    address _devaddr,\\n    address _teamaddr,\\n    address _regeneratoraddr\\n  ) external onlyOwner {\\n    devaddr = _devaddr;\\n    teamaddr = _teamaddr;\\n    regeneratoraddr = _regeneratoraddr;\\n  }\\n\\n  address private _superAdmin;\\n\\n  event SuperAdminTransfered(address previousOwner, address newOwner);\\n\\n  function superAdmin() public view returns (address) {\\n    return _superAdmin;\\n  }\\n\\n  function burnSuperAdmin() public virtual {\\n    require(_superAdmin == _msgSender());\\n    _superAdmin = address(0);\\n    emit SuperAdminTransfered(_superAdmin, address(0));\\n  }\\n\\n  function newSuperAdmin(address newOwner) public virtual {\\n    require(_superAdmin == _msgSender());\\n    require(newOwner != address(0));\\n    _superAdmin = newOwner;\\n    emit SuperAdminTransfered(_superAdmin, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xf0f9911254c689174ca27e53efe18c829ffac09ccecd2f69ee89d059ac38c5a8\",\"license\":\"MIT\"},\"contracts/StorageState.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./YGYStorageV1.sol\\\";\\n\\ncontract StorageState {\\n    YGYStorageV1 _storage;\\n}\\n\",\"keccak256\":\"0xd8f72cec39b19b1759de2ccf6128fed12314c2571bb06a04ff67893ef6471b86\"},\"contracts/YGYStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\nStorage contract for the YGY system\\n*/\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/INBUNIERC20.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\n\\n\\ncontract YGYStorageV1 is AccessControlUpgradeSafe {\\n  /* STORAGE CONFIG */\\n  using SafeMath for uint256;\\n  using PoolHelper for PoolInfo;\\n\\n  bytes32 public constant MODIFIER_ROLE = keccak256(\\\"MODIFIER_ROLE\\\");\\n\\n  function setModifierContracts(\\n    address _vault,\\n    address _router,\\n    address _nftFactory\\n  ) external {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Nono\\\");\\n    _setupRole(MODIFIER_ROLE, _vault);\\n    _setupRole(MODIFIER_ROLE, _router);\\n    _setupRole(MODIFIER_ROLE, _nftFactory);\\n  }\\n\\n  function init() external initializer {\\n    __AccessControl_init();\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    _setupRole(MODIFIER_ROLE, _msgSender());\\n  }\\n\\n  /* RAMVAULT */\\n\\n  // User properties per vault/pool.\\n  struct UserInfo {\\n    uint256 amount; // How many  tokens the user has provided.\\n    uint256 rewardDebt; // Reward debt. See explanation below.\\n    uint256 rewardDebtYGY;\\n    uint256 boostAmount;\\n    uint256 boostLevel;\\n    uint256 spentMultiplierTokens;\\n  }\\n\\n  struct NFTUsage {\\n    uint256 contractId;\\n    uint256 epoch;\\n  }\\n\\n  // Epoch -> User -> NFT ids in use.\\n  mapping(uint256 => mapping(address => NFTUsage[])) public NFTUsageInfo;\\n\\n  function setNFTInUse(uint256 _contractId, address _user) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    NFTUsageInfo[epoch][_user].push(NFTUsage({ contractId: _contractId, epoch: epoch }));\\n  }\\n\\n  function getNFTsInUse(address _user) external view returns (NFTUsage[] memory) {\\n    return NFTUsageInfo[epoch][_user];\\n  }\\n\\n  function getNFTBoost(address _user) external view returns (uint256) {\\n    uint256 NFTBoost;\\n    NFTUsage[] memory nftInfo = NFTUsageInfo[epoch][_user];\\n    for (uint256 i; i < nftInfo.length; i++) {\\n      if (epoch == nftInfo[i].epoch) {\\n        if (nftInfo[i].contractId == 5 || nftInfo[i].contractId == 6) {\\n          NFTBoost = NFTBoost.add(10);\\n        }\\n      }\\n    }\\n    return NFTBoost;\\n  }\\n\\n  // Pool/Vault/Whatever-id -> userrAddress -> userInfo\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n  function updateUserInfo(\\n    uint256 _poolId,\\n    address _userAddress,\\n    UserInfo memory _userInfo\\n  ) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    userInfo[_poolId][_userAddress] = _userInfo;\\n  }\\n\\n  // PoolId -> UserAddress -> Spender -> Allowance\\n  mapping(uint256 => mapping(address => mapping(address => uint256))) public poolAllowance;\\n\\n  function setPoolAllowance(\\n    uint256 _pid,\\n    address _user,\\n    address _spender,\\n    uint256 _allowance\\n  ) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    poolAllowance[_pid][_user][_spender] = _allowance;\\n  }\\n\\n  // Pool properties\\n  struct PoolInfo {\\n    IERC20 token; // Address of  token contract.\\n    uint256 allocPoint; // How many allocation points assigned to this pool. RAMs to distribute per block.\\n    uint256 accRAMPerShare; // Accumulated RAMs per share, times 1e12. See below.\\n    uint256 accYGYPerShare; // Accumulated YGYs per share, times 1e12. See below.\\n    bool withdrawable; // Is this pool withdrawable?\\n    uint256 effectiveAdditionalTokensFromBoosts; // Track the total additional accounting staked tokens from boosts.\\n  }\\n  // All pool properties\\n  PoolInfo[] public poolInfo;\\n\\n  function updatePoolInfo(uint256 _poolId, PoolInfo memory _userInfo) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    poolInfo[_poolId] = _userInfo;\\n  }\\n\\n  function setPool(\\n    uint256 _poolId,\\n    uint256 _allocPoint,\\n    bool _withdrawable\\n  ) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    totalAllocPoint.sub(poolInfo[_poolId].allocPoint).add(_allocPoint);\\n    poolInfo[_poolId].allocPoint = _allocPoint;\\n    poolInfo[_poolId].withdrawable = _withdrawable;\\n  }\\n\\n  function addPool(\\n    uint256 _allocPoint,\\n    IERC20 _token,\\n    bool _withdrawable\\n  ) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n      require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\n    }\\n    totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n    poolInfo.push(\\n      YGYStorageV1.PoolInfo({\\n        token: _token,\\n        allocPoint: _allocPoint,\\n        accRAMPerShare: 0,\\n        accYGYPerShare: 0,\\n        withdrawable: _withdrawable,\\n        effectiveAdditionalTokensFromBoosts: 0\\n      })\\n    );\\n  }\\n\\n  function updatePoolRewards(uint256 allRewards, uint256 allYGYRewards) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    pendingRewards = pendingRewards.sub(allRewards);\\n    pendingYGYRewards = pendingYGYRewards.sub(allYGYRewards);\\n  }\\n\\n  function addPendingRewards(uint256 _amount) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n    pendingRewards = pendingRewards.add(_amount);\\n    rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n\\n    if (YGYReserve > _amount) {\\n      pendingYGYRewards = pendingYGYRewards.add(_amount);\\n      YGYRewardsInThisEpoch = YGYRewardsInThisEpoch.add(_amount);\\n      YGYReserve = YGYReserve.sub(_amount);\\n    } else if (YGYReserve > 0) {\\n      YGYRewardsInThisEpoch = YGYRewardsInThisEpoch.add(_amount);\\n      pendingYGYRewards = pendingYGYRewards.add(YGYReserve);\\n      YGYReserve = 0;\\n    }\\n  }\\n\\n  function addAdditionalRewards(uint256 _amount, bool _ygy) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    if (_ygy) {\\n      YGYReserve = YGYReserve.add(_amount);\\n    } else {\\n      pendingRewards = pendingRewards.add(_amount);\\n      rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n    }\\n  }\\n\\n  function getPoolLength() external view returns (uint256) {\\n    return poolInfo.length;\\n  }\\n\\n  function getPoolInfo(uint256 _poolId)\\n    external\\n    view\\n    returns (\\n      IERC20 _token,\\n      uint256 _allocPointt,\\n      uint256 _accRAMPerShare,\\n      uint256 _accYGYPerShare,\\n      bool _withdrawable,\\n      uint256 _effectiveAdditionalTokensFromBoosts\\n    )\\n  {\\n    PoolInfo memory pool = poolInfo[_poolId];\\n    return (\\n      pool.token,\\n      pool.allocPoint,\\n      pool.accRAMPerShare,\\n      pool.accYGYPerShare,\\n      pool.withdrawable,\\n      pool.effectiveAdditionalTokensFromBoosts\\n    );\\n  }\\n\\n  // Total allocattion points for the whole contract\\n  uint256 public totalAllocPoint;\\n\\n  // Pending rewards.\\n  uint256 public pendingRewards;\\n  uint256 public pendingYGYRewards;\\n\\n  // Extra balance-keeping for extra-token rewards\\n  uint256 public YGYReserve;\\n\\n  function setYGYReserve(uint256 _amount) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    YGYReserve = _amount;\\n  }\\n\\n  // Reward token balance-keeping\\n  uint256 internal ramBalance;\\n\\n  function setRAMBalance(uint256 _amount) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    ramBalance = _amount;\\n  }\\n\\n  uint256 internal ygyBalance;\\n\\n  function setYGYBalance(uint256 _amount) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    ygyBalance = _amount;\\n  }\\n\\n  uint256 public RAMVaultStartBlock;\\n\\n  function setRAMVaultStartBlock() external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    RAMVaultStartBlock = block.number;\\n  }\\n\\n  uint256 public epochStartBlock;\\n\\n  function setEpochCalculationStartBlock() external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    epochStartBlock = block.number;\\n  }\\n\\n  uint256 public cumulativeRewardsSinceStart;\\n  uint256 public cumulativeYGYRewardsSinceStart;\\n\\n  function setCumulativeRewardsSinceStart() external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    cumulativeRewardsSinceStart = cumulativeRewardsSinceStart + rewardsInThisEpoch;\\n    cumulativeYGYRewardsSinceStart = cumulativeYGYRewardsSinceStart + YGYRewardsInThisEpoch;\\n  }\\n\\n  uint256 public rewardsInThisEpoch;\\n  uint256 public YGYRewardsInThisEpoch;\\n\\n  function setRewardsInThisEpoch(uint256 _amount, uint256 _ygyAmount) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    rewardsInThisEpoch = _amount;\\n    YGYRewardsInThisEpoch = _ygyAmount;\\n  }\\n\\n  uint256 public epoch;\\n\\n  // TOKENS\\n  INBUNIERC20 public ram; // The RAM token\\n  IERC20 public ygy; // The YGY token\\n  address public _YGYRAMPair;\\n  address public _YGYToken;\\n  address public _YGYWETHPair;\\n  address public _RAMToken;\\n  IWETH public _WETH;\\n  IERC20 public _dXIOTToken;\\n\\n  function initializeRAMVault() external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n    RAMVaultStartBlock = block.number;\\n    epochStartBlock = block.number;\\n\\n    boostLevelCosts[1] = 5 * 1e18; // 5 RAM tokens\\n    boostLevelCosts[2] = 15 * 1e18; // 15 RAM tokens\\n    boostLevelCosts[3] = 30 * 1e18; // 30 RAM tokens\\n    boostLevelCosts[4] = 60 * 1e18; // 60 RAM tokens\\n    boostLevelMultipliers[1] = 5; // 5%\\n    boostLevelMultipliers[2] = 15; // 15%\\n    boostLevelMultipliers[3] = 30; // 30%\\n    boostLevelMultipliers[4] = 60; // 60%\\n  }\\n\\n  function setTokens(\\n    address RAMToken,\\n    address YGYToken,\\n    address WETH,\\n    address YGYRAMPair,\\n    address YGYWethPair,\\n    address[] memory nfts,\\n    address dXIOTToken\\n  ) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n    ram = INBUNIERC20(RAMToken);\\n    ygy = IERC20(YGYToken);\\n    _RAMToken = RAMToken;\\n    _YGYToken = YGYToken;\\n    _WETH = IWETH(WETH);\\n    _YGYRAMPair = YGYRAMPair;\\n    _YGYWETHPair = YGYWethPair;\\n    _dXIOTToken = IERC20(dXIOTToken);\\n    for (uint256 i = 0; i < nfts.length; i++) {\\n      _NFTs[i + 1] = nfts[i];\\n    }\\n  }\\n\\n  // Boosts\\n  uint256 public boostFees;\\n\\n  function setBoostFees(uint256 _amount, bool _add) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    if (_add) {\\n      boostFees = boostFees.add(_amount);\\n    } else {\\n      boostFees = _amount;\\n    }\\n  }\\n\\n  mapping(uint256 => uint256) public boostLevelCosts;\\n\\n  function checkRewards(uint256 _pid, address _user) external view returns (uint256 pendingRAM, uint256 pendingYGY) {\\n    PoolInfo storage pool = poolInfo[_pid];\\n    UserInfo storage user = userInfo[_pid][_user];\\n\\n    uint256 effectiveAmount = user.amount.add(user.boostAmount);\\n    uint256 YGYRewards;\\n    if (pool.accYGYPerShare > 0) {\\n      YGYRewards = effectiveAmount.mul(pool.accYGYPerShare).div(1e12).sub(user.rewardDebtYGY);\\n    }\\n    return (effectiveAmount.mul(pool.accRAMPerShare).div(1e12).sub(user.rewardDebt), YGYRewards);\\n  }\\n\\n  function getBoostLevelCost(uint256 _level) external view returns (uint256) {\\n    return boostLevelCosts[_level];\\n  }\\n\\n  mapping(uint256 => uint256) public boostLevelMultipliers;\\n\\n  function getBoostLevelMultiplier(uint256 _level) external view returns (uint256) {\\n    return boostLevelMultipliers[_level];\\n  }\\n\\n  function updateBoosts(uint256[] memory _boostMultipliers, uint256[] memory _boostCosts) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    // Update boost costs\\n    for (uint8 i; i <= _boostMultipliers.length; i++) {\\n      boostLevelCosts[i + 1] = _boostCosts[i];\\n      boostLevelMultipliers[i + 1] = _boostMultipliers[i];\\n    }\\n  }\\n\\n  // For easy graphing historical epoch rewards\\n  mapping(uint256 => uint256) public epochRewards;\\n\\n  function setEpochRewards() external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    epochRewards[epoch] = rewardsInThisEpoch;\\n    epoch++;\\n  }\\n\\n  function averageFeesPerBlockSinceStart() external view returns (uint256 averagePerBlock, uint256 ygyPerBlock) {\\n    return (\\n      cumulativeRewardsSinceStart.add(rewardsInThisEpoch).div(block.number.sub(RAMVaultStartBlock)),\\n      cumulativeYGYRewardsSinceStart.add(YGYRewardsInThisEpoch).div(block.number.sub(RAMVaultStartBlock))\\n    );\\n  }\\n\\n  // Returns averge fees in this epoch\\n  function averageFeesPerBlockEpoch() external view returns (uint256 averagePerBlock, uint256 ygyPerBlock) {\\n    return (rewardsInThisEpoch.div(block.number.sub(epochStartBlock)), YGYRewardsInThisEpoch.div(block.number.sub(epochStartBlock)));\\n  }\\n\\n  /*\\n         ROUTER\\n    */\\n\\n  // Mapping of (user => last ticket level)\\n  mapping(address => uint256) public lastTicketLevel;\\n\\n  // Setter for contracts using\\n  function setLastTicketLevel(address _user, uint256 _level) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    lastTicketLevel[_user] = _level;\\n  }\\n\\n  // Total eth contributed to a vault.\\n  mapping(address => uint256) public liquidityContributedEthValue;\\n\\n  // Set value for mapping from external contracts\\n  function setLiquidityContributedEthValue(\\n    address _spender,\\n    uint256 _amount,\\n    bool _delete\\n  ) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    if (_delete) {\\n      delete liquidityContributedEthValue[_spender];\\n    } else {\\n      liquidityContributedEthValue[_spender] = liquidityContributedEthValue[_spender].add(_amount);\\n    }\\n  }\\n\\n  // NFT STUFF\\n  // Mapping of (level number => NFT address)\\n  mapping(uint256 => address) public _NFTs;\\n\\n  // Property object, extra field for arbirtrary values in future\\n  struct NFTProperty {\\n    string pType;\\n    uint256 pValue;\\n    bytes32 extra;\\n  }\\n\\n  mapping(address => NFTProperty[]) public nftPropertyChoices;\\n\\n  function setNFTPropertiesForContract(address _contractAddress, NFTProperty[] memory _properties) external {\\n    require(hasRole(MODIFIER_ROLE, _msgSender()));\\n    for (uint256 i; i < _properties.length; i++) {\\n      nftPropertyChoices[_contractAddress].push(_properties[i]);\\n    }\\n  }\\n\\n  function getNFTAddress(uint256 _contractId) external view returns (address) {\\n    return _NFTs[_contractId];\\n  }\\n\\n  function getNFTProperty(uint256 _contractId, uint256 _index)\\n    external\\n    view\\n    returns (\\n      string memory pType,\\n      uint256 pValue,\\n      bytes32 extra\\n    )\\n  {\\n    address NFTAddress = _NFTs[_contractId];\\n    NFTProperty memory properties = nftPropertyChoices[NFTAddress][_index];\\n\\n    return (properties.pType, properties.pValue, properties.extra);\\n  }\\n\\n  function getNFTPropertyCount(uint256 _contractId) external view returns (uint256) {\\n    address NFTAddress = _NFTs[_contractId];\\n    NFTProperty[] memory properties = nftPropertyChoices[NFTAddress];\\n    return properties.length;\\n  }\\n\\n  // General-purpose mappings\\n  mapping(bytes32 => mapping(address => bool)) booleanMapStorage;\\n  uint256[] public booleanMapStorageCount;\\n\\n  function getBooleanMapValue(string memory _key, address _address) external view returns (bool) {\\n    bytes32 key = stringToBytes32(_key);\\n    booleanMapStorage[key][_address];\\n  }\\n\\n  mapping(bytes32 => address) addressStorage;\\n  uint256[] public addressStorageCount;\\n\\n  function getAddressStorage(string memory _key) external view returns (address) {\\n    bytes32 key = stringToBytes32(_key);\\n    return addressStorage[key];\\n  }\\n\\n  mapping(bytes32 => uint256) uintStorage;\\n  uint256[] public uintStorageCount;\\n\\n  struct StateStruct {\\n    bytes32 name;\\n    mapping(bytes32 => bytes32) value;\\n  }\\n\\n  struct ObjectStruct {\\n    StateStruct state;\\n    address owner;\\n    bool isObject;\\n  }\\n\\n  function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n    bytes memory tempEmptyStringTest = bytes(source);\\n    if (tempEmptyStringTest.length == 0) {\\n      return 0x0;\\n    }\\n\\n    assembly {\\n      result := mload(add(source, 32))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1742ebb230872d905e01bc994be4fa09847190b7fe71ea398a8a6a68c6b14a81\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INBUNIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INBUNIERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Log(string log);\\n}\\n\",\"keccak256\":\"0x8b72d4c7a32eb1cd9c2ef9f1e02101dda1f85e396d51ed3c6c99bfa6a271ea4f\",\"license\":\"MIT\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\ninterface INFT {\\n  function mint(\\n    address _to,\\n    uint256 _randomness,\\n    YGYStorageV1 _storage\\n  ) external returns (uint256);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function _tokenURI() external view returns (string memory);\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function contractId() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function getTokenProperty(uint256 _tokenId) external view returns (YGYStorageV1.NFTProperty memory);\\n}\\n\",\"keccak256\":\"0x145b2495a783e51119c3aef8208ab98c1d83873baf6f3b80e0cd02a17715464d\",\"license\":\"MIT\"},\"contracts/libraries/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nlibrary Bytes {\\n    using SafeMath for uint256;\\n\\n    function toUint256(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (uint256 value)\\n    {\\n        assembly {\\n            value := mload(add(_bytes, 0x20))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90ace1e1fa4eaa67f1cb5b7d013413cecd9597e119dfb49c63f03d1dd5f1ab61\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\nlibrary PoolHelper {\\n  using SafeMath for uint256;\\n\\n  function getPool(uint256 _poolId, YGYStorageV1 _storage) internal view returns (YGYStorageV1.PoolInfo memory) {\\n    (\\n      IERC20 token,\\n      uint256 allocPoint,\\n      uint256 accRAMPerShare,\\n      uint256 accYGYPerShare,\\n      bool withdrawable,\\n      uint256 effectiveAdditionalTokensFromBoosts\\n    ) = _storage.poolInfo(_poolId);\\n    return\\n      YGYStorageV1.PoolInfo({\\n        token: token,\\n        allocPoint: allocPoint,\\n        accRAMPerShare: accRAMPerShare,\\n        accYGYPerShare: accYGYPerShare,\\n        withdrawable: withdrawable,\\n        effectiveAdditionalTokensFromBoosts: effectiveAdditionalTokensFromBoosts\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xe27d6f1c4bc52f44b2e105bea9bfddd397a5a344dd0bc3f90867561c52970728\",\"license\":\"UNLICENSED\"},\"contracts/libraries/UserHelper.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"../StorageState.sol\\\";\\n\\nlibrary UserHelper {\\n  using SafeMath for uint256;\\n\\n  function effectiveAmount(YGYStorageV1.UserInfo memory self) internal pure returns (uint256) {\\n    return self.amount.add(self.boostAmount);\\n  }\\n\\n  function getUser(\\n    uint256 _poolId,\\n    address _user,\\n    YGYStorageV1 _storage\\n  ) internal view returns (YGYStorageV1.UserInfo memory) {\\n    (uint256 amount, uint256 rewardDebt, uint256 rewardDebtYGY, uint256 boostAmount, uint256 boostLevel, uint256 spentMultiplierTokens) =\\n      _storage.userInfo(_poolId, _user);\\n\\n    return\\n      YGYStorageV1.UserInfo({\\n        amount: amount,\\n        rewardDebt: rewardDebt,\\n        rewardDebtYGY: rewardDebtYGY,\\n        boostAmount: boostAmount,\\n        boostLevel: boostLevel,\\n        spentMultiplierTokens: spentMultiplierTokens\\n      });\\n  }\\n\\n  function userRewards(\\n    YGYStorageV1.UserInfo memory self,\\n    uint256 _poolId,\\n    YGYStorageV1 _storage\\n  ) internal view returns (uint256 RAMRewards, uint256 YGYRewards) {\\n    (, , uint256 accRAMPerShare, uint256 accYGYPerShare, , ) = YGYStorageV1(_storage).getPoolInfo(_poolId);\\n    return (\\n      effectiveAmount(self).mul(accRAMPerShare).div(1e12).sub(self.rewardDebt),\\n      effectiveAmount(self).mul(accYGYPerShare).div(1e12).sub(self.rewardDebtYGY)\\n    );\\n  }\\n\\n  // Returns the multiplier for user.\\n  function getTotalMultiplier(\\n    YGYStorageV1.UserInfo memory self,\\n    uint256 _level,\\n    address _user,\\n    YGYStorageV1 _storage\\n  ) internal view returns (uint256) {\\n    uint256 NFTBoost = _storage.getNFTBoost(_user);\\n    return _storage.getBoostLevelMultiplier(_level).add(NFTBoost);\\n  }\\n\\n  function updateDebts(YGYStorageV1.UserInfo memory self, YGYStorageV1.PoolInfo memory _pool) internal pure {\\n    self.rewardDebt = effectiveAmount(self).mul(_pool.accRAMPerShare).div(1e12);\\n    self.rewardDebtYGY = effectiveAmount(self).mul(_pool.accYGYPerShare).div(1e12);\\n  }\\n\\n  function adjustEffectiveStake(\\n    YGYStorageV1.UserInfo memory self,\\n    YGYStorageV1.PoolInfo memory _pool,\\n    address _user,\\n    uint256 _newLevel,\\n    bool _isWithdraw,\\n    YGYStorageV1 _storage\\n  ) internal view {\\n    uint256 prevBalancesAccounting = self.boostAmount;\\n    // Calculate and set self's new accounting balance\\n    uint256 accTotalMultiplier = getTotalMultiplier(self, _newLevel > 0 ? _newLevel : self.boostLevel, _user, _storage);\\n\\n    uint256 newBalancesAccounting = self.amount.mul(accTotalMultiplier).div(100);\\n    self.boostAmount = newBalancesAccounting;\\n\\n    // Adjust total accounting supply accordingly\\n    if (_isWithdraw) {\\n      _pool.effectiveAdditionalTokensFromBoosts = _pool.effectiveAdditionalTokensFromBoosts.sub(\\n        prevBalancesAccounting.sub(newBalancesAccounting)\\n      );\\n    } else {\\n      if (prevBalancesAccounting > newBalancesAccounting) {\\n        _pool.effectiveAdditionalTokensFromBoosts = _pool.effectiveAdditionalTokensFromBoosts.sub(prevBalancesAccounting).add(\\n          newBalancesAccounting\\n        );\\n      } else {\\n        _pool.effectiveAdditionalTokensFromBoosts = _pool.effectiveAdditionalTokensFromBoosts.add(newBalancesAccounting).sub(\\n          prevBalancesAccounting\\n        );\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7465f8550cdea68457ecfd28ffe0a679db735d8b37063b7b3cf89b4da7d85b36\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2b2dfdece146425af2c3468ccd72c52cbf709eb38421a300e21ef7f57b033fce\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506154ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806364482f7911610104578063a676860a116100a2578063dbe0901f11610071578063dbe0901f14610390578063e18cb4fe146103a3578063e2bbb158146103b6578063f2fde38b146103c9576101da565b8063a676860a1461035a578063bb57ad201461036d578063c401458814610375578063cc1362ec14610388576101da565b80637abceffd116100de5780637abceffd1461032f5780637cf75ca3146103425780638da5cb5b1461034a578063934eaa5014610352576101da565b806364482f791461030157806370876c9814610314578063715018a614610327576101da565b80633b6a68491161017c5780634cf5fbf51161014b5780634cf5fbf5146102c05780635312ea8e146102d35780635db64aba146102e6578063630b5ba1146102f9576101da565b80633b6a6849146102745780633fe6a27814610287578063423d6fa01461029a578063441a3e70146102ad576101da565b806329575f6a116101b857806329575f6a14610231578063363bf964146102465780633a0967cd146102595780633aab0a621461026c576101da565b80630962ef79146101df57806310178d9c146101f45780631459457a1461021e575b600080fd5b6101f26101ed366004614d3c565b6103dc565b005b610207610202366004614d6c565b610565565b604051610215929190614f67565b60405180910390f35b6101f261022c366004614aa9565b6105f2565b610239610705565b6040516102159190614ee1565b6101f2610254366004614a5f565b610714565b6101f2610267366004614b94565b610788565b6101f26108b0565b6101f2610282366004614d3c565b610adf565b6101f2610295366004614d3c565b610c94565b6101f26102a8366004614d3c565b610e16565b6101f26102bb366004614dd1565b610ee7565b6101f26102ce366004614b94565b610ef7565b6101f26102e1366004614d3c565b611135565b6101f26102f4366004614b19565b6112d8565b6101f261169b565b6101f261030f366004614e15565b6117c3565b6101f2610322366004614dd1565b611834565b6101f2611bfd565b6101f261033d366004614d9b565b611c7c565b6101f2611ced565b6102396121eb565b6101f26121fa565b6101f2610368366004614a43565b61225f565b6101f26122f2565b6101f2610383366004614b5e565b612759565b6101f26128bb565b6101f261039e366004614b94565b612db2565b6101f26103b1366004614d1a565b612e6c565b6101f26103c4366004614dd1565b612ee9565b6101f26103d7366004614a43565b613126565b6103e46149a8565b6000546103fb9083906001600160a01b03166131dd565b90506104056149e9565b60005461041e90849033906001600160a01b03166132b0565b60608101519091501561044957600080546104499183918591339181906001600160a01b0316613378565b6104538333613441565b61045d818361347b565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a906104919086903390869060040161530d565b600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb791506104f59086908690600401615371565b600060405180830381600087803b15801561050f57600080fd5b505af1158015610523573d6000803e3d6000fd5b505050507fc05cbf47ef4152ea1b2446fb1ba8eb9c7285054d9c85f2f52c294200d8d1d38b83336040516105589291906152d1565b60405180910390a1505050565b60008054604051630405e36760e21b815282916001600160a01b0316906310178d9c9061059890879087906004016152d1565b604080518083038186803b1580156105af57600080fd5b505afa1580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e79190614df2565b915091509250929050565b600054600160a81b900460ff168061060d575061060d6134c9565b806106225750600054600160a01b900460ff16155b6106475760405162461bcd60e51b815260040161063e90615158565b60405180910390fd5b600054600160a81b900460ff1615801561067e576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6106866134cf565b609a8054609d80546001600160a01b03199081166001600160a01b038b8116919091179092556099805482168a841617905560978054821689841617905560988054821688841617905561ffff60a01b1990921660b560a21b1790911690841617905580156106fd576000805460ff60a81b191690555b505050505050565b609d546001600160a01b031690565b61071c613578565b6065546001600160a01b039081169116146107495760405162461bcd60e51b815260040161063e90615123565b609780546001600160a01b039485166001600160a01b031991821617909155609880549385169382169390931790925560998054919093169116179055565b6000805460405163158dd39360e01b81526001600160a01b039091169063158dd393906107bd90869088903390600401615331565b60206040518083038186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d9190614d54565b90508181101561082f5760405162461bcd60e51b815260040161063e906150bc565b6000546001600160a01b03166360443a4584863361084d868861357c565b6040518563ffffffff1660e01b815260040161086c94939291906152e8565b600060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050506108aa838386336135c5565b50505050565b6000805460408051632515621d60e11b815290516001600160a01b0390921692634a2ac43a9260048084019382900301818387803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b5050600080546040805163221205f760e21b815290516001600160a01b03909216945063884817dc9350600480820193929182900301818387803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b50506000805460405163eaac617360e01b81526001600160a01b03909116935063eaac6173925061099691908190600401614f67565b600060405180830381600087803b1580156109b057600080fd5b505af11580156109c4573d6000803e3d6000fd5b5050600080546040805163022fed0760e11b815290516001600160a01b03909216945063045fda0e9350600480820193929182900301818387803b158015610a0b57600080fd5b505af1158015610a1f573d6000803e3d6000fd5b505050507febad8099c467528a56c98b63c8d476d251cf1ffb4c75db94b4d23fa2b6a1e33560008054906101000a90046001600160a01b03166001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190614d54565b604051610ad591906152c8565b60405180910390a1565b610ae7613578565b6065546001600160a01b03908116911614610b145760405162461bcd60e51b815260040161063e90615123565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b989190614be4565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b8152600401610bc793929190614ef5565b602060405180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190614bc8565b8015610c255750600081115b610c2e57600080fd5b600080546040516301e0a3fb60e61b81526001600160a01b0390911691637828fec091610c5f918591600401614f57565b600060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b5050505050565b610c9c613578565b6065546001600160a01b03908116911614610cc95760405162461bcd60e51b815260040161063e90615123565b60008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1557600080fd5b505afa158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d9190614be4565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b8152600401610d7c93929190614ef5565b602060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190614bc8565b8015610dda5750600081115b610de357600080fd5b6000546040516301e0a3fb60e61b81526001600160a01b0390911690637828fec090610c5f908490600190600401614f57565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190614be4565b6001600160a01b0316336001600160a01b031614610eb757600080fd5b600054604051630211eb7d60e51b81526001600160a01b039091169063423d6fa090610c5f9084906004016152c8565b610ef3828233336135c5565b5050565b610eff6149a8565b600054610f169084906001600160a01b03166131dd565b9050610f206149e9565b600054610f3990859087906001600160a01b03166132b0565b9050610f458486613441565b82156110185781516040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610f7e90339030908890600401614ef5565b602060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd09190614bc8565b508051610fdd90846137db565b81526060810151151580610ff5575060008160800151115b1561101857600080546110189183918591899181906001600160a01b0316613378565b611022818361347b565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a906110569087908990869060040161530d565b600060405180830381600087803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb791506110ba9087908690600401615371565b600060405180830381600087803b1580156110d457600080fd5b505af11580156110e8573d6000803e3d6000fd5b5050505083856001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161112691906152c8565b60405180910390a35050505050565b61113d6149a8565b6000546111549083906001600160a01b03166131dd565b905080608001516111775760405162461bcd60e51b815260040161063e906151ee565b61117f6149e9565b60005461119890849033906001600160a01b03166132b0565b805183519192506111b4916001600160a01b0316903390613800565b8051604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595916111e8916152c8565b60405180910390a3600080825260608201819052602082018190526040808301829052905490516303c4399d60e11b81526001600160a01b0390911690630788733a9061123d9086903390869060040161530d565b600060405180830381600087803b15801561125757600080fd5b505af115801561126b573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb791506112a19086908690600401615371565b600060405180830381600087803b1580156112bb57600080fd5b505af11580156112cf573d6000803e3d6000fd5b50505050505050565b609a546001600160a01b031633146113025760405162461bcd60e51b815260040161063e90614fa8565b8261130b614a1f565b604051631c72e6e760e11b81526001600160a01b038316906338e5cdce906113379087906004016152c8565b60006040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138b9190810190614c5f565b90506113956149e9565b6000546113ae90859089906001600160a01b03166132b0565b90506113b86149a8565b6000546113cf9086906001600160a01b03166131dd565b90507fb11f0630abdc3c49238c394684d47c0a22fb6922fdf83b64cfdd3d9769f1a26383600001516040516020016114079190614ec5565b6040516020818303038152906040528051906020012014156115245760008054906101000a90046001600160a01b03166001600160a01b0316638792a265856001600160a01b0316638291286c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147e57600080fd5b505afa158015611492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b69190614d54565b8a6040518363ffffffff1660e01b81526004016114d49291906152d1565b600060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505060008054611524935085925084918c9181906001600160a01b0316613378565b604051630852cd8d60e31b81526001600160a01b038516906342966c68906115509089906004016152c8565b600060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b50506000546040516303c4399d60e11b81526001600160a01b039091169250630788733a91506115b69088908c90879060040161530d565b600060405180830381600087803b1580156115d057600080fd5b505af11580156115e4573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb7915061161a9088908590600401615371565b600060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b50505050600085896001600160a01b03167f2afbc6f74788c58c5d56fca9812c385d27a7bf8004bd05cd1b9f057ad145f69d60016040516116899190614f4c565b60405180910390a45050505050505050565b60008060005b60008054906101000a90046001600160a01b03166001600160a01b031663b3944d526040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190614d54565b8110156117625760008061173883613856565b909250905061174785836137db565b945061175384826137db565b935050508060010190506116a1565b50600054604051635105a97560e01b81526001600160a01b0390911690635105a975906117959085908590600401614f67565b600060405180830381600087803b1580156117af57600080fd5b505af11580156106fd573d6000803e3d6000fd5b6117cb613578565b6065546001600160a01b039081169116146117f85760405162461bcd60e51b815260040161063e90615123565b61180061169b565b60005460405163236535f560e11b81526001600160a01b03909116906346ca6bea906112a1908690869086906004016153c6565b61183c6149a8565b6000546118539084906001600160a01b03166131dd565b905061185d6149e9565b60005461187690859033906001600160a01b03166132b0565b905080608001518311801561188c575060048311155b61189557600080fd5b60008054604051636a9d1f6f60e01b81526001600160a01b0390911690636a9d1f6f906118c69087906004016152c8565b60206040518083038186803b1580156118de57600080fd5b505afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190614d54565b905060006119318360a001518361357c90919063ffffffff16565b905060008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561197f57600080fd5b505afa158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b79190614be4565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b81526004016119e693929190614ef5565b602060405180830381600087803b158015611a0057600080fd5b505af1158015611a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a389190614bc8565b611a4157600080fd5b60a0830151611a5090826137db565b60a084015260808301859052825115611a825760008054611a82918591879133918a91906001600160a01b0316613378565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a90611ab69089903390889060040161530d565b600060405180830381600087803b158015611ad057600080fd5b505af1158015611ae4573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150611b1a9089908890600401615371565b600060405180830381600087803b158015611b3457600080fd5b505af1158015611b48573d6000803e3d6000fd5b5050600054604051631be9449960e11b81526001600160a01b0390911692506337d289329150611b7f908490600190600401614f57565b600060405180830381600087803b158015611b9957600080fd5b505af1158015611bad573d6000803e3d6000fd5b505050508486336001600160a01b03167f2afbc6f74788c58c5d56fca9812c385d27a7bf8004bd05cd1b9f057ad145f69d6000604051611bed9190614f4c565b60405180910390a4505050505050565b611c05613578565b6065546001600160a01b03908116911614611c325760405162461bcd60e51b815260040161063e90615123565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b611c84613578565b6065546001600160a01b03908116911614611cb15760405162461bcd60e51b815260040161063e90615123565b611cb961169b565b600054604051637abceffd60e01b81526001600160a01b0390911690637abceffd906112a190869086908690600401615350565b609b54156121e95760008060008060009054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4757600080fd5b505afa158015611d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7f9190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611daa9190614ee1565b60206040518083038186803b158015611dc257600080fd5b505afa158015611dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfa9190614d54565b905080609b541115611e3557611e1c6064611e16836046613c85565b90613cbf565b9250611e2e6064611e1683601e613c85565b9150611e70565b611e506064611e166046609b54613c8590919063ffffffff16565b9250611e6d6064611e16601e609b54613c8590919063ffffffff16565b91505b8215611f815760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611ec257600080fd5b505afa158015611ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efa9190614be4565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611f2d929116908790600401614f33565b602060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f9190614bc8565b505b81156120925760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd357600080fd5b505afa158015611fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200b9190614be4565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261203e929116908690600401614f33565b602060405180830381600087803b15801561205857600080fd5b505af115801561206c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120909190614bc8565b505b60005460408051638f33b5e560e01b815290516001600160a01b0390921691638f838a9f918391638f33b5e591600480820192602092909190829003018186803b1580156120df57600080fd5b505afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121429190614ee1565b60206040518083038186803b15801561215a57600080fd5b505afa15801561216e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121929190614d54565b6040518263ffffffff1660e01b81526004016121ae91906152c8565b600060405180830381600087803b1580156121c857600080fd5b505af11580156121dc573d6000803e3d6000fd5b50506000609b5550505050505b565b6065546001600160a01b031690565b612202613578565b609d546001600160a01b0390811691161461221c57600080fd5b609d80546001600160a01b03191690556040517ff564c40f4f45e62a2c1e6c22e8bfb46501f0f71fa1c72e5358903fa1115a4b6490610ad5906000908190614f19565b612267613578565b609d546001600160a01b0390811691161461228157600080fd5b6001600160a01b03811661229457600080fd5b609d80546001600160a01b0319166001600160a01b0383811691909117918290556040517ff564c40f4f45e62a2c1e6c22e8bfb46501f0f71fa1c72e5358903fa1115a4b64926122e79216908490614f19565b60405180910390a150565b60008054604051631be9449960e11b81526001600160a01b03909116916337d289329161232491908190600401614f57565b600060405180830381600087803b15801561233e57600080fd5b505af1158015612352573d6000803e3d6000fd5b5050505060006123e1600260008054906101000a90046001600160a01b03166001600160a01b03166309e3de416040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a957600080fd5b505afa1580156123bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e169190614d54565b905080156127565760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561243557600080fd5b505afa158015612449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246d9190614be4565b60995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926124a0929116908590600401614f33565b602060405180830381600087803b1580156124ba57600080fd5b505af11580156124ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f29190614bc8565b6124fb57600080fd5b600061250d6064611e16846046613c85565b905080156126275760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561256157600080fd5b505afa158015612575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125999190614be4565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926125cc929116908590600401614f33565b602060405180830381600087803b1580156125e657600080fd5b505af11580156125fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261e9190614bc8565b61262757600080fd5b60006126396064611e1685601e613c85565b905080156127535760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561268d57600080fd5b505afa1580156126a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c59190614be4565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926126f8929116908590600401614f33565b602060405180830381600087803b15801561271257600080fd5b505af1158015612726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274a9190614bc8565b61275357600080fd5b50505b50565b61276281613d01565b80156127835750612771613578565b609d546001600160a01b039081169116145b61278c57600080fd5b61281d6201731860008054906101000a90046001600160a01b03166001600160a01b03166331db122c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127df57600080fd5b505afa1580156127f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128179190614d54565b906137db565b431161283b5760405162461bcd60e51b815260040161063e906151a6565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b3906128699084908690600401614f33565b602060405180830381600087803b15801561288357600080fd5b505af1158015612897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190614bc8565b609c54156121e95760008060008060009054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561291557600080fd5b505afa158015612929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294d9190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016129789190614ee1565b60206040518083038186803b15801561299057600080fd5b505afa1580156129a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c89190614d54565b905080609c5411156129fd576129e46064611e16836046613c85565b92506129f66064611e1683601e613c85565b9150612a38565b612a186064611e166046609c54613c8590919063ffffffff16565b9250612a356064611e16601e609c54613c8590919063ffffffff16565b91505b8215612b495760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8a57600080fd5b505afa158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac29190614be4565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612af5929116908790600401614f33565b602060405180830381600087803b158015612b0f57600080fd5b505af1158015612b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b479190614bc8565b505b8115612c5a5760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9b57600080fd5b505afa158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd39190614be4565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612c06929116908690600401614f33565b602060405180830381600087803b158015612c2057600080fd5b505af1158015612c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c589190614bc8565b505b6000546040805163fb70c3bf60e01b815290516001600160a01b039092169163094601f191839163fb70c3bf91600480820192602092909190829003018186803b158015612ca757600080fd5b505afa158015612cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdf9190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612d0a9190614ee1565b60206040518083038186803b158015612d2257600080fd5b505afa158015612d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5a9190614d54565b6040518263ffffffff1660e01b8152600401612d7691906152c8565b600060405180830381600087803b158015612d9057600080fd5b505af1158015612da4573d6000803e3d6000fd5b50506000609c555050505050565b6000546040516360443a4560e01b81526001600160a01b03909116906360443a4590612de89085903390889087906004016152e8565b600060405180830381600087803b158015612e0257600080fd5b505af1158015612e16573d6000803e3d6000fd5b50505050826001600160a01b0316336001600160a01b03167fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a78484604051612e5f929190614f67565b60405180910390a3505050565b612e74613578565b6065546001600160a01b03908116911614612ea15760405162461bcd60e51b815260040161063e90615123565b6103e88161ffff161115612ec75760405162461bcd60e51b815260040161063e906151cd565b609a805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b612ef16149a8565b600054612f089084906001600160a01b03166131dd565b9050612f126149e9565b600054612f2b90859033906001600160a01b03166132b0565b9050612f378433613441565b821561300a5781516040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612f7090339030908890600401614ef5565b602060405180830381600087803b158015612f8a57600080fd5b505af1158015612f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc29190614bc8565b508051612fcf90846137db565b81526060810151151580612fe7575060008160800151115b1561300a576000805461300a9183918591339181906001600160a01b0316613378565b613014818361347b565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a906130489087903390869060040161530d565b600060405180830381600087803b15801561306257600080fd5b505af1158015613076573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb791506130ac9087908690600401615371565b600060405180830381600087803b1580156130c657600080fd5b505af11580156130da573d6000803e3d6000fd5b5050505083336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161311891906152c8565b60405180910390a350505050565b61312e613578565b6065546001600160a01b0390811691161461315b5760405162461bcd60e51b815260040161063e90615123565b6001600160a01b0381166131815760405162461bcd60e51b815260040161063e90614fd3565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b6131e56149a8565b600080600080600080876001600160a01b0316631526fe278a6040518263ffffffff1660e01b815260040161321a91906152c8565b60c06040518083038186803b15801561323257600080fd5b505afa158015613246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326a9190614c00565b6040805160c0810182526001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a082015296505050505050505b92915050565b6132b86149e9565b600080600080600080876001600160a01b03166393f1a40b8b8b6040518363ffffffff1660e01b81526004016132ef9291906152d1565b60c06040518083038186803b15801561330757600080fd5b505afa15801561331b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333f9190614e42565b6040805160c0810182529687526020870195909552938501929092526060840152608083015260a08201529a9950505050505050505050565b6060860151600061339b8886613392578960800151613394565b865b8886613d07565b905060006133bb6064611e16848c60000151613c8590919063ffffffff16565b60608a01819052905084156133ec576133e26133d7848361357c565b60a08a01519061357c565b60a0890152613436565b8083111561340f576133e281612817858b60a0015161357c90919063ffffffff16565b6134308361342a838b60a001516137db90919063ffffffff16565b9061357c565b60a08901525b505050505050505050565b61344961169b565b6000806134568484610565565b9092509050811561346b5761346b8383613ddc565b80156108aa576108aa838261421a565b61349b64e8d4a51000611e1683604001516134958661468a565b90613c85565b602083015260608101516134bd9064e8d4a5100090611e16906134958661468a565b60409092019190915250565b303b1590565b600054600160a81b900460ff16806134ea57506134ea6134c9565b806134ff5750600054600160a01b900460ff16155b61351b5760405162461bcd60e51b815260040161063e90615158565b600054600160a81b900460ff16158015613552576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b61355a61469e565b613562614736565b8015612756576000805460ff60a81b1916905550565b3390565b60006135be83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614827565b9392505050565b6135cd6149a8565b6000546135e49086906001600160a01b03166131dd565b905080608001516136075760405162461bcd60e51b815260040161063e90615267565b61360f6149e9565b60005461362890879086906001600160a01b03166132b0565b9050848160000151101561364e5760405162461bcd60e51b815260040161063e90615085565b6136588685613441565b84156136bd57805161366a908661357c565b81528151613682906001600160a01b03168487613800565b600081606001511180613699575060008160800151115b156136bd57600080546136bd918391859188916001906001600160a01b0316613378565b6136c7818361347b565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a906136fb9089903390869060040161530d565b600060405180830381600087803b15801561371557600080fd5b505af1158015613729573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb7915061375f9089908690600401615371565b600060405180830381600087803b15801561377957600080fd5b505af115801561378d573d6000803e3d6000fd5b5050505085836001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568876040516137cb91906152c8565b60405180910390a3505050505050565b6000828201838110156135be5760405162461bcd60e51b815260040161063e90615019565b6127538363a9059cbb60e01b848460405160240161381f929190614f33565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614853565b6000806138616149a8565b6000546138789085906001600160a01b03166131dd565b9050600081600001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016138ac9190614ee1565b60206040518083038186803b1580156138c457600080fd5b505afa1580156138d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fc9190614d54565b90508061391157600080935093505050613c80565b600061392a8360a00151836137db90919063ffffffff16565b9050613a3560008054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561397b57600080fd5b505afa15801561398f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b39190614d54565b602080860151600054604080516376f69fed60e11b81529051611e16946001600160a01b039093169263eded3fda9260048082019391829003018186803b1580156139fd57600080fd5b505afa158015613a11573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134959190614d54565b609a54909550600090613a5c9061271090611e16908990600160a01b900461ffff16613c85565b609b54909150613a6c90826137db565b609b556000805460408051638b6ff57b60e01b815290516001600160a01b0390921691638b6ff57b91600480820192602092909190829003018186803b158015613ab557600080fd5b505afa158015613ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aed9190614d54565b90508015613be957600054604080516317caf6f160e01b81529051613b83926001600160a01b0316916317caf6f1916004808301926020929190829003018186803b158015613b3b57600080fd5b505afa158015613b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b739190614d54565b6020870151611e16908490613c85565b609a54909650600090613baa9061271090611e16908a90600160a01b900461ffff16613c85565b609c54909150613bba90826137db565b609c55613be2613bd785611e1664e8d4a510006134958c8761357c565b6060880151906137db565b6060870152505b613c0e613c0384611e1664e8d4a510006134958c8861357c565b6040870151906137db565b604080870191909152600054905163d4665bb760e01b81526001600160a01b039091169063d4665bb790613c48908b908990600401615371565b600060405180830381600087803b158015613c6257600080fd5b505af1158015613c76573d6000803e3d6000fd5b5050505050505050505b915091565b600082613c94575060006132aa565b82820282848281613ca157fe5b04146135be5760405162461bcd60e51b815260040161063e906150e2565b60006135be83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614938565b3b151590565b600080826001600160a01b03166391328af2856040518263ffffffff1660e01b8152600401613d369190614ee1565b60206040518083038186803b158015613d4e57600080fd5b505afa158015613d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d869190614d54565b9050613dd081846001600160a01b0316636798f19f886040518263ffffffff1660e01b8152600401613db891906152c8565b60206040518083038186803b1580156127df57600080fd5b9150505b949350505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613e2b57600080fd5b505afa158015613e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e639190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613e8e9190614ee1565b60206040518083038186803b158015613ea657600080fd5b505afa158015613eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ede9190614d54565b905080821115613ff15760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613f3457600080fd5b505afa158015613f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6c9190614be4565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b8152600401613f99929190614f33565b602060405180830381600087803b158015613fb357600080fd5b505af1158015613fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613feb9190614bc8565b506140f6565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561403d57600080fd5b505afa158015614051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140759190614be4565b6001600160a01b031663a9059cbb84846040518363ffffffff1660e01b81526004016140a2929190614f33565b602060405180830381600087803b1580156140bc57600080fd5b505af11580156140d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f49190614bc8565b505b6140fe611ced565b60005460408051638f33b5e560e01b815290516001600160a01b0390921691638f838a9f918391638f33b5e591600480820192602092909190829003018186803b15801561414b57600080fd5b505afa15801561415f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141839190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016141ae9190614ee1565b60206040518083038186803b1580156141c657600080fd5b505afa1580156141da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fe9190614d54565b6040518263ffffffff1660e01b81526004016112a191906152c8565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561426957600080fd5b505afa15801561427d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a19190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016142cc9190614ee1565b60206040518083038186803b1580156142e457600080fd5b505afa1580156142f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061431c9190614d54565b90508082111561442f5760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561437257600080fd5b505afa158015614386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143aa9190614be4565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b81526004016143d7929190614f33565b602060405180830381600087803b1580156143f157600080fd5b505af1158015614405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144299190614bc8565b50614534565b60008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561447b57600080fd5b505afa15801561448f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144b39190614be4565b6001600160a01b031663a9059cbb84846040518363ffffffff1660e01b81526004016144e0929190614f33565b602060405180830381600087803b1580156144fa57600080fd5b505af115801561450e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145329190614bc8565b505b6000546040805163fb70c3bf60e01b815290516001600160a01b039092169163094601f191839163fb70c3bf91600480820192602092909190829003018186803b15801561458157600080fd5b505afa158015614595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b99190614be4565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016145e49190614ee1565b60206040518083038186803b1580156145fc57600080fd5b505afa158015614610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146349190614d54565b6040518263ffffffff1660e01b815260040161465091906152c8565b600060405180830381600087803b15801561466a57600080fd5b505af115801561467e573d6000803e3d6000fd5b505050506127536128bb565b606081015181516000916132aa91906137db565b600054600160a81b900460ff16806146b957506146b96134c9565b806146ce5750600054600160a01b900460ff16155b6146ea5760405162461bcd60e51b815260040161063e90615158565b600054600160a81b900460ff16158015613562576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790558015612756576000805460ff60a81b1916905550565b600054600160a81b900460ff168061475157506147516134c9565b806147665750600054600160a01b900460ff16155b6147825760405162461bcd60e51b815260040161063e90615158565b600054600160a81b900460ff161580156147b9576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60006147c3613578565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612756576000805460ff60a81b1916905550565b6000818484111561484b5760405162461bcd60e51b815260040161063e9190614f75565b505050900390565b614865826001600160a01b031661496f565b6148815760405162461bcd60e51b815260040161063e90615291565b60006060836001600160a01b03168360405161489d9190614ec5565b6000604051808303816000865af19150503d80600081146148da576040519150601f19603f3d011682016040523d82523d6000602084013e6148df565b606091505b5091509150816149015760405162461bcd60e51b815260040161063e90615050565b8051156108aa578080602001905181019061491c9190614bc8565b6108aa5760405162461bcd60e51b815260040161063e9061521d565b600081836149595760405162461bcd60e51b815260040161063e9190614f75565b50600083858161496557fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613dd4575050151592915050565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600080191681525090565b600060208284031215614a54578081fd5b81356135be81615455565b600080600060608486031215614a73578182fd5b8335614a7e81615455565b92506020840135614a8e81615455565b91506040840135614a9e81615455565b809150509250925092565b600080600080600060a08688031215614ac0578081fd5b8535614acb81615455565b94506020860135614adb81615455565b93506040860135614aeb81615455565b92506060860135614afb81615455565b91506080860135614b0b81615455565b809150509295509295909350565b60008060008060808587031215614b2e578384fd5b8435614b3981615455565b93506020850135614b4981615455565b93969395505050506040820135916060013590565b600080600060608486031215614b72578283fd5b8335614b7d81615455565b9250602084013591506040840135614a9e81615455565b600080600060608486031215614ba8578283fd5b8335614bb381615455565b95602085013595506040909401359392505050565b600060208284031215614bd9578081fd5b81516135be8161546a565b600060208284031215614bf5578081fd5b81516135be81615455565b60008060008060008060c08789031215614c18578081fd5b8651614c2381615455565b809650506020870151945060408701519350606087015192506080870151614c4a8161546a565b8092505060a087015190509295509295509295565b60006020808385031215614c71578182fd5b825167ffffffffffffffff80821115614c88578384fd5b9084019060608287031215614c9b578384fd5b614ca560606153de565b825182811115614cb3578586fd5b83019150601f82018713614cc5578485fd5b8151614cd8614cd382615405565b6153de565b8181528886838601011115614ceb578687fd5b614cfa82878301888701615429565b825250828401519381019390935250604090810151908201529392505050565b600060208284031215614d2b578081fd5b813561ffff811681146135be578182fd5b600060208284031215614d4d578081fd5b5035919050565b600060208284031215614d65578081fd5b5051919050565b60008060408385031215614d7e578182fd5b823591506020830135614d9081615455565b809150509250929050565b600080600060608486031215614daf578081fd5b833592506020840135614dc181615455565b91506040840135614a9e8161546a565b60008060408385031215614de3578182fd5b50508035926020909101359150565b60008060408385031215614e04578182fd5b505080516020909101519092909150565b600080600060608486031215614e29578081fd5b83359250602084013591506040840135614a9e8161546a565b60008060008060008060c08789031215614e5a578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b60008251614ed7818460208701615429565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b9182521515602082015260400190565b918252602082015260400190565b6000602082528251806020840152614f94816040850160208701615429565b601f01601f19169190910160400192915050565b602080825260119082015270283937b434b134ba32b21031b0b63632b960791b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601f908201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604082015260600190565b6020808252600c908201526b4e6f20616c6c6f77616e636560a01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c476f76206e6f7420726561647960981b604082015260600190565b6020808252600790820152664d61782031302560c81b604082015260600190565b602080825260159082015274506f6f6c206e6f7420776974686472617761626c6560581b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526010908201526f4e6f7420776974686472617761626c6560801b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b8381526001600160a01b03831660208201526101008101613dd46040830184614e8b565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b600060e08201905083825260018060a01b0383511660208301526020830151604083015260408301516060830152606083015160808301526080830151151560a083015260a083015160c08301529392505050565b92835260208301919091521515604082015260600190565b60405181810167ffffffffffffffff811182821017156153fd57600080fd5b604052919050565b600067ffffffffffffffff82111561541b578081fd5b50601f01601f191660200190565b60005b8381101561544457818101518382015260200161542c565b838111156108aa5750506000910152565b6001600160a01b038116811461275657600080fd5b801515811461275657600080fdfea2646970667358221220e25537bb6850bb5d37abda4fe5b6deabd0c91c3815517b2376042adc89c4aa4764736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14034,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "_storage",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(YGYStorageV1)15841"
      },
      {
        "astId": 195,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 263,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 188,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 565,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 683,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12026,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "devaddr",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 12028,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "teamaddr",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 12030,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "regeneratoraddr",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 12032,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "nftFactory",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 13490,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "DEV_FEE",
        "offset": 20,
        "slot": "154",
        "type": "t_uint16"
      },
      {
        "astId": 13511,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "pending_DEV_rewards",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 13513,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "pending_DEV_YGY_rewards",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 13957,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "_superAdmin",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(YGYStorageV1)15841": {
        "encoding": "inplace",
        "label": "contract YGYStorageV1",
        "numberOfBytes": "20"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}