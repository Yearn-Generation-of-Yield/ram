{
  "address": "0xBAd245Bc68E48578104c774b8A3Ea9Cf834b5484",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromNFT",
          "type": "bool"
        }
      ],
      "name": "Boost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SuperAdminTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "NFTUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addRAMRewardsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addYGYRewardsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "checkRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRAM",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingYGY",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositFor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__superAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_regeneratoraddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teamaddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "newSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawable",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setAllowanceForPoolToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_DEV_FEE",
          "type": "uint16"
        }
      ],
      "name": "setDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teamaddr",
          "type": "address"
        }
      ],
      "name": "setDevFeeReciever",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setStrategyContractOrDistributionContractAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferRAMDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferYGYDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47b6ebd5ab6e2fcc968f66f8a361316278767a6a3c3ff62fddf361cebb9a155f",
  "receipt": {
    "to": null,
    "from": "0x117C8f87Cc495b29bdDB20E2a54c6F4DacDdAb5C",
    "contractAddress": "0xBAd245Bc68E48578104c774b8A3Ea9Cf834b5484",
    "transactionIndex": 2,
    "gasUsed": "4550877",
    "logsBloom": "0x
    "blockHash": "0x7b5f5d6399072fc019741ff8c0c0db4fb8a2b85510b8205690ad4754ed731545",
    "transactionHash": "0x47b6ebd5ab6e2fcc968f66f8a361316278767a6a3c3ff62fddf361cebb9a155f",
    "logs": [],
    "blockNumber": 22648695,
    "cumulativeGasUsed": "6068552",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ccaf5d1fb511a7f3aa44cce753a91265",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromNFT\",\"type\":\"bool\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SuperAdminTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"NFTUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRAMRewardsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addYGYRewardsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRAM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingYGY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositFor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__superAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regeneratoraddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamaddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"newSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAllowanceForPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_DEV_FEE\",\"type\":\"uint16\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamaddr\",\"type\":\"address\"}],\"name\":\"setDevFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStrategyContractOrDistributionContractAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRAMDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferYGYDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RAMVault.sol\":\"RAMVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n\\n\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd1778eb2a00f482020d0298305421371eb6487ca0d7d05d9e2b91c353e53f47f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x4f3a00edb976e97943fe0a620ea2948955a75eff2a9231c202d50d1e062d8da5\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\",\"keccak256\":\"0xfd5cf8319cb84ca04ea407d6fba686d53ad7f5d2bf476f41678f5a751d12a7ea\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xd1d78b1c8534fbcf8fdc8fbfec9133df142ef8cae9ae820929dfe6d80d2c790a\"},\"contracts/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\\\";\\n// import \\\"@openzeppelin/contractss-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./libraries/AddressERC721.sol\\\";\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev Removed and added funtionality needed from the original.\\n */\\ncontract ERC721 is\\n    ContextUpgradeSafe,\\n    ERC165UpgradeSafe,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using SafeMath for uint256;\\n    using AddressERC721 for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdTracker;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,uint256,address)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = bytes4(\\n        keccak256(\\\"onERC721Received(address,address,uint256,uint256,address)\\\")\\n    );\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Tokens will only have one URI.\\n    string public _tokenURI;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` and tokenURI to the token collection.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _tokenURI = tokenURI;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public override view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public override view returns (address) {\\n        return\\n            _tokenOwners.get(\\n                tokenId,\\n                \\\"ERC721: owner query for nonexistent token\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        override\\n        view\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n        return _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        override\\n        view\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function mint(address to) internal returns (uint256 tokenId) {\\n        uint256 currentId = _tokenIdTracker.current();\\n        _mint(to, currentId);\\n        _tokenIdTracker.increment();\\n        return currentId;\\n    }\\n\\n    function _mint(address to, uint256 tokenId) private {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n        _holderTokens[owner].remove(tokenId);\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = to.call(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        );\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        } else {\\n            bytes4 retval = abi.decode(returndata, (bytes4));\\n            return (retval == _ERC721_RECEIVED);\\n        }\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x385a0db40002f469b57ff0c11384728096981f3dd8f036b4bac64f4d2741306a\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./YGYStorageV1.sol\\\";\\n\\n\\ncontract NFT is ERC721, AccessControlUpgradeSafe {\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    uint256 public contractId;\\n\\n    // Tradeable?\\n    bool allowTrade;\\n\\n    // Capped?\\n    bool isCapped;\\n    uint256 tokenCap;\\n    address ramVault;\\n    // Props for unique token\\n    mapping(uint256 => YGYStorageV1.NFTProperty) public properties;\\n\\n    // How many choices available for this particular NFT\\n    uint256 propertyChoices;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _contractId,\\n        uint256 _propertyChoices,\\n        address _superAdmin,\\n        bool _allowTrade,\\n        bool _isCapped,\\n        uint256 _tokenCap,\\n        address _ramVault\\n    ) public ERC721(_name, _symbol, _tokenURI) {\\n        allowTrade = _allowTrade;\\n        isCapped = _isCapped;\\n        tokenCap = _tokenCap;\\n        contractId = _contractId;\\n        propertyChoices = _propertyChoices;\\n        __AccessControl_init();\\n        _setupRole(SYSTEM_ROLE, _msgSender());\\n        _setupRole(SYSTEM_ROLE, _ramVault);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    /**\\n     * @dev Used for tokens that are transferrable and non-delegating.\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            ownerOf(_tokenId) == _msgSender() ||\\n                hasRole(SYSTEM_ROLE, _msgSender()),\\n            \\\"Not allowed\\\"\\n        );\\n\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Mint a token and set it's property\\n     */\\n    function mint(\\n        address to,\\n        uint256 _randomness,\\n        YGYStorageV1 _storage\\n    ) public returns (uint256 _tokenId) {\\n        require(\\n            !isCapped || (isCapped && totalSupply() <= tokenCap),\\n            \\\"NFT Limit reached\\\"\\n        );\\n        require(hasRole(SYSTEM_ROLE, _msgSender()), \\\"Not allowed\\\");\\n\\n        // Mint the token, get the unique id.\\n        uint256 tokenId = super.mint(to);\\n        // Get a random index for property selection\\n        uint256 propIndex;\\n        if (propertyChoices > 1) {\\n            propIndex = _randomness.mod(propertyChoices);\\n        }\\n\\n        // Random properties gotten\\n        (string memory pType, uint256 pValue, bytes32 extra) = _storage\\n            .getNFTProperty(contractId + 1, propIndex);\\n\\n        // Finally, set the property.\\n        properties[tokenId] = YGYStorageV1.NFTProperty(pType, pValue, extra);\\n        return tokenId;\\n    }\\n\\n    function getTokenProperty(uint256 _tokenId)\\n        public\\n        view\\n        returns (YGYStorageV1.NFTProperty memory)\\n    {\\n        return properties[_tokenId];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _beforeTokenTransfer(from, to, tokenId);\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Used to halt transfers while maintaining minting ability for the delegator / minter.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n\\n        require(\\n            (allowTrade || hasRole(SYSTEM_ROLE, _msgSender())) ||\\n                (!allowTrade && hasRole(SYSTEM_ROLE, to)),\\n            \\\"External trades not allowed\\\"\\n        );\\n\\n    }\\n}\\n\",\"keccak256\":\"0x89a093d93a8ece4578da2404d65c31e6726154bacac14d8e627c9b15ca5cfbc4\",\"license\":\"MIT\"},\"contracts/RAMVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./libraries/Bytes.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\nimport \\\"./libraries/UserHelper.sol\\\";\\nimport \\\"./NFT.sol\\\";\\nimport \\\"./StorageState.sol\\\";\\n\\n\\n// Ram Vault distributes fees equally amongst staked pools\\ncontract RAMVault is StorageState, OwnableUpgradeSafe {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Bytes for bytes;\\n    using UserHelper for YGYStorageV1.UserInfo;\\n    using PoolHelper for YGYStorageV1.PoolInfo;\\n\\n    event RewardPaid(uint256 pid, address to);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 _pid,\\n        uint256 value\\n    );\\n    event Boost(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 indexed level,\\n        bool fromNFT\\n    );\\n\\n    address private devaddr;\\n    address private teamaddr;\\n    address private regeneratoraddr;\\n\\n    function initialize(\\n        address __superAdmin,\\n        address _regeneratoraddr,\\n        address _devaddr,\\n        address _teamaddr\\n    ) public initializer {\\n        OwnableUpgradeSafe.__Ownable_init();\\n        DEV_FEE = 724;\\n        _superAdmin = __superAdmin;\\n        regeneratoraddr = _regeneratoraddr;\\n        devaddr = _devaddr;\\n        teamaddr = _teamaddr;\\n    }\\n\\n    function NFTUsage(\\n        address _user,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _poolId\\n    ) external {\\n        NFT nft = NFT(_tokenAddress);\\n        YGYStorageV1.NFTProperty memory properties = nft.getTokenProperty(\\n            _tokenId\\n        );\\n        YGYStorageV1.UserInfo memory user = UserHelper.getUser(\\n            _poolId,\\n            _user,\\n            _storage\\n        );\\n\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(\\n            _poolId,\\n            _storage\\n        );\\n\\n        if (\\n            keccak256(abi.encodePacked(properties.pType)) == keccak256(\\\"boost\\\")\\n        ) {\\n            _storage.setNFTInUse(nft.contractId(), _user);\\n            user.adjustEffectiveStake(\\n                pool,\\n                _user,\\n                0,\\n                false,\\n                _storage\\n            );\\n        }\\n        nft.burn(_tokenId);\\n        _storage.updateUserInfo(_poolId, _user, user);\\n        _storage.updatePoolInfo(_poolId, pool);\\n        emit Boost(_user, _poolId, 0, true);\\n    }\\n\\n    // --------------------------------------------\\n    //                  EPOCH\\n    // --------------------------------------------\\n\\n    // Starts a new calculation epoch\\n    // Also dismisses NFT boost effects\\n    // Because averge since start will not be accurate\\n    function startNewEpoch() public {\\n        // require(_storage.epochCalculationStartBlock() + 5760 < block.number); // about 3 days.\\n        _storage.setEpochRewards();\\n        _storage.setCumulativeRewardsSinceStart();\\n        _storage.setRewardsInThisEpoch(0);\\n        _storage.setEpochCalculationStartBlock();\\n    }\\n\\n    // --------------------------------------------\\n    //                OWNER\\n    // --------------------------------------------\\n\\n    // Adds additional RAM rewards\\n    function addRAMRewardsOwner(uint256 _amount) public onlyOwner {\\n        require(\\n            _storage.ram().transferFrom(msg.sender, address(this), _amount) &&\\n                _amount > 0\\n        );\\n        _storage.addAdditionalRewards(_amount, false);\\n    }\\n\\n    // Adds additional YGY rewards\\n    function addYGYRewardsOwner(uint256 _amount) public onlyOwner {\\n        require(\\n            _storage.ygy().transferFrom(msg.sender, address(this), _amount) &&\\n                _amount > 0\\n        );\\n        _storage.addAdditionalRewards(_amount, true);\\n    }\\n\\n    // --------------------------------------------\\n    //                  POOL\\n    // --------------------------------------------\\n\\n    // Add a new token pool. Can only be called by the owner.\\n    // Note contract owner is meant to be a governance contract allowing RAM governance consensus\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withdrawable\\n    ) public onlyOwner {\\n        massUpdatePools();\\n        _storage.addPool(_allocPoint, _token, _withdrawable);\\n    }\\n\\n    // Update the given pool's RAMs allocation point. Can only be called by the owner.\\n    // Note contract owner is meant to be a governance contract allowing RAM governance consensus\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withdrawable\\n    ) public onlyOwner {\\n        massUpdatePools();\\n        _storage.setPool(_pid, _allocPoint, _withdrawable);\\n    }\\n\\n    // Function that adds pending rewards, called by the RAM token.\\n    function addPendingRewards(uint256 _amount) external {\\n        require(msg.sender == address(_storage.ram()));\\n        _storage.addPendingRewards(_amount);\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid)\\n        internal\\n        returns (uint256 ramRewardsWhole, uint256 ygyRewardsWhole)\\n    {\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            return (0, 0);\\n        }\\n        uint256 effectivePoolStakedSupply = tokenSupply.add(\\n            pool.effectiveAdditionalTokensFromBoosts\\n        );\\n\\n        ramRewardsWhole = _storage.pendingRewards().mul(pool.allocPoint).div(\\n            _storage.totalAllocPoint()\\n        );\\n\\n        // Ram rewards\\n        uint256 ramRewardFee = ramRewardsWhole.mul(DEV_FEE).div(10000);\\n        pending_DEV_rewards = pending_DEV_rewards.add(ramRewardFee);\\n\\n        // Ygy rewards should be zero most of the time running.\\n        uint256 pendingYGYRewards = _storage.pendingYGYRewards();\\n        if (pendingYGYRewards > 0) {\\n            ygyRewardsWhole = pendingYGYRewards.mul(pool.allocPoint).div(\\n                _storage.totalAllocPoint()\\n            );\\n            uint256 ygyRewardFee = ygyRewardsWhole.mul(DEV_FEE).div(10000);\\n            pending_DEV_YGY_rewards = pending_DEV_YGY_rewards.add(ygyRewardFee);\\n            pool.accYGYPerShare = pool.accYGYPerShare.add(\\n                ygyRewardsWhole.sub(ygyRewardFee).mul(1e12).div(\\n                    effectivePoolStakedSupply\\n                )\\n            );\\n        }\\n\\n        // Update shares\\n        pool.accRAMPerShare = pool.accRAMPerShare.add(\\n            ramRewardsWhole.sub(ramRewardFee).mul(1e12).div(\\n                effectivePoolStakedSupply\\n            )\\n        );\\n        _storage.updatePoolInfo(_pid, pool);\\n    }\\n\\n    // Deposit tokens to RamVault for RAM allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n        YGYStorageV1.UserInfo memory user = UserHelper.getUser(\\n            _pid,\\n            msg.sender,\\n            _storage\\n        );\\n        // Pay the user\\n        updateAndPayOutPending(_pid, msg.sender);\\n\\n        // save gas\\n        if (_amount > 0) {\\n            pool.token.transferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.amount = user.amount.add(_amount);\\n\\n            // Users that have bought multipliers will have an extra balance added to their stake according to the boost multiplier.\\n            if (user.boostLevel > 0) {\\n                user.adjustEffectiveStake(pool, msg.sender,  0,false, _storage);\\n            }\\n        }\\n\\n        user.updateDebts(pool);\\n        _storage.updateUserInfo(_pid, msg.sender, user);\\n        _storage.updatePoolInfo(_pid, pool);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    function claimRewards(uint256 _pid) external {\\n        updateAndPayOutPending(_pid, msg.sender);\\n        emit RewardPaid(_pid, msg.sender);\\n    }\\n\\n    // Test coverage\\n    // [x] Does user get the deposited amounts?\\n    // [x] Does user that its deposited for update correcty?\\n    // [x] Does the depositor get their tokens decreased\\n    function depositFor(\\n        address _depositFor,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) public {\\n        // requires no allowances\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n        YGYStorageV1.UserInfo memory user = UserHelper.getUser(\\n            _pid,\\n            _depositFor,\\n            _storage\\n        );\\n\\n        // Pay the user\\n        updateAndPayOutPending(_pid, _depositFor);\\n\\n        // Update the balances of person that amount is being deposited for\\n        if (_amount > 0) {\\n            pool.token.transferFrom(msg.sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount); // This is depositedFor address\\n\\n            // Users that have bought multipliers will have an extra balance added to their stake according to the boost multiplier.\\n            if (user.boostAmount > 0) {\\n                user.adjustEffectiveStake(pool, _depositFor,  0, false, _storage);\\n            }\\n        }\\n\\n        user.updateDebts(pool);\\n        _storage.updateUserInfo(_pid, _depositFor, user);\\n        _storage.updatePoolInfo(_pid, pool);\\n        emit Deposit(_depositFor, _pid, _amount);\\n    }\\n\\n    // Test coverage\\n    // [x] Does allowance update correctly?\\n    function setAllowanceForPoolToken(\\n        address spender,\\n        uint256 _pid,\\n        uint256 value\\n    ) public {\\n        _storage.setPoolAllowance(_pid, msg.sender, spender, value);\\n        emit Approval(msg.sender, spender, _pid, value);\\n    }\\n\\n    // Test coverage\\n    // [x] Does allowance decrease?\\n    // [x] Do oyu need allowance\\n    // [x] Withdraws to correct address\\n    function withdrawFrom(\\n        address owner,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) public {\\n        uint256 allowance = _storage.poolAllowance(_pid, owner, msg.sender);\\n        require(allowance >= _amount, \\\"No allowance\\\");\\n        _storage.setPoolAllowance(\\n            _pid,\\n            owner,\\n            msg.sender,\\n            allowance.sub(_amount)\\n        );\\n        _withdraw(_pid, _amount, owner, msg.sender);\\n    }\\n\\n    // Withdraw  tokens from RamVault.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\\n    }\\n\\n    // Low level withdraw function\\n    function _withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address from,\\n        address to\\n    ) internal {\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n        require(pool.withdrawable, \\\"Not withdrawable\\\");\\n        YGYStorageV1.UserInfo memory user = UserHelper.getUser(\\n            _pid,\\n            from,\\n            _storage\\n        );\\n\\n        require(user.amount >= _amount, \\\"Withdraw amount exceeds balance\\\");\\n        updateAndPayOutPending(_pid, from); // Update balances of from, this is not withdrawal but claiming RAM farmed\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(address(to), _amount);\\n\\n            // Users who have bought multipliers will have their accounting balances readjusted.\\n            if (user.boostAmount > 0) {\\n                user.adjustEffectiveStake(pool, from, 0, true, _storage);\\n            }\\n        }\\n\\n        user.updateDebts(pool);\\n        _storage.updateUserInfo(_pid, msg.sender, user);\\n        _storage.updatePoolInfo(_pid, pool);\\n        emit Withdraw(to, _pid, _amount);\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 allRewards;\\n        uint256 allYGYRewards;\\n        for (uint256 pid = 0; pid < _storage.getPoolLength(); ++pid) {\\n            (uint256 ramWholeReward, uint256 ygyWholeReward) = updatePool(pid);\\n            allRewards = allRewards.add(ramWholeReward);\\n            allYGYRewards = allYGYRewards.add(ygyWholeReward);\\n        }\\n\\n        _storage.updatePoolRewards(allRewards, allYGYRewards);\\n    }\\n\\n    function checkRewards(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256 pendingRAM, uint256 pendingYGY)\\n    {\\n        return _storage.checkRewards(_pid, _user);\\n    }\\n\\n    function updateAndPayOutPending(uint256 _pid, address _from) internal {\\n        massUpdatePools();\\n\\n        (uint256 pendingRAM, uint256 pendingYGY) = checkRewards(_pid, _from);\\n        if (pendingRAM > 0) {\\n            safeRamTransfer(_from, pendingRAM);\\n        }\\n        if (pendingYGY > 0) {\\n            safeYgyTransfer(_from, pendingYGY);\\n        }\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    // !Caution this will remove all your pending rewards!\\n    function emergencyWithdraw(uint256 _pid) public {\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n        require(pool.withdrawable);\\n        YGYStorageV1.UserInfo memory user = UserHelper.getUser(\\n            _pid,\\n            msg.sender,\\n            _storage\\n        );\\n        pool.token.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.boostAmount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardDebtYGY = 0;\\n        _storage.updateUserInfo(_pid, msg.sender, user);\\n        _storage.updatePoolInfo(_pid, pool);\\n        // No mass update dont update pending rewards\\n    }\\n\\n    // --------------------------------------------\\n    //                  BOOST\\n    // --------------------------------------------\\n\\n    // Purchase a multiplier level for an individual user for an individual pool, same level cannot be purchased twice.\\n    function purchase(uint256 _pid, uint256 _level) external {\\n        YGYStorageV1.PoolInfo memory pool = PoolHelper.getPool(_pid, _storage);\\n        YGYStorageV1.UserInfo memory user = UserHelper.getUser(\\n            _pid,\\n            msg.sender,\\n            _storage\\n        );\\n\\n        require(_level > user.boostLevel && _level <= 4);\\n\\n        // Cost will be reduced by the amount already spent on multipliers.\\n        uint256 cost = _storage.getBoostLevelCost(_level);\\n        uint256 finalCost = cost.sub(user.spentMultiplierTokens);\\n\\n        // Transfer RAM tokens to the contract\\n        require(\\n            _storage.ram().transferFrom(msg.sender, address(this), finalCost)\\n        );\\n\\n        // Update balances and level\\n        user.spentMultiplierTokens = user.spentMultiplierTokens.add(finalCost);\\n        user.boostLevel = _level;\\n\\n\\n        // If user has staked balances, then set their new accounting balance\\n        if (user.amount > 0) {\\n            // Get the new multiplier\\n            user.adjustEffectiveStake(pool, msg.sender, _level, false, _storage);\\n        }\\n\\n        _storage.updateUserInfo(_pid, msg.sender, user);\\n        _storage.updatePoolInfo(_pid, pool);\\n        _storage.setBoostFees(finalCost, true);\\n        emit Boost(msg.sender, _pid, _level, false);\\n    }\\n\\n    // Distributes boost fees to devs and protocol\\n    function distributeFees() public {\\n        // Reset taxes to 0 before distributing any funds\\n        _storage.setBoostFees(0, false);\\n\\n        // Distribute taxes to regenerator and team 50/50%\\n        uint256 halfDistAmt = _storage.boostFees().div(2);\\n        if (halfDistAmt > 0) {\\n            // 50% to regenerator\\n            require(_storage.ram().transfer(regeneratoraddr, halfDistAmt));\\n            // 70% of the other 50% to devs\\n            uint256 devDistAmt = halfDistAmt.mul(70).div(100);\\n            if (devDistAmt > 0) {\\n                require(_storage.ram().transfer(devaddr, devDistAmt));\\n            }\\n            // 30% of the other 50% to team\\n            uint256 teamDistAmt = halfDistAmt.mul(30).div(100);\\n            if (teamDistAmt > 0) {\\n                require(_storage.ram().transfer(teamaddr, teamDistAmt));\\n            }\\n        }\\n    }\\n\\n    // --------------------------------------------\\n    //                  Utils\\n    // --------------------------------------------\\n\\n    // Sets the dev fee for this contract\\n    // defaults at 7.24%\\n    // Note contract owner is meant to be a governance contract allowing RAM governance consensus\\n    uint16 DEV_FEE;\\n\\n    function setDevFee(uint16 _DEV_FEE) public onlyOwner {\\n        require(_DEV_FEE <= 1000, \\\"Max 10%\\\");\\n        DEV_FEE = _DEV_FEE;\\n    }\\n\\n    uint256 pending_DEV_rewards;\\n    uint256 pending_DEV_YGY_rewards;\\n\\n    // function that lets owner/governance contract\\n    // approve allowance for any token inside this contract\\n    // This means all future UNI like airdrops are covered\\n    // And at the same time allows us to give allowance to strategy contracts.\\n    // Upcoming cYFI etc vaults strategy contracts will  se this function to manage and farm yield on value locked\\n    function setStrategyContractOrDistributionContractAllowance(\\n        address tokenAddress,\\n        uint256 _amount,\\n        address contractAddress\\n    ) external {\\n        require(isContract(contractAddress) && _superAdmin == _msgSender());\\n        require(\\n            block.number > _storage.RAMVaultStartBlock().add(95_000),\\n            \\\"Gov not ready\\\"\\n        );\\n        IERC20(tokenAddress).approve(contractAddress, _amount);\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function safeRamTransfer(address _to, uint256 _amount) internal {\\n        uint256 ramBal = _storage.ram().balanceOf(address(this));\\n\\n        if (_amount > ramBal) {\\n            _storage.ram().transfer(_to, ramBal);\\n        } else {\\n            _storage.ram().transfer(_to, _amount);\\n        }\\n        transferRAMDevFee();\\n        _storage.setRAMBalance(_storage.ram().balanceOf(address(this)));\\n    }\\n\\n    function safeYgyTransfer(address _to, uint256 _amount) internal {\\n        uint256 ygyBal = _storage.ygy().balanceOf(address(this));\\n\\n        if (_amount > ygyBal) {\\n            _storage.ygy().transfer(_to, ygyBal);\\n        } else {\\n            _storage.ygy().transfer(_to, _amount);\\n        }\\n        _storage.setYGYBalance(_storage.ygy().balanceOf(address(this)));\\n        transferYGYDevFee();\\n    }\\n\\n    function transferRAMDevFee() public {\\n        if (pending_DEV_rewards > 0) {\\n            uint256 devDistAmt;\\n            uint256 teamDistAmt;\\n            uint256 ramBal = _storage.ram().balanceOf(address(this));\\n            if (pending_DEV_rewards > ramBal) {\\n                devDistAmt = ramBal.mul(70).div(100);\\n                teamDistAmt = ramBal.mul(30).div(100);\\n            } else {\\n                devDistAmt = pending_DEV_rewards.mul(70).div(100);\\n                teamDistAmt = pending_DEV_rewards.mul(30).div(100);\\n            }\\n\\n            if (devDistAmt > 0) {\\n                _storage.ram().transfer(devaddr, devDistAmt);\\n            }\\n            if (teamDistAmt > 0) {\\n                _storage.ram().transfer(teamaddr, teamDistAmt);\\n            }\\n\\n            _storage.setRAMBalance(_storage.ram().balanceOf(address(this)));\\n            pending_DEV_rewards = 0;\\n        }\\n    }\\n\\n    function transferYGYDevFee() public {\\n        if (pending_DEV_YGY_rewards > 0) {\\n            uint256 devDistAmt;\\n            uint256 teamDistAmt;\\n            uint256 ygyBal = _storage.ygy().balanceOf(address(this));\\n            if (pending_DEV_YGY_rewards > ygyBal) {\\n                devDistAmt = ygyBal.mul(70).div(100);\\n                teamDistAmt = ygyBal.mul(30).div(100);\\n            } else {\\n                devDistAmt = pending_DEV_YGY_rewards.mul(70).div(100);\\n                teamDistAmt = pending_DEV_YGY_rewards.mul(30).div(100);\\n            }\\n\\n            if (devDistAmt > 0) {\\n                _storage.ygy().transfer(devaddr, devDistAmt);\\n            }\\n            if (teamDistAmt > 0) {\\n                _storage.ygy().transfer(teamaddr, teamDistAmt);\\n            }\\n\\n            _storage.setYGYBalance(_storage.ygy().balanceOf(address(this)));\\n            pending_DEV_YGY_rewards = 0;\\n        }\\n    }\\n\\n    function setDevFeeReciever(address _devaddr, address _teamaddr)\\n        external\\n        onlyOwner\\n    {\\n        devaddr = _devaddr;\\n        teamaddr = _teamaddr;\\n    }\\n\\n    address private _superAdmin;\\n\\n    event SuperAdminTransfered(address previousOwner, address newOwner);\\n\\n    function superAdmin() public view returns (address) {\\n        return _superAdmin;\\n    }\\n\\n    function burnSuperAdmin() public virtual {\\n        require(_superAdmin == _msgSender());\\n        _superAdmin = address(0);\\n        emit SuperAdminTransfered(_superAdmin, address(0));\\n    }\\n\\n    function newSuperAdmin(address newOwner) public virtual {\\n        require(_superAdmin == _msgSender());\\n        require(newOwner != address(0));\\n        _superAdmin = newOwner;\\n        emit SuperAdminTransfered(_superAdmin, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2cb2ad4513b69526e59b3089cc33eeb756237ce7e4a66f999ed91fff97c758dd\",\"license\":\"MIT\"},\"contracts/StorageState.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./YGYStorageV1.sol\\\";\\n\\ncontract StorageState {\\n    YGYStorageV1 _storage;\\n}\\n\",\"keccak256\":\"0xd8f72cec39b19b1759de2ccf6128fed12314c2571bb06a04ff67893ef6471b86\"},\"contracts/YGYStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\nStorage contract for the YGY system\\n*/\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/INBUNIERC20.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\n\\n\\ncontract YGYStorageV1 is AccessControlUpgradeSafe {\\n    /* STORAGE CONFIG */\\n    using SafeMath for uint256;\\n    using PoolHelper for PoolInfo;\\n\\n    bytes32 public constant MODIFIER_ROLE = keccak256(\\\"MODIFIER_ROLE\\\");\\n\\n    function setModifierContracts(\\n        address _vault,\\n        address _router,\\n        address _nftFactory\\n    ) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Nono\\\");\\n        _setupRole(MODIFIER_ROLE, _vault);\\n        _setupRole(MODIFIER_ROLE, _router);\\n        _setupRole(MODIFIER_ROLE, _nftFactory);\\n    }\\n\\n    function init() external initializer {\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MODIFIER_ROLE, _msgSender());\\n    }\\n\\n    /* RAMVAULT */\\n\\n    // User properties per vault/pool.\\n    struct UserInfo {\\n        uint256 amount; // How many  tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtYGY;\\n        uint256 boostAmount;\\n        uint256 boostLevel;\\n        uint256 spentMultiplierTokens;\\n    }\\n\\n    struct NFTUsage {\\n        uint256 nftId;\\n        uint256 epoch;\\n    }\\n\\n    // Epoch -> User -> NFT ids in use.\\n    mapping(uint256 => mapping(address => NFTUsage[])) public NFTUsageInfo;\\n\\n    function setNFTInUse(uint256 _nftId, address _user) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        NFTUsageInfo[epoch][_user].push(NFTUsage({ nftId: _nftId, epoch: epoch }));\\n    }\\n\\n    function getNFTsInUse(address _user) external view returns (NFTUsage[] memory) {\\n        return NFTUsageInfo[epoch][_user];\\n    }\\n\\n    function getNFTBoost(address _user) external view returns (uint256) {\\n        uint256 NFTBoost;\\n        NFTUsage[] memory nftInfo = NFTUsageInfo[epoch][_user];\\n        for(uint i; i < nftInfo.length; i++) {\\n            if(epoch == nftInfo[i].epoch) {\\n                if(nftInfo[i].nftId == 5 || nftInfo[i].nftId == 6) {\\n                    NFTBoost = NFTBoost.add(10);\\n                }\\n            }\\n        }\\n        return NFTBoost;\\n    }\\n\\n    // Pool/Vault/Whatever-id -> userrAddress -> userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    function updateUserInfo(\\n        uint256 _poolId,\\n        address _userAddress,\\n        UserInfo memory _userInfo\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        userInfo[_poolId][_userAddress] = _userInfo;\\n    }\\n\\n    // PoolId -> UserAddress -> Spender -> Allowance\\n    mapping(uint256 => mapping(address => mapping(address => uint256)))\\n        public poolAllowance;\\n\\n    function setPoolAllowance(\\n        uint256 _pid,\\n        address _user,\\n        address _spender,\\n        uint256 _allowance\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolAllowance[_pid][_user][_spender] = _allowance;\\n    }\\n\\n    // Pool properties\\n    struct PoolInfo {\\n        IERC20 token; // Address of  token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. RAMs to distribute per block.\\n        uint256 accRAMPerShare; // Accumulated RAMs per share, times 1e12. See below.\\n        uint256 accYGYPerShare; // Accumulated YGYs per share, times 1e12. See below.\\n        bool withdrawable; // Is this pool withdrawable?\\n        uint256 effectiveAdditionalTokensFromBoosts; // Track the total additional accounting staked tokens from boosts.\\n    }\\n    // All pool properties\\n    PoolInfo[] public poolInfo;\\n\\n    function updatePoolInfo(uint256 _poolId, PoolInfo memory _userInfo)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolInfo[_poolId] = _userInfo;\\n    }\\n\\n    function setPool(\\n        uint256 _poolId,\\n        uint256 _allocPoint,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        totalAllocPoint.sub(poolInfo[_poolId].allocPoint).add(_allocPoint);\\n        poolInfo[_poolId].allocPoint = _allocPoint;\\n        poolInfo[_poolId].withdrawable = _withdrawable;\\n    }\\n\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\n        }\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            YGYStorageV1.PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                accRAMPerShare: 0,\\n                accYGYPerShare: 0,\\n                withdrawable: _withdrawable,\\n                effectiveAdditionalTokensFromBoosts: 0\\n            })\\n        );\\n    }\\n\\n    function updatePoolRewards(uint256 allRewards, uint256 allYGYRewards)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        pendingRewards = pendingRewards.sub(allRewards);\\n        pendingYGYRewards = pendingYGYRewards.sub(allYGYRewards);\\n    }\\n\\n    function addPendingRewards(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n        pendingRewards = pendingRewards.add(_amount);\\n        rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n\\n        if (YGYReserve > _amount) {\\n            pendingYGYRewards = pendingYGYRewards.add(_amount);\\n            YGYReserve = YGYReserve.sub(_amount);\\n        } else if (YGYReserve > 0) {\\n            pendingYGYRewards = pendingYGYRewards.add(YGYReserve);\\n            YGYReserve = 0;\\n        }\\n    }\\n\\n    function addAdditionalRewards(uint256 _amount, bool _ygy) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_ygy) {\\n            YGYReserve = YGYReserve.add(_amount);\\n        } else {\\n            pendingRewards = pendingRewards.add(_amount);\\n            rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n        }\\n    }\\n\\n    function getPoolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolInfo(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            IERC20 _token,\\n            uint256 _allocPointt,\\n            uint256 _accRAMPerShare,\\n            uint256 _accYGYPerShare,\\n            bool _withdrawable,\\n            uint256 _effectiveAdditionalTokensFromBoosts\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_poolId];\\n        return (\\n            pool.token,\\n            pool.allocPoint,\\n            pool.accRAMPerShare,\\n            pool.accYGYPerShare,\\n            pool.withdrawable,\\n            pool.effectiveAdditionalTokensFromBoosts\\n        );\\n    }\\n\\n    // Total allocattion points for the whole contract\\n    uint256 public totalAllocPoint;\\n\\n    // Pending rewards.\\n    uint256 public pendingRewards;\\n    uint256 public pendingYGYRewards;\\n\\n    // Extra balance-keeping for extra-token rewards\\n    uint256 public YGYReserve;\\n\\n    function setYGYReserve(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        YGYReserve = _amount;\\n    }\\n\\n    // Reward token balance-keeping\\n    uint256 internal ramBalance;\\n\\n    function setRAMBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ramBalance = _amount;\\n    }\\n\\n    uint256 internal ygyBalance;\\n\\n    function setYGYBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ygyBalance = _amount;\\n    }\\n\\n    uint256 public RAMVaultStartBlock;\\n\\n    function setRAMVaultStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        RAMVaultStartBlock = block.number;\\n    }\\n\\n    uint256 public epochCalculationStartBlock;\\n\\n    function setEpochCalculationStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochCalculationStartBlock = block.number;\\n    }\\n\\n    uint256 public cumulativeRewardsSinceStart;\\n    uint256 public cumulativeYGYRewardsSinceStart;\\n\\n    function setCumulativeRewardsSinceStart() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        cumulativeRewardsSinceStart =\\n            cumulativeRewardsSinceStart +\\n            rewardsInThisEpoch;\\n\\n        cumulativeYGYRewardsSinceStart =\\n            cumulativeYGYRewardsSinceStart +\\n            rewardsInThisEpoch;\\n    }\\n\\n    uint256 public rewardsInThisEpoch;\\n\\n    function setRewardsInThisEpoch(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        rewardsInThisEpoch = _amount;\\n    }\\n\\n    uint256 public epoch;\\n\\n    // TOKENS\\n    INBUNIERC20 public ram; // The RAM token\\n    IERC20 public ygy; // The YGY token\\n    address public _YGYRAMPair;\\n    address public _YGYToken;\\n    address public _YGYWETHPair;\\n    address public _RAMToken;\\n    IWETH public _WETH;\\n    IERC20 public _dXIOTToken;\\n\\n    function initializeRAMVault() external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        RAMVaultStartBlock = block.number;\\n\\n        boostLevelCosts[1] = 5 * 1e18; // 5 RAM tokens\\n        boostLevelCosts[2] = 15 * 1e18; // 15 RAM tokens\\n        boostLevelCosts[3] = 30 * 1e18; // 30 RAM tokens\\n        boostLevelCosts[4] = 60 * 1e18; // 60 RAM tokens\\n        boostLevelMultipliers[1] = 5; // 5%\\n        boostLevelMultipliers[2] = 15; // 15%\\n        boostLevelMultipliers[3] = 30; // 30%\\n        boostLevelMultipliers[4] = 60; // 60%\\n    }\\n\\n    function setTokens(\\n        address RAMToken,\\n        address YGYToken,\\n        address WETH,\\n        address YGYRAMPair,\\n        address YGYWethPair,\\n        address[] memory nfts,\\n        address dXIOTToken\\n    ) external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        ram = INBUNIERC20(RAMToken);\\n        ygy = IERC20(YGYToken);\\n        _RAMToken = RAMToken;\\n        _YGYToken = YGYToken;\\n        _WETH = IWETH(WETH);\\n        _YGYRAMPair = YGYRAMPair;\\n        _YGYWETHPair = YGYWethPair;\\n        _dXIOTToken = IERC20(dXIOTToken);\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            _NFTs[i + 1] = nfts[i];\\n        }\\n    }\\n\\n    // Boosts\\n    uint256 public boostFees;\\n\\n    function setBoostFees(uint256 _amount, bool _add) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_add) {\\n            boostFees = boostFees.add(_amount);\\n        } else {\\n            boostFees = _amount;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelCosts;\\n\\n    function checkRewards(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pendingRAM, uint256 pendingYGY)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 effectiveAmount = user.amount.add(user.boostAmount);\\n        uint256 YGYRewards;\\n        if (pool.accYGYPerShare > 0) {\\n            YGYRewards = effectiveAmount.mul(pool.accYGYPerShare).div(1e12).sub(\\n                user.rewardDebtYGY\\n            );\\n        }\\n        return (\\n            effectiveAmount.mul(pool.accRAMPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            ),\\n            YGYRewards\\n        );\\n    }\\n\\n    function getBoostLevelCost(uint256 _level) external view returns (uint256) {\\n        return boostLevelCosts[_level];\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelMultipliers;\\n\\n    function getBoostLevelMultiplier(uint256 _level)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return boostLevelMultipliers[_level];\\n    }\\n\\n    function updateBoosts(\\n        uint256[] memory _boostMultipliers,\\n        uint256[] memory _boostCosts\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        // Update boost costs\\n        for (uint8 i; i <= _boostMultipliers.length; i++) {\\n            boostLevelCosts[i + 1] = _boostCosts[i];\\n            boostLevelMultipliers[i + 1] = _boostMultipliers[i];\\n        }\\n    }\\n\\n    // For easy graphing historical epoch rewards\\n    mapping(uint256 => uint256) public epochRewards;\\n\\n    function setEpochRewards() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochRewards[epoch] = rewardsInThisEpoch;\\n        epoch++;\\n    }\\n\\n    /*\\n         ROUTER\\n    */\\n\\n    // Mapping of (user => last ticket level)\\n    mapping(address => uint256) public lastTicketLevel;\\n\\n    // Setter for contracts using\\n    function setLastTicketLevel(address _user, uint256 _level) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        lastTicketLevel[_user] = _level;\\n    }\\n\\n    // Total eth contributed to a vault.\\n    mapping(address => uint256) public liquidityContributedEthValue;\\n\\n    // Set value for mapping from external contracts\\n    function setLiquidityContributedEthValue(\\n        address _spender,\\n        uint256 _amount,\\n        bool _delete\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_delete) {\\n            delete liquidityContributedEthValue[_spender];\\n        } else {\\n            liquidityContributedEthValue[_spender] = liquidityContributedEthValue[_spender]\\n                .add(_amount);\\n        }\\n    }\\n\\n    // NFT STUFF\\n    // Mapping of (level number => NFT address)\\n    mapping(uint256 => address) public _NFTs;\\n\\n    // Property object, extra field for arbirtrary values in future\\n    struct NFTProperty {\\n        string pType;\\n        uint256 pValue;\\n        bytes32 extra;\\n    }\\n\\n    mapping(address => NFTProperty[]) public nftPropertyChoices;\\n\\n    function setNFTPropertiesForContract(\\n        address _contractAddress,\\n        NFTProperty[] memory _properties\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 i; i < _properties.length; i++) {\\n            nftPropertyChoices[_contractAddress].push(_properties[i]);\\n        }\\n    }\\n\\n    function getNFTAddress(uint256 _contractId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _NFTs[_contractId];\\n    }\\n\\n    function getNFTProperty(uint256 _contractId, uint256 _index)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            bytes32\\n        )\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty memory properties = nftPropertyChoices[NFTAddress][_index];\\n\\n        return (properties.pType, properties.pValue, properties.extra);\\n    }\\n\\n    function getNFTPropertyCount(uint256 _contractId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty[] memory properties = nftPropertyChoices[NFTAddress];\\n        return properties.length;\\n    }\\n\\n    // General-purpose mappings\\n    mapping(bytes32 => mapping(address => bool)) booleanMapStorage;\\n    uint256[] public booleanMapStorageCount;\\n\\n    function getBooleanMapValue(string memory _key, address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        booleanMapStorage[key][_address];\\n    }\\n\\n    mapping(bytes32 => address) addressStorage;\\n    uint256[] public addressStorageCount;\\n\\n    function getAddressStorage(string memory _key)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        return addressStorage[key];\\n    }\\n\\n    mapping(bytes32 => uint256) uintStorage;\\n    uint256[] public uintStorageCount;\\n\\n    struct StateStruct {\\n        bytes32 name;\\n        mapping(bytes32 => bytes32) value;\\n    }\\n\\n    struct ObjectStruct {\\n        StateStruct state;\\n        address owner;\\n        bool isObject;\\n    }\\n\\n    function stringToBytes32(string memory source)\\n        public\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4bc2ed6e5de2be34368976db4fa07d6aa9aa0a5b8059da16c12337616faa7e8f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x619bd81a10e36a619af89fde8021756c06c246f3b9892d77e820e638f2259de9\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdb4db030965e88489f4aaa2ca49856e2c35428aa268e3b6d7aaeb4419be091c1\"},\"contracts/interfaces/INBUNIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INBUNIERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Log(string log);\\n}\\n\",\"keccak256\":\"0x8b72d4c7a32eb1cd9c2ef9f1e02101dda1f85e396d51ed3c6c99bfa6a271ea4f\",\"license\":\"MIT\"},\"contracts/libraries/AddressERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressERC721 {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac84a8ed965d4532086e3615fd51c912f4af0e4388e18cbc1bfbf440a9061a09\",\"license\":\"MIT\"},\"contracts/libraries/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nlibrary Bytes {\\n    using SafeMath for uint256;\\n\\n    function toUint256(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (uint256 value)\\n    {\\n        assembly {\\n            value := mload(add(_bytes, 0x20))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90ace1e1fa4eaa67f1cb5b7d013413cecd9597e119dfb49c63f03d1dd5f1ab61\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\nlibrary PoolHelper {\\n    using SafeMath for uint256;\\n\\n    function getPool(uint256 _poolId, YGYStorageV1 _storage)\\n        internal\\n        view\\n        returns (YGYStorageV1.PoolInfo memory)\\n    {\\n        (\\n            IERC20 token,\\n            uint256 allocPoint,\\n            uint256 accRAMPerShare,\\n            uint256 accYGYPerShare,\\n            bool withdrawable,\\n            uint256 effectiveAdditionalTokensFromBoosts\\n        ) = _storage.poolInfo(_poolId);\\n        return\\n            YGYStorageV1.PoolInfo({\\n                token: token,\\n                allocPoint: allocPoint,\\n                accRAMPerShare: accRAMPerShare,\\n                accYGYPerShare: accYGYPerShare,\\n                withdrawable: withdrawable,\\n                effectiveAdditionalTokensFromBoosts: effectiveAdditionalTokensFromBoosts\\n            });\\n    }\\n\\n    function averageFeesPerBlockSinceStart(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage\\n                .cumulativeRewardsSinceStart()\\n                .add(_storage.rewardsInThisEpoch())\\n                .div(block.number.sub(_storage.RAMVaultStartBlock()));\\n    }\\n\\n    // Returns averge fees in this epoch\\n    function averageFeesPerBlockEpoch(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage.rewardsInThisEpoch().div(\\n                block.number.sub(_storage.epochCalculationStartBlock())\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5a3037a0a214e760e5f056f1c9707bd79bc2b6380f6e4b2cbaed2a8ae26250b3\",\"license\":\"UNLICENSED\"},\"contracts/libraries/UserHelper.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"../StorageState.sol\\\";\\n\\nlibrary UserHelper {\\n    using SafeMath for uint256;\\n\\n    function effectiveAmount(YGYStorageV1.UserInfo memory self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        return self.amount.add(self.boostAmount);\\n    }\\n\\n    function getUser(\\n        uint256 _poolId,\\n        address _user,\\n        YGYStorageV1 _storage\\n    ) internal view returns (YGYStorageV1.UserInfo memory) {\\n        (\\n            uint256 amount,\\n            uint256 rewardDebt,\\n            uint256 rewardDebtYGY,\\n            uint256 boostAmount,\\n            uint256 boostLevel,\\n            uint256 spentMultiplierTokens\\n        ) = _storage.userInfo(_poolId, _user);\\n\\n        return\\n            YGYStorageV1.UserInfo({\\n                amount: amount,\\n                rewardDebt: rewardDebt,\\n                rewardDebtYGY: rewardDebtYGY,\\n                boostAmount: boostAmount,\\n                boostLevel: boostLevel,\\n                spentMultiplierTokens: spentMultiplierTokens\\n            });\\n    }\\n\\n    function userRewards(\\n        YGYStorageV1.UserInfo memory self,\\n        uint256 _poolId,\\n        YGYStorageV1 _storage\\n    ) internal view returns (uint256 RAMRewards, uint256 YGYRewards) {\\n        (, , uint256 accRAMPerShare, uint256 accYGYPerShare, , ) = YGYStorageV1(\\n            _storage\\n        )\\n            .getPoolInfo(_poolId);\\n        return (\\n            effectiveAmount(self).mul(accRAMPerShare).div(1e12).sub(\\n                self.rewardDebt\\n            ),\\n            effectiveAmount(self).mul(accYGYPerShare).div(1e12).sub(\\n                self.rewardDebtYGY\\n            )\\n        );\\n    }\\n\\n    // Returns the multiplier for user.\\n    function getTotalMultiplier(\\n        YGYStorageV1.UserInfo memory self,\\n        uint256 _level,\\n        address _user,\\n        YGYStorageV1 _storage\\n    ) internal view returns (uint256) {\\n        uint256 NFTBoost = _storage.getNFTBoost(_user);\\n        return _storage.getBoostLevelMultiplier(_level).add(NFTBoost);\\n    }\\n\\n    function updateDebts(\\n        YGYStorageV1.UserInfo memory self,\\n        YGYStorageV1.PoolInfo memory _pool\\n    ) internal view {\\n        self.rewardDebt = effectiveAmount(self).mul(_pool.accRAMPerShare).div(\\n            1e12\\n        );\\n        self.rewardDebtYGY = effectiveAmount(self)\\n            .mul(_pool.accYGYPerShare)\\n            .div(1e12);\\n    }\\n\\n    function adjustEffectiveStake(\\n        YGYStorageV1.UserInfo memory self,\\n        YGYStorageV1.PoolInfo memory _pool,\\n        address _user,\\n        uint256 _newLevel,\\n        bool _isWithdraw,\\n        YGYStorageV1 _storage\\n    ) internal view {\\n        uint256 prevBalancesAccounting = self.boostAmount;\\n        // Calculate and set self's new accounting balance\\n        uint256 accTotalMultiplier = getTotalMultiplier(\\n            self,\\n            _newLevel > 0 ? _newLevel : self.boostLevel,\\n            _user,\\n            _storage\\n        );\\n\\n        uint256 newBalancesAccounting = self.amount.mul(accTotalMultiplier).div(\\n            100\\n        );\\n        self.boostAmount = newBalancesAccounting;\\n\\n        // Adjust total accounting supply accordingly\\n        if (_isWithdraw) {\\n            _pool.effectiveAdditionalTokensFromBoosts = _pool\\n                .effectiveAdditionalTokensFromBoosts\\n                .sub(prevBalancesAccounting.sub(newBalancesAccounting));\\n        } else {\\n            _pool.effectiveAdditionalTokensFromBoosts = _pool\\n                .effectiveAdditionalTokensFromBoosts\\n                .add(newBalancesAccounting.sub(prevBalancesAccounting));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb179e2f928f6f361e56829f381ebdd61549679d2340fbcfffa6e8d186ca98d25\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2b2dfdece146425af2c3468ccd72c52cbf709eb38421a300e21ef7f57b033fce\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615162806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063c4014588116100a2578063e2bbb15811610071578063e2bbb15814610390578063f2fde38b146103a3578063f8c8765e146103b6578063ff1888ca146103c9576101da565b8063c40145881461034f578063cc1362ec14610362578063dbe0901f1461036a578063e18cb4fe1461037d576101da565b80638da5cb5b116100de5780638da5cb5b14610324578063934eaa501461032c578063a676860a14610334578063bb57ad2014610347576101da565b8063715018a6146103015780637abceffd146103095780637cf75ca31461031c576101da565b8063423d6fa01161017c5780635db64aba1161014b5780635db64aba146102c0578063630b5ba1146102d357806364482f79146102db57806370876c98146102ee576101da565b8063423d6fa014610274578063441a3e70146102875780634cf5fbf51461029a5780635312ea8e146102ad576101da565b80633a0967cd116101b85780633a0967cd146102335780633aab0a62146102465780633b6a68491461024e5780633fe6a27814610261576101da565b80630962ef79146101df57806310178d9c146101f457806329575f6a1461021e575b600080fd5b6101f26101ed366004614a79565b6103dc565b005b610207610202366004614aa9565b610422565b604051610215929190615090565b60405180910390f35b6102266104af565b6040516102159190614c13565b6101f26102413660046148c3565b6104be565b6101f26105ef565b6101f261025c366004614a79565b61075c565b6101f261026f366004614a79565b610911565b6101f2610282366004614a79565b610a93565b6101f2610295366004614b03565b610b64565b6101f26102a83660046148c3565b610b74565b6101f26102bb366004614a79565b610da1565b6101f26102ce36600461483d565b610f31565b6101f26112ca565b6101f26102e9366004614b47565b6113fa565b6101f26102fc366004614b03565b61146b565b6101f2611834565b6101f2610317366004614acd565b6118b3565b6101f2611924565b610226611e22565b6101f2611e31565b6101f261034236600461478e565b611ea0565b6101f2611f28565b6101f261035d366004614882565b61238f565b6101f26124f1565b6101f26103783660046148c3565b6129e8565b6101f261038b366004614a57565b612aa2565b6101f261039e366004614b03565b612b1f565b6101f26103b136600461478e565b612d4b565b6101f26103c43660046147e2565b612e02565b6101f26103d73660046147aa565b612f02565b6103e68133612f65565b7fc05cbf47ef4152ea1b2446fb1ba8eb9c7285054d9c85f2f52c294200d8d1d38b8133604051610417929190614f9b565b60405180910390a150565b60008054604051630405e36760e21b815282916001600160a01b0316906310178d9c906104559087908790600401614f9b565b604080518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190614b24565b915091509250929050565b609c546001600160a01b031690565b6000805460405163158dd39360e01b81526001600160a01b039091169063158dd393906104f390869088903390600401614ffb565b60206040518083038186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190614a91565b90508181101561056e5760405162461bcd60e51b815260040161056590614dbe565b60405180910390fd5b6000546001600160a01b03166360443a4584863361058c8688612f9f565b6040518563ffffffff1660e01b81526004016105ab9493929190614fb2565b600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b505050506105e983838633612fea565b50505050565b6000805460408051632515621d60e11b815290516001600160a01b0390921692634a2ac43a9260048084019382900301818387803b15801561063057600080fd5b505af1158015610644573d6000803e3d6000fd5b5050600080546040805163221205f760e21b815290516001600160a01b03909216945063884817dc9350600480820193929182900301818387803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b5050600080546040516309df3e6d60e41b81526001600160a01b039091169350639df3e6d092506106d39190600401614c89565b600060405180830381600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b5050600080546040805163022fed0760e11b815290516001600160a01b03909216945063045fda0e9350600480820193929182900301818387803b15801561074857600080fd5b505af11580156105e9573d6000803e3d6000fd5b6107646131ee565b6065546001600160a01b039081169116146107915760405162461bcd60e51b815260040161056590614e25565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156107dd57600080fd5b505afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190614913565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b815260040161084493929190614c27565b602060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906148f7565b80156108a25750600081115b6108ab57600080fd5b600080546040516301e0a3fb60e61b81526001600160a01b0390911691637828fec0916108dc918591600401614c92565b600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b5050505050565b6109196131ee565b6065546001600160a01b039081169116146109465760405162461bcd60e51b815260040161056590614e25565b60008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190614913565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b81526004016109f993929190614c27565b602060405180830381600087803b158015610a1357600080fd5b505af1158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b91906148f7565b8015610a575750600081115b610a6057600080fd5b6000546040516301e0a3fb60e61b81526001600160a01b0390911690637828fec0906108dc908490600190600401614c92565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015610adf57600080fd5b505afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190614913565b6001600160a01b0316336001600160a01b031614610b3457600080fd5b600054604051630211eb7d60e51b81526001600160a01b039091169063423d6fa0906108dc908490600401614c89565b610b7082823333612fea565b5050565b610b7c6146f3565b600054610b939084906001600160a01b03166131f2565b9050610b9d614734565b600054610bb690859087906001600160a01b03166132c4565b9050610bc28486612f65565b8215610c845781516040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610bfb90339030908890600401614c27565b602060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906148f7565b508051610c5a908461338c565b8152606081015115610c845760008054610c849183918591899181906001600160a01b03166133b1565b610c8e818361344e565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a90610cc290879089908690600401614fd7565b600060405180830381600087803b158015610cdc57600080fd5b505af1158015610cf0573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150610d26908790869060040161503b565b600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b5050505083856001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1585604051610d929190614c89565b60405180910390a35050505050565b610da96146f3565b600054610dc09083906001600160a01b03166131f2565b90508060800151610dd057600080fd5b610dd8614734565b600054610df190849033906001600160a01b03166132c4565b80518351919250610e0d916001600160a01b031690339061349c565b8051604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059591610e4191614c89565b60405180910390a3600080825260608201819052602082018190526040808301829052905490516303c4399d60e11b81526001600160a01b0390911690630788733a90610e9690869033908690600401614fd7565b600060405180830381600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150610efa908690869060040161503b565b600060405180830381600087803b158015610f1457600080fd5b505af1158015610f28573d6000803e3d6000fd5b50505050505050565b82610f3a61476a565b604051631c72e6e760e11b81526001600160a01b038316906338e5cdce90610f66908790600401614c89565b60006040518083038186803b158015610f7e57600080fd5b505afa158015610f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fba919081019061498e565b9050610fc4614734565b600054610fdd90859089906001600160a01b03166132c4565b9050610fe76146f3565b600054610ffe9086906001600160a01b03166131f2565b90507fb11f0630abdc3c49238c394684d47c0a22fb6922fdf83b64cfdd3d9769f1a26383600001516040516020016110369190614bf7565b6040516020818303038152906040528051906020012014156111535760008054906101000a90046001600160a01b03166001600160a01b0316638792a265856001600160a01b0316638291286c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e59190614a91565b8a6040518363ffffffff1660e01b8152600401611103929190614f9b565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b505060008054611153935085925084918c9181906001600160a01b03166133b1565b604051630852cd8d60e31b81526001600160a01b038516906342966c689061117f908990600401614c89565b600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b50506000546040516303c4399d60e11b81526001600160a01b039091169250630788733a91506111e59088908c908790600401614fd7565b600060405180830381600087803b1580156111ff57600080fd5b505af1158015611213573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150611249908890859060040161503b565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b50505050600085896001600160a01b03167f2afbc6f74788c58c5d56fca9812c385d27a7bf8004bd05cd1b9f057ad145f69d60016040516112b89190614c7e565b60405180910390a45050505050505050565b60008060005b60008054906101000a90046001600160a01b03166001600160a01b031663b3944d526040518163ffffffff1660e01b815260040160206040518083038186803b15801561131c57600080fd5b505afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113549190614a91565b81101561139157600080611367836134f2565b9092509050611376858361338c565b9450611382848261338c565b935050508060010190506112d0565b50600054604051635105a97560e01b81526001600160a01b0390911690635105a975906113c49085908590600401615090565b600060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b505050505050565b6114026131ee565b6065546001600160a01b0390811691161461142f5760405162461bcd60e51b815260040161056590614e25565b6114376112ca565b60005460405163236535f560e11b81526001600160a01b03909116906346ca6bea90610efa9086908690869060040161509e565b6114736146f3565b60005461148a9084906001600160a01b03166131f2565b9050611494614734565b6000546114ad90859033906001600160a01b03166132c4565b90508060800151831180156114c3575060048311155b6114cc57600080fd5b60008054604051636a9d1f6f60e01b81526001600160a01b0390911690636a9d1f6f906114fd908790600401614c89565b60206040518083038186803b15801561151557600080fd5b505afa158015611529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154d9190614a91565b905060006115688360a0015183612f9f90919063ffffffff16565b905060008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190614913565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b815260040161161d93929190614c27565b602060405180830381600087803b15801561163757600080fd5b505af115801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f91906148f7565b61167857600080fd5b60a0830151611687908261338c565b60a0840152608083018590528251156116b957600080546116b9918591879133918a91906001600160a01b03166133b1565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a906116ed90899033908890600401614fd7565b600060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150611751908990889060040161503b565b600060405180830381600087803b15801561176b57600080fd5b505af115801561177f573d6000803e3d6000fd5b5050600054604051631be9449960e11b81526001600160a01b0390911692506337d2893291506117b6908490600190600401614c92565b600060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b505050508486336001600160a01b03167f2afbc6f74788c58c5d56fca9812c385d27a7bf8004bd05cd1b9f057ad145f69d60006040516118249190614c7e565b60405180910390a4505050505050565b61183c6131ee565b6065546001600160a01b039081169116146118695760405162461bcd60e51b815260040161056590614e25565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6118bb6131ee565b6065546001600160a01b039081169116146118e85760405162461bcd60e51b815260040161056590614e25565b6118f06112ca565b600054604051637abceffd60e01b81526001600160a01b0390911690637abceffd90610efa9086908690869060040161501a565b609a5415611e205760008060008060009054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561197e57600080fd5b505afa158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b69190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016119e19190614c13565b60206040518083038186803b1580156119f957600080fd5b505afa158015611a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a319190614a91565b905080609a541115611a6c57611a536064611a4d836046613921565b9061395b565b9250611a656064611a4d83601e613921565b9150611aa7565b611a876064611a4d6046609a5461392190919063ffffffff16565b9250611aa46064611a4d601e609a5461392190919063ffffffff16565b91505b8215611bb85760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b319190614913565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611b64929116908790600401614c65565b602060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb691906148f7565b505b8115611cc95760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0a57600080fd5b505afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614913565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611c75929116908690600401614c65565b602060405180830381600087803b158015611c8f57600080fd5b505af1158015611ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc791906148f7565b505b60005460408051638f33b5e560e01b815290516001600160a01b0390921691638f838a9f918391638f33b5e591600480820192602092909190829003018186803b158015611d1657600080fd5b505afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e9190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d799190614c13565b60206040518083038186803b158015611d9157600080fd5b505afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc99190614a91565b6040518263ffffffff1660e01b8152600401611de59190614c89565b600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b50506000609a5550505050505b565b6065546001600160a01b031690565b611e396131ee565b609c546001600160a01b03908116911614611e5357600080fd5b609c80546001600160a01b03191690556040517ff564c40f4f45e62a2c1e6c22e8bfb46501f0f71fa1c72e5358903fa1115a4b6490611e96906000908190614c4b565b60405180910390a1565b611ea86131ee565b609c546001600160a01b03908116911614611ec257600080fd5b6001600160a01b038116611ed557600080fd5b609c80546001600160a01b0319166001600160a01b0383811691909117918290556040517ff564c40f4f45e62a2c1e6c22e8bfb46501f0f71fa1c72e5358903fa1115a4b64926104179216908490614c4b565b60008054604051631be9449960e11b81526001600160a01b03909116916337d2893291611f5a91908190600401614c92565b600060405180830381600087803b158015611f7457600080fd5b505af1158015611f88573d6000803e3d6000fd5b505050506000612017600260008054906101000a90046001600160a01b03166001600160a01b03166309e3de416040518163ffffffff1660e01b815260040160206040518083038186803b158015611fdf57600080fd5b505afa158015611ff3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d9190614a91565b9050801561238c5760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561206b57600080fd5b505afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a39190614913565b60995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926120d6929116908590600401614c65565b602060405180830381600087803b1580156120f057600080fd5b505af1158015612104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212891906148f7565b61213157600080fd5b60006121436064611a4d846046613921565b9050801561225d5760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561219757600080fd5b505afa1580156121ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cf9190614913565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612202929116908590600401614c65565b602060405180830381600087803b15801561221c57600080fd5b505af1158015612230573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225491906148f7565b61225d57600080fd5b600061226f6064611a4d85601e613921565b905080156123895760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c357600080fd5b505afa1580156122d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fb9190614913565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261232e929116908590600401614c65565b602060405180830381600087803b15801561234857600080fd5b505af115801561235c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238091906148f7565b61238957600080fd5b50505b50565b6123988161399d565b80156123b957506123a76131ee565b609c546001600160a01b039081169116145b6123c257600080fd5b6124536201731860008054906101000a90046001600160a01b03166001600160a01b03166331db122c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241557600080fd5b505afa158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190614a91565b9061338c565b43116124715760405162461bcd60e51b815260040161056590614ea8565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b39061249f9084908690600401614c65565b602060405180830381600087803b1580156124b957600080fd5b505af11580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e991906148f7565b609b5415611e205760008060008060009054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561254b57600080fd5b505afa15801561255f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125839190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016125ae9190614c13565b60206040518083038186803b1580156125c657600080fd5b505afa1580156125da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fe9190614a91565b905080609b5411156126335761261a6064611a4d836046613921565b925061262c6064611a4d83601e613921565b915061266e565b61264e6064611a4d6046609b5461392190919063ffffffff16565b925061266b6064611a4d601e609b5461392190919063ffffffff16565b91505b821561277f5760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126c057600080fd5b505afa1580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f89190614913565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261272b929116908790600401614c65565b602060405180830381600087803b15801561274557600080fd5b505af1158015612759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277d91906148f7565b505b81156128905760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127d157600080fd5b505afa1580156127e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128099190614913565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261283c929116908690600401614c65565b602060405180830381600087803b15801561285657600080fd5b505af115801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e91906148f7565b505b6000546040805163fb70c3bf60e01b815290516001600160a01b039092169163094601f191839163fb70c3bf91600480820192602092909190829003018186803b1580156128dd57600080fd5b505afa1580156128f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129159190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016129409190614c13565b60206040518083038186803b15801561295857600080fd5b505afa15801561296c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129909190614a91565b6040518263ffffffff1660e01b81526004016129ac9190614c89565b600060405180830381600087803b1580156129c657600080fd5b505af11580156129da573d6000803e3d6000fd5b50506000609b555050505050565b6000546040516360443a4560e01b81526001600160a01b03909116906360443a4590612a1e908590339088908790600401614fb2565b600060405180830381600087803b158015612a3857600080fd5b505af1158015612a4c573d6000803e3d6000fd5b50505050826001600160a01b0316336001600160a01b03167fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a78484604051612a95929190615090565b60405180910390a3505050565b612aaa6131ee565b6065546001600160a01b03908116911614612ad75760405162461bcd60e51b815260040161056590614e25565b6103e88161ffff161115612afd5760405162461bcd60e51b815260040161056590614ecf565b6099805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b612b276146f3565b600054612b3e9084906001600160a01b03166131f2565b9050612b48614734565b600054612b6190859033906001600160a01b03166132c4565b9050612b6d8433612f65565b8215612c2f5781516040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612ba690339030908890600401614c27565b602060405180830381600087803b158015612bc057600080fd5b505af1158015612bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf891906148f7565b508051612c05908461338c565b8152608081015115612c2f5760008054612c2f9183918591339181906001600160a01b03166133b1565b612c39818361344e565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a90612c6d90879033908690600401614fd7565b600060405180830381600087803b158015612c8757600080fd5b505af1158015612c9b573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150612cd1908790869060040161503b565b600060405180830381600087803b158015612ceb57600080fd5b505af1158015612cff573d6000803e3d6000fd5b5050505083336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1585604051612d3d9190614c89565b60405180910390a350505050565b612d536131ee565b6065546001600160a01b03908116911614612d805760405162461bcd60e51b815260040161056590614e25565b6001600160a01b038116612da65760405162461bcd60e51b815260040161056590614cd5565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a81b900460ff1680612e1d5750612e1d6139a3565b80612e325750600054600160a01b900460ff16155b612e4e5760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff16158015612e85576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b612e8d6139a9565b60998054609c80546001600160a01b03199081166001600160a01b038a81169190911790925561ffff60a01b1990921660b560a21b1782168782161790925560978054821686841617905560988054909116918416919091179055801561090a576000805460ff60a81b191690555050505050565b612f0a6131ee565b6065546001600160a01b03908116911614612f375760405162461bcd60e51b815260040161056590614e25565b609780546001600160a01b039384166001600160a01b03199182161790915560988054929093169116179055565b612f6d6112ca565b600080612f7a8484610422565b90925090508115612f8f57612f8f8383613a52565b80156105e9576105e98382613e90565b6000612fe183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614300565b90505b92915050565b612ff26146f3565b6000546130099086906001600160a01b03166131f2565b9050806080015161302c5760405162461bcd60e51b815260040161056590614f3a565b613034614734565b60005461304d90879086906001600160a01b03166132c4565b905084816000015110156130735760405162461bcd60e51b815260040161056590614d87565b61307d8685612f65565b84156130d057805161308f9086612f9f565b815281516130a7906001600160a01b0316848761349c565b6060810151156130d057600080546130d0918391859188916001906001600160a01b03166133b1565b6130da818361344e565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a9061310e90899033908690600401614fd7565b600060405180830381600087803b15801561312857600080fd5b505af115801561313c573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150613172908990869060040161503b565b600060405180830381600087803b15801561318c57600080fd5b505af11580156131a0573d6000803e3d6000fd5b5050505085836001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568876040516131de9190614c89565b60405180910390a3505050505050565b3390565b6131fa6146f3565b600080600080600080876001600160a01b0316631526fe278a6040518263ffffffff1660e01b815260040161322f9190614c89565b60c06040518083038186803b15801561324757600080fd5b505afa15801561325b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327f919061492f565b6040805160c0810182526001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a0820152965050505050505092915050565b6132cc614734565b600080600080600080876001600160a01b03166393f1a40b8b8b6040518363ffffffff1660e01b8152600401613303929190614f9b565b60c06040518083038186803b15801561331b57600080fd5b505afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190614b74565b6040805160c0810182529687526020870195909552938501929092526060840152608083015260a08201529a9950505050505050505050565b600082820183811015612fe15760405162461bcd60e51b815260040161056590614d1b565b606086015160006133d488866133cb5789608001516133cd565b865b888661432c565b905060006133f46064611a4d848c6000015161392190919063ffffffff16565b60608a01819052905084156134255761341b6134108483612f9f565b60a08a015190612f9f565b60a0890152613443565b61343d6134328285612f9f565b60a08a01519061338c565b60a08901525b505050505050505050565b61346e64e8d4a51000611a4d836040015161346886614401565b90613921565b602083015260608101516134909064e8d4a5100090611a4d9061346886614401565b60409092019190915250565b6123898363a9059cbb60e01b84846040516024016134bb929190614c65565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614415565b6000806134fd6146f3565b6000546135149085906001600160a01b03166131f2565b9050600081600001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016135489190614c13565b60206040518083038186803b15801561356057600080fd5b505afa158015613574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135989190614a91565b9050806135ad5760008093509350505061391c565b60006135c68360a001518361338c90919063ffffffff16565b90506136d160008054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561361757600080fd5b505afa15801561362b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364f9190614a91565b602080860151600054604080516376f69fed60e11b81529051611a4d946001600160a01b039093169263eded3fda9260048082019391829003018186803b15801561369957600080fd5b505afa1580156136ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134689190614a91565b6099549095506000906136f89061271090611a4d908990600160a01b900461ffff16613921565b609a54909150613708908261338c565b609a556000805460408051638b6ff57b60e01b815290516001600160a01b0390921691638b6ff57b91600480820192602092909190829003018186803b15801561375157600080fd5b505afa158015613765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137899190614a91565b9050801561388557600054604080516317caf6f160e01b8152905161381f926001600160a01b0316916317caf6f1916004808301926020929190829003018186803b1580156137d757600080fd5b505afa1580156137eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380f9190614a91565b6020870151611a4d908490613921565b6099549096506000906138469061271090611a4d908a90600160a01b900461ffff16613921565b609b54909150613856908261338c565b609b5561387e61387385611a4d64e8d4a510006134688c87612f9f565b60608801519061338c565b6060870152505b6138aa61389f84611a4d64e8d4a510006134688c88612f9f565b60408701519061338c565b604080870191909152600054905163d4665bb760e01b81526001600160a01b039091169063d4665bb7906138e4908b90899060040161503b565b600060405180830381600087803b1580156138fe57600080fd5b505af1158015613912573d6000803e3d6000fd5b5050505050505050505b915091565b60008261393057506000612fe4565b8282028284828161393d57fe5b0414612fe15760405162461bcd60e51b815260040161056590614de4565b6000612fe183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506144fa565b3b151590565b303b1590565b600054600160a81b900460ff16806139c457506139c46139a3565b806139d95750600054600160a01b900460ff16155b6139f55760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff16158015613a2c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b613a34614531565b613a3c6145c9565b801561238c576000805460ff60a81b1916905550565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613aa157600080fd5b505afa158015613ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad99190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613b049190614c13565b60206040518083038186803b158015613b1c57600080fd5b505afa158015613b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b549190614a91565b905080821115613c675760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613baa57600080fd5b505afa158015613bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be29190614913565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b8152600401613c0f929190614c65565b602060405180830381600087803b158015613c2957600080fd5b505af1158015613c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c6191906148f7565b50613d6c565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613cb357600080fd5b505afa158015613cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ceb9190614913565b6001600160a01b031663a9059cbb84846040518363ffffffff1660e01b8152600401613d18929190614c65565b602060405180830381600087803b158015613d3257600080fd5b505af1158015613d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6a91906148f7565b505b613d74611924565b60005460408051638f33b5e560e01b815290516001600160a01b0390921691638f838a9f918391638f33b5e591600480820192602092909190829003018186803b158015613dc157600080fd5b505afa158015613dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df99190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613e249190614c13565b60206040518083038186803b158015613e3c57600080fd5b505afa158015613e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e749190614a91565b6040518263ffffffff1660e01b8152600401610efa9190614c89565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613edf57600080fd5b505afa158015613ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f179190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613f429190614c13565b60206040518083038186803b158015613f5a57600080fd5b505afa158015613f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f929190614a91565b9050808211156140a55760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fe857600080fd5b505afa158015613ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140209190614913565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040161404d929190614c65565b602060405180830381600087803b15801561406757600080fd5b505af115801561407b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409f91906148f7565b506141aa565b60008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156140f157600080fd5b505afa158015614105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141299190614913565b6001600160a01b031663a9059cbb84846040518363ffffffff1660e01b8152600401614156929190614c65565b602060405180830381600087803b15801561417057600080fd5b505af1158015614184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a891906148f7565b505b6000546040805163fb70c3bf60e01b815290516001600160a01b039092169163094601f191839163fb70c3bf91600480820192602092909190829003018186803b1580156141f757600080fd5b505afa15801561420b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422f9190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161425a9190614c13565b60206040518083038186803b15801561427257600080fd5b505afa158015614286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142aa9190614a91565b6040518263ffffffff1660e01b81526004016142c69190614c89565b600060405180830381600087803b1580156142e057600080fd5b505af11580156142f4573d6000803e3d6000fd5b505050506123896124f1565b600081848411156143245760405162461bcd60e51b81526004016105659190614ca2565b505050900390565b600080826001600160a01b03166391328af2856040518263ffffffff1660e01b815260040161435b9190614c13565b60206040518083038186803b15801561437357600080fd5b505afa158015614387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ab9190614a91565b90506143f581846001600160a01b0316636798f19f886040518263ffffffff1660e01b81526004016143dd9190614c89565b60206040518083038186803b15801561241557600080fd5b9150505b949350505050565b60608101518151600091612fe4919061338c565b614427826001600160a01b03166146ba565b6144435760405162461bcd60e51b815260040161056590614f64565b60006060836001600160a01b03168360405161445f9190614bf7565b6000604051808303816000865af19150503d806000811461449c576040519150601f19603f3d011682016040523d82523d6000602084013e6144a1565b606091505b5091509150816144c35760405162461bcd60e51b815260040161056590614d52565b8051156105e957808060200190518101906144de91906148f7565b6105e95760405162461bcd60e51b815260040161056590614ef0565b6000818361451b5760405162461bcd60e51b81526004016105659190614ca2565b50600083858161452757fe5b0495945050505050565b600054600160a81b900460ff168061454c575061454c6139a3565b806145615750600054600160a01b900460ff16155b61457d5760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff16158015613a3c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b179055801561238c576000805460ff60a81b1916905550565b600054600160a81b900460ff16806145e457506145e46139a3565b806145f95750600054600160a01b900460ff16155b6146155760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff1615801561464c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60006146566131ee565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561238c576000805460ff60a81b1916905550565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906143f9575050151592915050565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600080191681525090565b60006020828403121561479f578081fd5b8135612fe181615109565b600080604083850312156147bc578081fd5b82356147c781615109565b915060208301356147d781615109565b809150509250929050565b600080600080608085870312156147f7578182fd5b843561480281615109565b9350602085013561481281615109565b9250604085013561482281615109565b9150606085013561483281615109565b939692955090935050565b60008060008060808587031215614852578384fd5b843561485d81615109565b9350602085013561486d81615109565b93969395505050506040820135916060013590565b600080600060608486031215614896578283fd5b83356148a181615109565b92506020840135915060408401356148b881615109565b809150509250925092565b6000806000606084860312156148d7578283fd5b83356148e281615109565b95602085013595506040909401359392505050565b600060208284031215614908578081fd5b8151612fe18161511e565b600060208284031215614924578081fd5b8151612fe181615109565b60008060008060008060c08789031215614947578182fd5b865161495281615109565b8096505060208701519450604087015193506060870151925060808701516149798161511e565b8092505060a087015190509295509295509295565b600060208083850312156149a0578182fd5b825167ffffffffffffffff808211156149b7578384fd5b90840190606082870312156149ca578384fd5b6149d460606150b6565b8251828111156149e2578586fd5b8301601f810188136149f2578586fd5b805183811115614a00578687fd5b614a12601f8201601f191687016150b6565b93508084528886828401011115614a27578687fd5b614a36818786018885016150dd565b50509081528183015192810192909252604090810151908201529392505050565b600060208284031215614a68578081fd5b813561ffff81168114612fe1578182fd5b600060208284031215614a8a578081fd5b5035919050565b600060208284031215614aa2578081fd5b5051919050565b60008060408385031215614abb578182fd5b8235915060208301356147d781615109565b600080600060608486031215614ae1578081fd5b833592506020840135614af381615109565b915060408401356148b88161511e565b60008060408385031215614b15578182fd5b50508035926020909101359150565b60008060408385031215614b36578182fd5b505080516020909101519092909150565b600080600060608486031215614b5b578081fd5b833592506020840135915060408401356148b88161511e565b60008060008060008060c08789031215614b8c578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b60008251614c098184602087016150dd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9182521515602082015260400190565b6000602082528251806020840152614cc18160408501602087016150dd565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601f908201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604082015260600190565b6020808252600c908201526b4e6f20616c6c6f77616e636560a01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c476f76206e6f7420726561647960981b604082015260600190565b6020808252600790820152664d61782031302560c81b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526010908201526f4e6f7420776974686472617761626c6560801b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b9182526001600160a01b0316602082015260400190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b8381526001600160a01b038316602082015261010081016143f96040830184614bbd565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b600060e08201905083825260018060a01b0383511660208301526020830151604083015260408301516060830152606083015160808301526080830151151560a083015260a083015160c08301529392505050565b918252602082015260400190565b92835260208301919091521515604082015260600190565b60405181810167ffffffffffffffff811182821017156150d557600080fd5b604052919050565b60005b838110156150f85781810151838201526020016150e0565b838111156105e95750506000910152565b6001600160a01b038116811461238c57600080fd5b801515811461238c57600080fdfea2646970667358221220274f03aaf23bf4ff935219cfdd9cfb8180f5b20940b6c48a9690ff62540ac2aa64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063c4014588116100a2578063e2bbb15811610071578063e2bbb15814610390578063f2fde38b146103a3578063f8c8765e146103b6578063ff1888ca146103c9576101da565b8063c40145881461034f578063cc1362ec14610362578063dbe0901f1461036a578063e18cb4fe1461037d576101da565b80638da5cb5b116100de5780638da5cb5b14610324578063934eaa501461032c578063a676860a14610334578063bb57ad2014610347576101da565b8063715018a6146103015780637abceffd146103095780637cf75ca31461031c576101da565b8063423d6fa01161017c5780635db64aba1161014b5780635db64aba146102c0578063630b5ba1146102d357806364482f79146102db57806370876c98146102ee576101da565b8063423d6fa014610274578063441a3e70146102875780634cf5fbf51461029a5780635312ea8e146102ad576101da565b80633a0967cd116101b85780633a0967cd146102335780633aab0a62146102465780633b6a68491461024e5780633fe6a27814610261576101da565b80630962ef79146101df57806310178d9c146101f457806329575f6a1461021e575b600080fd5b6101f26101ed366004614a79565b6103dc565b005b610207610202366004614aa9565b610422565b604051610215929190615090565b60405180910390f35b6102266104af565b6040516102159190614c13565b6101f26102413660046148c3565b6104be565b6101f26105ef565b6101f261025c366004614a79565b61075c565b6101f261026f366004614a79565b610911565b6101f2610282366004614a79565b610a93565b6101f2610295366004614b03565b610b64565b6101f26102a83660046148c3565b610b74565b6101f26102bb366004614a79565b610da1565b6101f26102ce36600461483d565b610f31565b6101f26112ca565b6101f26102e9366004614b47565b6113fa565b6101f26102fc366004614b03565b61146b565b6101f2611834565b6101f2610317366004614acd565b6118b3565b6101f2611924565b610226611e22565b6101f2611e31565b6101f261034236600461478e565b611ea0565b6101f2611f28565b6101f261035d366004614882565b61238f565b6101f26124f1565b6101f26103783660046148c3565b6129e8565b6101f261038b366004614a57565b612aa2565b6101f261039e366004614b03565b612b1f565b6101f26103b136600461478e565b612d4b565b6101f26103c43660046147e2565b612e02565b6101f26103d73660046147aa565b612f02565b6103e68133612f65565b7fc05cbf47ef4152ea1b2446fb1ba8eb9c7285054d9c85f2f52c294200d8d1d38b8133604051610417929190614f9b565b60405180910390a150565b60008054604051630405e36760e21b815282916001600160a01b0316906310178d9c906104559087908790600401614f9b565b604080518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190614b24565b915091509250929050565b609c546001600160a01b031690565b6000805460405163158dd39360e01b81526001600160a01b039091169063158dd393906104f390869088903390600401614ffb565b60206040518083038186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190614a91565b90508181101561056e5760405162461bcd60e51b815260040161056590614dbe565b60405180910390fd5b6000546001600160a01b03166360443a4584863361058c8688612f9f565b6040518563ffffffff1660e01b81526004016105ab9493929190614fb2565b600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b505050506105e983838633612fea565b50505050565b6000805460408051632515621d60e11b815290516001600160a01b0390921692634a2ac43a9260048084019382900301818387803b15801561063057600080fd5b505af1158015610644573d6000803e3d6000fd5b5050600080546040805163221205f760e21b815290516001600160a01b03909216945063884817dc9350600480820193929182900301818387803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b5050600080546040516309df3e6d60e41b81526001600160a01b039091169350639df3e6d092506106d39190600401614c89565b600060405180830381600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b5050600080546040805163022fed0760e11b815290516001600160a01b03909216945063045fda0e9350600480820193929182900301818387803b15801561074857600080fd5b505af11580156105e9573d6000803e3d6000fd5b6107646131ee565b6065546001600160a01b039081169116146107915760405162461bcd60e51b815260040161056590614e25565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156107dd57600080fd5b505afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190614913565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b815260040161084493929190614c27565b602060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906148f7565b80156108a25750600081115b6108ab57600080fd5b600080546040516301e0a3fb60e61b81526001600160a01b0390911691637828fec0916108dc918591600401614c92565b600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b5050505050565b6109196131ee565b6065546001600160a01b039081169116146109465760405162461bcd60e51b815260040161056590614e25565b60008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190614913565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b81526004016109f993929190614c27565b602060405180830381600087803b158015610a1357600080fd5b505af1158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b91906148f7565b8015610a575750600081115b610a6057600080fd5b6000546040516301e0a3fb60e61b81526001600160a01b0390911690637828fec0906108dc908490600190600401614c92565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015610adf57600080fd5b505afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190614913565b6001600160a01b0316336001600160a01b031614610b3457600080fd5b600054604051630211eb7d60e51b81526001600160a01b039091169063423d6fa0906108dc908490600401614c89565b610b7082823333612fea565b5050565b610b7c6146f3565b600054610b939084906001600160a01b03166131f2565b9050610b9d614734565b600054610bb690859087906001600160a01b03166132c4565b9050610bc28486612f65565b8215610c845781516040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610bfb90339030908890600401614c27565b602060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906148f7565b508051610c5a908461338c565b8152606081015115610c845760008054610c849183918591899181906001600160a01b03166133b1565b610c8e818361344e565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a90610cc290879089908690600401614fd7565b600060405180830381600087803b158015610cdc57600080fd5b505af1158015610cf0573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150610d26908790869060040161503b565b600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b5050505083856001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1585604051610d929190614c89565b60405180910390a35050505050565b610da96146f3565b600054610dc09083906001600160a01b03166131f2565b90508060800151610dd057600080fd5b610dd8614734565b600054610df190849033906001600160a01b03166132c4565b80518351919250610e0d916001600160a01b031690339061349c565b8051604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059591610e4191614c89565b60405180910390a3600080825260608201819052602082018190526040808301829052905490516303c4399d60e11b81526001600160a01b0390911690630788733a90610e9690869033908690600401614fd7565b600060405180830381600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150610efa908690869060040161503b565b600060405180830381600087803b158015610f1457600080fd5b505af1158015610f28573d6000803e3d6000fd5b50505050505050565b82610f3a61476a565b604051631c72e6e760e11b81526001600160a01b038316906338e5cdce90610f66908790600401614c89565b60006040518083038186803b158015610f7e57600080fd5b505afa158015610f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fba919081019061498e565b9050610fc4614734565b600054610fdd90859089906001600160a01b03166132c4565b9050610fe76146f3565b600054610ffe9086906001600160a01b03166131f2565b90507fb11f0630abdc3c49238c394684d47c0a22fb6922fdf83b64cfdd3d9769f1a26383600001516040516020016110369190614bf7565b6040516020818303038152906040528051906020012014156111535760008054906101000a90046001600160a01b03166001600160a01b0316638792a265856001600160a01b0316638291286c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e59190614a91565b8a6040518363ffffffff1660e01b8152600401611103929190614f9b565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b505060008054611153935085925084918c9181906001600160a01b03166133b1565b604051630852cd8d60e31b81526001600160a01b038516906342966c689061117f908990600401614c89565b600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b50506000546040516303c4399d60e11b81526001600160a01b039091169250630788733a91506111e59088908c908790600401614fd7565b600060405180830381600087803b1580156111ff57600080fd5b505af1158015611213573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150611249908890859060040161503b565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b50505050600085896001600160a01b03167f2afbc6f74788c58c5d56fca9812c385d27a7bf8004bd05cd1b9f057ad145f69d60016040516112b89190614c7e565b60405180910390a45050505050505050565b60008060005b60008054906101000a90046001600160a01b03166001600160a01b031663b3944d526040518163ffffffff1660e01b815260040160206040518083038186803b15801561131c57600080fd5b505afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113549190614a91565b81101561139157600080611367836134f2565b9092509050611376858361338c565b9450611382848261338c565b935050508060010190506112d0565b50600054604051635105a97560e01b81526001600160a01b0390911690635105a975906113c49085908590600401615090565b600060405180830381600087803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b505050505050565b6114026131ee565b6065546001600160a01b0390811691161461142f5760405162461bcd60e51b815260040161056590614e25565b6114376112ca565b60005460405163236535f560e11b81526001600160a01b03909116906346ca6bea90610efa9086908690869060040161509e565b6114736146f3565b60005461148a9084906001600160a01b03166131f2565b9050611494614734565b6000546114ad90859033906001600160a01b03166132c4565b90508060800151831180156114c3575060048311155b6114cc57600080fd5b60008054604051636a9d1f6f60e01b81526001600160a01b0390911690636a9d1f6f906114fd908790600401614c89565b60206040518083038186803b15801561151557600080fd5b505afa158015611529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154d9190614a91565b905060006115688360a0015183612f9f90919063ffffffff16565b905060008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee9190614913565b6001600160a01b03166323b872dd3330846040518463ffffffff1660e01b815260040161161d93929190614c27565b602060405180830381600087803b15801561163757600080fd5b505af115801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f91906148f7565b61167857600080fd5b60a0830151611687908261338c565b60a0840152608083018590528251156116b957600080546116b9918591879133918a91906001600160a01b03166133b1565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a906116ed90899033908890600401614fd7565b600060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150611751908990889060040161503b565b600060405180830381600087803b15801561176b57600080fd5b505af115801561177f573d6000803e3d6000fd5b5050600054604051631be9449960e11b81526001600160a01b0390911692506337d2893291506117b6908490600190600401614c92565b600060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b505050508486336001600160a01b03167f2afbc6f74788c58c5d56fca9812c385d27a7bf8004bd05cd1b9f057ad145f69d60006040516118249190614c7e565b60405180910390a4505050505050565b61183c6131ee565b6065546001600160a01b039081169116146118695760405162461bcd60e51b815260040161056590614e25565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6118bb6131ee565b6065546001600160a01b039081169116146118e85760405162461bcd60e51b815260040161056590614e25565b6118f06112ca565b600054604051637abceffd60e01b81526001600160a01b0390911690637abceffd90610efa9086908690869060040161501a565b609a5415611e205760008060008060009054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561197e57600080fd5b505afa158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b69190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016119e19190614c13565b60206040518083038186803b1580156119f957600080fd5b505afa158015611a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a319190614a91565b905080609a541115611a6c57611a536064611a4d836046613921565b9061395b565b9250611a656064611a4d83601e613921565b9150611aa7565b611a876064611a4d6046609a5461392190919063ffffffff16565b9250611aa46064611a4d601e609a5461392190919063ffffffff16565b91505b8215611bb85760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b319190614913565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611b64929116908790600401614c65565b602060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb691906148f7565b505b8115611cc95760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0a57600080fd5b505afa158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190614913565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611c75929116908690600401614c65565b602060405180830381600087803b158015611c8f57600080fd5b505af1158015611ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc791906148f7565b505b60005460408051638f33b5e560e01b815290516001600160a01b0390921691638f838a9f918391638f33b5e591600480820192602092909190829003018186803b158015611d1657600080fd5b505afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e9190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d799190614c13565b60206040518083038186803b158015611d9157600080fd5b505afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc99190614a91565b6040518263ffffffff1660e01b8152600401611de59190614c89565b600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b50506000609a5550505050505b565b6065546001600160a01b031690565b611e396131ee565b609c546001600160a01b03908116911614611e5357600080fd5b609c80546001600160a01b03191690556040517ff564c40f4f45e62a2c1e6c22e8bfb46501f0f71fa1c72e5358903fa1115a4b6490611e96906000908190614c4b565b60405180910390a1565b611ea86131ee565b609c546001600160a01b03908116911614611ec257600080fd5b6001600160a01b038116611ed557600080fd5b609c80546001600160a01b0319166001600160a01b0383811691909117918290556040517ff564c40f4f45e62a2c1e6c22e8bfb46501f0f71fa1c72e5358903fa1115a4b64926104179216908490614c4b565b60008054604051631be9449960e11b81526001600160a01b03909116916337d2893291611f5a91908190600401614c92565b600060405180830381600087803b158015611f7457600080fd5b505af1158015611f88573d6000803e3d6000fd5b505050506000612017600260008054906101000a90046001600160a01b03166001600160a01b03166309e3de416040518163ffffffff1660e01b815260040160206040518083038186803b158015611fdf57600080fd5b505afa158015611ff3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4d9190614a91565b9050801561238c5760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561206b57600080fd5b505afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a39190614913565b60995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926120d6929116908590600401614c65565b602060405180830381600087803b1580156120f057600080fd5b505af1158015612104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212891906148f7565b61213157600080fd5b60006121436064611a4d846046613921565b9050801561225d5760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561219757600080fd5b505afa1580156121ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cf9190614913565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612202929116908590600401614c65565b602060405180830381600087803b15801561221c57600080fd5b505af1158015612230573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225491906148f7565b61225d57600080fd5b600061226f6064611a4d85601e613921565b905080156123895760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c357600080fd5b505afa1580156122d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fb9190614913565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261232e929116908590600401614c65565b602060405180830381600087803b15801561234857600080fd5b505af115801561235c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238091906148f7565b61238957600080fd5b50505b50565b6123988161399d565b80156123b957506123a76131ee565b609c546001600160a01b039081169116145b6123c257600080fd5b6124536201731860008054906101000a90046001600160a01b03166001600160a01b03166331db122c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241557600080fd5b505afa158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190614a91565b9061338c565b43116124715760405162461bcd60e51b815260040161056590614ea8565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b39061249f9084908690600401614c65565b602060405180830381600087803b1580156124b957600080fd5b505af11580156124cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e991906148f7565b609b5415611e205760008060008060009054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561254b57600080fd5b505afa15801561255f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125839190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016125ae9190614c13565b60206040518083038186803b1580156125c657600080fd5b505afa1580156125da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fe9190614a91565b905080609b5411156126335761261a6064611a4d836046613921565b925061262c6064611a4d83601e613921565b915061266e565b61264e6064611a4d6046609b5461392190919063ffffffff16565b925061266b6064611a4d601e609b5461392190919063ffffffff16565b91505b821561277f5760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126c057600080fd5b505afa1580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f89190614913565b60975460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261272b929116908790600401614c65565b602060405180830381600087803b15801561274557600080fd5b505af1158015612759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277d91906148f7565b505b81156128905760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127d157600080fd5b505afa1580156127e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128099190614913565b60985460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261283c929116908690600401614c65565b602060405180830381600087803b15801561285657600080fd5b505af115801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e91906148f7565b505b6000546040805163fb70c3bf60e01b815290516001600160a01b039092169163094601f191839163fb70c3bf91600480820192602092909190829003018186803b1580156128dd57600080fd5b505afa1580156128f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129159190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016129409190614c13565b60206040518083038186803b15801561295857600080fd5b505afa15801561296c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129909190614a91565b6040518263ffffffff1660e01b81526004016129ac9190614c89565b600060405180830381600087803b1580156129c657600080fd5b505af11580156129da573d6000803e3d6000fd5b50506000609b555050505050565b6000546040516360443a4560e01b81526001600160a01b03909116906360443a4590612a1e908590339088908790600401614fb2565b600060405180830381600087803b158015612a3857600080fd5b505af1158015612a4c573d6000803e3d6000fd5b50505050826001600160a01b0316336001600160a01b03167fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a78484604051612a95929190615090565b60405180910390a3505050565b612aaa6131ee565b6065546001600160a01b03908116911614612ad75760405162461bcd60e51b815260040161056590614e25565b6103e88161ffff161115612afd5760405162461bcd60e51b815260040161056590614ecf565b6099805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b612b276146f3565b600054612b3e9084906001600160a01b03166131f2565b9050612b48614734565b600054612b6190859033906001600160a01b03166132c4565b9050612b6d8433612f65565b8215612c2f5781516040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612ba690339030908890600401614c27565b602060405180830381600087803b158015612bc057600080fd5b505af1158015612bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf891906148f7565b508051612c05908461338c565b8152608081015115612c2f5760008054612c2f9183918591339181906001600160a01b03166133b1565b612c39818361344e565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a90612c6d90879033908690600401614fd7565b600060405180830381600087803b158015612c8757600080fd5b505af1158015612c9b573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150612cd1908790869060040161503b565b600060405180830381600087803b158015612ceb57600080fd5b505af1158015612cff573d6000803e3d6000fd5b5050505083336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1585604051612d3d9190614c89565b60405180910390a350505050565b612d536131ee565b6065546001600160a01b03908116911614612d805760405162461bcd60e51b815260040161056590614e25565b6001600160a01b038116612da65760405162461bcd60e51b815260040161056590614cd5565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a81b900460ff1680612e1d5750612e1d6139a3565b80612e325750600054600160a01b900460ff16155b612e4e5760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff16158015612e85576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b612e8d6139a9565b60998054609c80546001600160a01b03199081166001600160a01b038a81169190911790925561ffff60a01b1990921660b560a21b1782168782161790925560978054821686841617905560988054909116918416919091179055801561090a576000805460ff60a81b191690555050505050565b612f0a6131ee565b6065546001600160a01b03908116911614612f375760405162461bcd60e51b815260040161056590614e25565b609780546001600160a01b039384166001600160a01b03199182161790915560988054929093169116179055565b612f6d6112ca565b600080612f7a8484610422565b90925090508115612f8f57612f8f8383613a52565b80156105e9576105e98382613e90565b6000612fe183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614300565b90505b92915050565b612ff26146f3565b6000546130099086906001600160a01b03166131f2565b9050806080015161302c5760405162461bcd60e51b815260040161056590614f3a565b613034614734565b60005461304d90879086906001600160a01b03166132c4565b905084816000015110156130735760405162461bcd60e51b815260040161056590614d87565b61307d8685612f65565b84156130d057805161308f9086612f9f565b815281516130a7906001600160a01b0316848761349c565b6060810151156130d057600080546130d0918391859188916001906001600160a01b03166133b1565b6130da818361344e565b6000546040516303c4399d60e11b81526001600160a01b0390911690630788733a9061310e90899033908690600401614fd7565b600060405180830381600087803b15801561312857600080fd5b505af115801561313c573d6000803e3d6000fd5b505060005460405163d4665bb760e01b81526001600160a01b03909116925063d4665bb79150613172908990869060040161503b565b600060405180830381600087803b15801561318c57600080fd5b505af11580156131a0573d6000803e3d6000fd5b5050505085836001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568876040516131de9190614c89565b60405180910390a3505050505050565b3390565b6131fa6146f3565b600080600080600080876001600160a01b0316631526fe278a6040518263ffffffff1660e01b815260040161322f9190614c89565b60c06040518083038186803b15801561324757600080fd5b505afa15801561325b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327f919061492f565b6040805160c0810182526001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a0820152965050505050505092915050565b6132cc614734565b600080600080600080876001600160a01b03166393f1a40b8b8b6040518363ffffffff1660e01b8152600401613303929190614f9b565b60c06040518083038186803b15801561331b57600080fd5b505afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190614b74565b6040805160c0810182529687526020870195909552938501929092526060840152608083015260a08201529a9950505050505050505050565b600082820183811015612fe15760405162461bcd60e51b815260040161056590614d1b565b606086015160006133d488866133cb5789608001516133cd565b865b888661432c565b905060006133f46064611a4d848c6000015161392190919063ffffffff16565b60608a01819052905084156134255761341b6134108483612f9f565b60a08a015190612f9f565b60a0890152613443565b61343d6134328285612f9f565b60a08a01519061338c565b60a08901525b505050505050505050565b61346e64e8d4a51000611a4d836040015161346886614401565b90613921565b602083015260608101516134909064e8d4a5100090611a4d9061346886614401565b60409092019190915250565b6123898363a9059cbb60e01b84846040516024016134bb929190614c65565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614415565b6000806134fd6146f3565b6000546135149085906001600160a01b03166131f2565b9050600081600001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016135489190614c13565b60206040518083038186803b15801561356057600080fd5b505afa158015613574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135989190614a91565b9050806135ad5760008093509350505061391c565b60006135c68360a001518361338c90919063ffffffff16565b90506136d160008054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561361757600080fd5b505afa15801561362b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364f9190614a91565b602080860151600054604080516376f69fed60e11b81529051611a4d946001600160a01b039093169263eded3fda9260048082019391829003018186803b15801561369957600080fd5b505afa1580156136ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134689190614a91565b6099549095506000906136f89061271090611a4d908990600160a01b900461ffff16613921565b609a54909150613708908261338c565b609a556000805460408051638b6ff57b60e01b815290516001600160a01b0390921691638b6ff57b91600480820192602092909190829003018186803b15801561375157600080fd5b505afa158015613765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137899190614a91565b9050801561388557600054604080516317caf6f160e01b8152905161381f926001600160a01b0316916317caf6f1916004808301926020929190829003018186803b1580156137d757600080fd5b505afa1580156137eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380f9190614a91565b6020870151611a4d908490613921565b6099549096506000906138469061271090611a4d908a90600160a01b900461ffff16613921565b609b54909150613856908261338c565b609b5561387e61387385611a4d64e8d4a510006134688c87612f9f565b60608801519061338c565b6060870152505b6138aa61389f84611a4d64e8d4a510006134688c88612f9f565b60408701519061338c565b604080870191909152600054905163d4665bb760e01b81526001600160a01b039091169063d4665bb7906138e4908b90899060040161503b565b600060405180830381600087803b1580156138fe57600080fd5b505af1158015613912573d6000803e3d6000fd5b5050505050505050505b915091565b60008261393057506000612fe4565b8282028284828161393d57fe5b0414612fe15760405162461bcd60e51b815260040161056590614de4565b6000612fe183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506144fa565b3b151590565b303b1590565b600054600160a81b900460ff16806139c457506139c46139a3565b806139d95750600054600160a01b900460ff16155b6139f55760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff16158015613a2c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b613a34614531565b613a3c6145c9565b801561238c576000805460ff60a81b1916905550565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613aa157600080fd5b505afa158015613ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad99190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613b049190614c13565b60206040518083038186803b158015613b1c57600080fd5b505afa158015613b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b549190614a91565b905080821115613c675760008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613baa57600080fd5b505afa158015613bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be29190614913565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b8152600401613c0f929190614c65565b602060405180830381600087803b158015613c2957600080fd5b505af1158015613c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c6191906148f7565b50613d6c565b60008054906101000a90046001600160a01b03166001600160a01b0316638f33b5e56040518163ffffffff1660e01b815260040160206040518083038186803b158015613cb357600080fd5b505afa158015613cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ceb9190614913565b6001600160a01b031663a9059cbb84846040518363ffffffff1660e01b8152600401613d18929190614c65565b602060405180830381600087803b158015613d3257600080fd5b505af1158015613d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6a91906148f7565b505b613d74611924565b60005460408051638f33b5e560e01b815290516001600160a01b0390921691638f838a9f918391638f33b5e591600480820192602092909190829003018186803b158015613dc157600080fd5b505afa158015613dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df99190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613e249190614c13565b60206040518083038186803b158015613e3c57600080fd5b505afa158015613e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e749190614a91565b6040518263ffffffff1660e01b8152600401610efa9190614c89565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613edf57600080fd5b505afa158015613ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f179190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613f429190614c13565b60206040518083038186803b158015613f5a57600080fd5b505afa158015613f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f929190614a91565b9050808211156140a55760008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fe857600080fd5b505afa158015613ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140209190614913565b6001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040161404d929190614c65565b602060405180830381600087803b15801561406757600080fd5b505af115801561407b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409f91906148f7565b506141aa565b60008054906101000a90046001600160a01b03166001600160a01b031663fb70c3bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156140f157600080fd5b505afa158015614105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141299190614913565b6001600160a01b031663a9059cbb84846040518363ffffffff1660e01b8152600401614156929190614c65565b602060405180830381600087803b15801561417057600080fd5b505af1158015614184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a891906148f7565b505b6000546040805163fb70c3bf60e01b815290516001600160a01b039092169163094601f191839163fb70c3bf91600480820192602092909190829003018186803b1580156141f757600080fd5b505afa15801561420b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422f9190614913565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161425a9190614c13565b60206040518083038186803b15801561427257600080fd5b505afa158015614286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142aa9190614a91565b6040518263ffffffff1660e01b81526004016142c69190614c89565b600060405180830381600087803b1580156142e057600080fd5b505af11580156142f4573d6000803e3d6000fd5b505050506123896124f1565b600081848411156143245760405162461bcd60e51b81526004016105659190614ca2565b505050900390565b600080826001600160a01b03166391328af2856040518263ffffffff1660e01b815260040161435b9190614c13565b60206040518083038186803b15801561437357600080fd5b505afa158015614387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143ab9190614a91565b90506143f581846001600160a01b0316636798f19f886040518263ffffffff1660e01b81526004016143dd9190614c89565b60206040518083038186803b15801561241557600080fd5b9150505b949350505050565b60608101518151600091612fe4919061338c565b614427826001600160a01b03166146ba565b6144435760405162461bcd60e51b815260040161056590614f64565b60006060836001600160a01b03168360405161445f9190614bf7565b6000604051808303816000865af19150503d806000811461449c576040519150601f19603f3d011682016040523d82523d6000602084013e6144a1565b606091505b5091509150816144c35760405162461bcd60e51b815260040161056590614d52565b8051156105e957808060200190518101906144de91906148f7565b6105e95760405162461bcd60e51b815260040161056590614ef0565b6000818361451b5760405162461bcd60e51b81526004016105659190614ca2565b50600083858161452757fe5b0495945050505050565b600054600160a81b900460ff168061454c575061454c6139a3565b806145615750600054600160a01b900460ff16155b61457d5760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff16158015613a3c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b179055801561238c576000805460ff60a81b1916905550565b600054600160a81b900460ff16806145e457506145e46139a3565b806145f95750600054600160a01b900460ff16155b6146155760405162461bcd60e51b815260040161056590614e5a565b600054600160a81b900460ff1615801561464c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60006146566131ee565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561238c576000805460ff60a81b1916905550565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906143f9575050151592915050565b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600080191681525090565b60006020828403121561479f578081fd5b8135612fe181615109565b600080604083850312156147bc578081fd5b82356147c781615109565b915060208301356147d781615109565b809150509250929050565b600080600080608085870312156147f7578182fd5b843561480281615109565b9350602085013561481281615109565b9250604085013561482281615109565b9150606085013561483281615109565b939692955090935050565b60008060008060808587031215614852578384fd5b843561485d81615109565b9350602085013561486d81615109565b93969395505050506040820135916060013590565b600080600060608486031215614896578283fd5b83356148a181615109565b92506020840135915060408401356148b881615109565b809150509250925092565b6000806000606084860312156148d7578283fd5b83356148e281615109565b95602085013595506040909401359392505050565b600060208284031215614908578081fd5b8151612fe18161511e565b600060208284031215614924578081fd5b8151612fe181615109565b60008060008060008060c08789031215614947578182fd5b865161495281615109565b8096505060208701519450604087015193506060870151925060808701516149798161511e565b8092505060a087015190509295509295509295565b600060208083850312156149a0578182fd5b825167ffffffffffffffff808211156149b7578384fd5b90840190606082870312156149ca578384fd5b6149d460606150b6565b8251828111156149e2578586fd5b8301601f810188136149f2578586fd5b805183811115614a00578687fd5b614a12601f8201601f191687016150b6565b93508084528886828401011115614a27578687fd5b614a36818786018885016150dd565b50509081528183015192810192909252604090810151908201529392505050565b600060208284031215614a68578081fd5b813561ffff81168114612fe1578182fd5b600060208284031215614a8a578081fd5b5035919050565b600060208284031215614aa2578081fd5b5051919050565b60008060408385031215614abb578182fd5b8235915060208301356147d781615109565b600080600060608486031215614ae1578081fd5b833592506020840135614af381615109565b915060408401356148b88161511e565b60008060408385031215614b15578182fd5b50508035926020909101359150565b60008060408385031215614b36578182fd5b505080516020909101519092909150565b600080600060608486031215614b5b578081fd5b833592506020840135915060408401356148b88161511e565b60008060008060008060c08789031215614b8c578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b60008251614c098184602087016150dd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9182521515602082015260400190565b6000602082528251806020840152614cc18160408501602087016150dd565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601f908201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604082015260600190565b6020808252600c908201526b4e6f20616c6c6f77616e636560a01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600d908201526c476f76206e6f7420726561647960981b604082015260600190565b6020808252600790820152664d61782031302560c81b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526010908201526f4e6f7420776974686472617761626c6560801b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b9182526001600160a01b0316602082015260400190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b8381526001600160a01b038316602082015261010081016143f96040830184614bbd565b9283526001600160a01b03918216602084015216604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b600060e08201905083825260018060a01b0383511660208301526020830151604083015260408301516060830152606083015160808301526080830151151560a083015260a083015160c08301529392505050565b918252602082015260400190565b92835260208301919091521515604082015260600190565b60405181810167ffffffffffffffff811182821017156150d557600080fd5b604052919050565b60005b838110156150f85781810151838201526020016150e0565b838111156105e95750506000910152565b6001600160a01b038116811461238c57600080fd5b801515811461238c57600080fdfea2646970667358221220274f03aaf23bf4ff935219cfdd9cfb8180f5b20940b6c48a9690ff62540ac2aa64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13603,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "_storage",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(YGYStorageV1)15325"
      },
      {
        "astId": 195,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 263,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 188,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 565,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 683,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11701,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "devaddr",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11703,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "teamaddr",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 11705,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "regeneratoraddr",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 13065,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "DEV_FEE",
        "offset": 20,
        "slot": "153",
        "type": "t_uint16"
      },
      {
        "astId": 13086,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "pending_DEV_rewards",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 13088,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "pending_DEV_YGY_rewards",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 13526,
        "contract": "contracts/RAMVault.sol:RAMVault",
        "label": "_superAdmin",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(YGYStorageV1)15325": {
        "encoding": "inplace",
        "label": "contract YGYStorageV1",
        "numberOfBytes": "20"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}