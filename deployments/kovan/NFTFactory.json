{
  "address": "0xe00D12Ee73A66FeDD4a4FD8D42abaF438FdD968E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract YGYStorageV1",
          "name": "__storage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFT",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "bondContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFT",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "propertyChoices",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowTrade",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCapped",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "capAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ramVault",
          "type": "address"
        }
      ],
      "name": "deployNFT",
      "outputs": [
        {
          "internalType": "contract NFT",
          "name": "newContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contractCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inUse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFT",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFT",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_randomness",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "pType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "pValue",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extra",
              "type": "bytes32"
            }
          ],
          "internalType": "struct YGYStorageV1.NFTProperty[]",
          "name": "_properties",
          "type": "tuple[]"
        }
      ],
      "name": "setNFTProperties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_inUse",
          "type": "bool"
        }
      ],
      "name": "setNFTUsage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFT",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "useNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x908114498549dd746d42232f9f8015dcfddf703572d70cd9faf0043ab18b851e",
  "receipt": {
    "to": null,
    "from": "0x117C8f87Cc495b29bdDB20E2a54c6F4DacDdAb5C",
    "contractAddress": "0xe00D12Ee73A66FeDD4a4FD8D42abaF438FdD968E",
    "transactionIndex": 0,
    "gasUsed": "3767249",
    "logsBloom": "0x
    "blockHash": "0x706dd4a08589f981be5f8be3ca9697ee9c2985d35dc6637be96c9714206e65fc",
    "transactionHash": "0x908114498549dd746d42232f9f8015dcfddf703572d70cd9faf0043ab18b851e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22672268,
        "transactionHash": "0x908114498549dd746d42232f9f8015dcfddf703572d70cd9faf0043ab18b851e",
        "address": "0xe00D12Ee73A66FeDD4a4FD8D42abaF438FdD968E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000117c8f87cc495b29bddb20e2a54c6f4dacddab5c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x706dd4a08589f981be5f8be3ca9697ee9c2985d35dc6637be96c9714206e65fc"
      }
    ],
    "blockNumber": 22672268,
    "cumulativeGasUsed": "3767249",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEE6cC33Ff0f7B62f7fdB5eC6ffbbbE3090eaF2C3"
  ],
  "solcInputHash": "bc1a585417435c540b4e50cc1976e9a1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract YGYStorageV1\",\"name\":\"__storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract INFT\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"bondContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFT\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"propertyChoices\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowTrade\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCapped\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"capAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ramVault\",\"type\":\"address\"}],\"name\":\"deployNFT\",\"outputs\":[{\"internalType\":\"contract NFT\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inUse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFT\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFT\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_randomness\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"pType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extra\",\"type\":\"bytes32\"}],\"internalType\":\"struct YGYStorageV1.NFTProperty[]\",\"name\":\"_properties\",\"type\":\"tuple[]\"}],\"name\":\"setNFTProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_inUse\",\"type\":\"bool\"}],\"name\":\"setNFTUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFT\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"useNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTFactory.sol\":\"NFTFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n\\n\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd1778eb2a00f482020d0298305421371eb6487ca0d7d05d9e2b91c353e53f47f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x4f3a00edb976e97943fe0a620ea2948955a75eff2a9231c202d50d1e062d8da5\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\",\"keccak256\":\"0xfd5cf8319cb84ca04ea407d6fba686d53ad7f5d2bf476f41678f5a751d12a7ea\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xd1d78b1c8534fbcf8fdc8fbfec9133df142ef8cae9ae820929dfe6d80d2c790a\"},\"contracts/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\\\";\\n// import \\\"@openzeppelin/contractss-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./libraries/AddressERC721.sol\\\";\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev Removed and added funtionality needed from the original.\\n */\\ncontract ERC721 is\\n    ContextUpgradeSafe,\\n    ERC165UpgradeSafe,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using SafeMath for uint256;\\n    using AddressERC721 for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdTracker;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,uint256,address)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = bytes4(\\n        keccak256(\\\"onERC721Received(address,address,uint256,uint256,address)\\\")\\n    );\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Tokens will only have one URI.\\n    string public _tokenURI;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` and tokenURI to the token collection.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _tokenURI = tokenURI;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public override view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public override view returns (address) {\\n        return\\n            _tokenOwners.get(\\n                tokenId,\\n                \\\"ERC721: owner query for nonexistent token\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        override\\n        view\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n        return _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        override\\n        view\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function mint(address to) internal returns (uint256 tokenId) {\\n        uint256 currentId = _tokenIdTracker.current();\\n        _mint(to, currentId);\\n        _tokenIdTracker.increment();\\n        return currentId;\\n    }\\n\\n    function _mint(address to, uint256 tokenId) private {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n        _holderTokens[owner].remove(tokenId);\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = to.call(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        );\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        } else {\\n            bytes4 retval = abi.decode(returndata, (bytes4));\\n            return (retval == _ERC721_RECEIVED);\\n        }\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x385a0db40002f469b57ff0c11384728096981f3dd8f036b4bac64f4d2741306a\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./YGYStorageV1.sol\\\";\\n\\n\\ncontract NFT is ERC721, AccessControlUpgradeSafe {\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    uint256 public contractId;\\n\\n    // Tradeable?\\n    bool allowTrade;\\n\\n    // Capped?\\n    bool isCapped;\\n    uint256 tokenCap;\\n    address ramVault;\\n    // Props for unique token\\n    mapping(uint256 => YGYStorageV1.NFTProperty) public properties;\\n\\n    // How many choices available for this particular NFT\\n    uint256 propertyChoices;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _contractId,\\n        uint256 _propertyChoices,\\n        address _superAdmin,\\n        bool _allowTrade,\\n        bool _isCapped,\\n        uint256 _tokenCap,\\n        address _ramVault\\n    ) public ERC721(_name, _symbol, _tokenURI) {\\n        allowTrade = _allowTrade;\\n        isCapped = _isCapped;\\n        tokenCap = _tokenCap;\\n        contractId = _contractId;\\n        propertyChoices = _propertyChoices;\\n        __AccessControl_init();\\n        _setupRole(SYSTEM_ROLE, _msgSender());\\n        _setupRole(SYSTEM_ROLE, _ramVault);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _superAdmin);\\n    }\\n\\n    /**\\n     * @dev Used for tokens that are transferrable and non-delegating.\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            ownerOf(_tokenId) == _msgSender() ||\\n                hasRole(SYSTEM_ROLE, _msgSender()),\\n            \\\"Not allowed\\\"\\n        );\\n\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Mint a token and set it's property\\n     */\\n    function mint(\\n        address to,\\n        uint256 _randomness,\\n        YGYStorageV1 _storage\\n    ) public returns (uint256 _tokenId) {\\n        require(\\n            !isCapped || (isCapped && totalSupply() <= tokenCap),\\n            \\\"NFT Limit reached\\\"\\n        );\\n        require(hasRole(SYSTEM_ROLE, _msgSender()), \\\"Not allowed\\\");\\n\\n        // Mint the token, get the unique id.\\n        uint256 tokenId = super.mint(to);\\n        // Get a random index for property selection\\n        uint256 propIndex;\\n        if (propertyChoices > 1) {\\n            propIndex = _randomness.mod(propertyChoices);\\n        }\\n\\n        // Random properties gotten\\n        (string memory pType, uint256 pValue, bytes32 extra) = _storage\\n            .getNFTProperty(contractId + 1, propIndex);\\n\\n        // Finally, set the property.\\n        properties[tokenId] = YGYStorageV1.NFTProperty(pType, pValue, extra);\\n        return tokenId;\\n    }\\n\\n    function getTokenProperty(uint256 _tokenId)\\n        public\\n        view\\n        returns (YGYStorageV1.NFTProperty memory)\\n    {\\n        return properties[_tokenId];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _beforeTokenTransfer(from, to, tokenId);\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Used to halt transfers while maintaining minting ability for the delegator / minter.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n\\n        require(\\n            (allowTrade || hasRole(SYSTEM_ROLE, _msgSender())) ||\\n                (!allowTrade && hasRole(SYSTEM_ROLE, to)),\\n            \\\"External trades not allowed\\\"\\n        );\\n\\n    }\\n}\\n\",\"keccak256\":\"0x89a093d93a8ece4578da2404d65c31e6726154bacac14d8e627c9b15ca5cfbc4\",\"license\":\"MIT\"},\"contracts/NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/INFT.sol\\\";\\nimport \\\"./interfaces/IRAMVault.sol\\\";\\nimport \\\"./NFT.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"./StorageState.sol\\\";\\n\\ncontract NFTFactory is StorageState, OwnableUpgradeSafe {\\n    address[] public contracts;\\n    address public bondedContract;\\n    IRAMVault ramVault;\\n    // address public lastContractAddress;\\n    mapping(address => bool) public inUse;\\n\\n    event NFTMinted(string tokenName, address to, uint256 tokenId);\\n    event NFTBurned(string tokenName, address from, uint256 tokenId);\\n\\n    constructor(YGYStorageV1 __storage) public {\\n        __Ownable_init();\\n        _storage = __storage;\\n    }\\n\\n    function deployNFT(\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI,\\n        uint256 contractId,\\n        uint256 propertyChoices,\\n        address admin,\\n        bool allowTrade,\\n        bool isCapped,\\n        uint256 capAmount,\\n        address _ramVault\\n    ) public returns (NFT newContract) {\\n        require(\\n            _msgSender() == owner() || _msgSender() == bondedContract,\\n            \\\"Invalid caller: can't deploy NFT\\\"\\n        );\\n        ramVault = IRAMVault(_ramVault);\\n\\n        // Deploy new NFT\\n        NFT nft = new NFT(\\n            name,\\n            symbol,\\n            tokenURI,\\n            contractId,\\n            propertyChoices,\\n            admin,\\n            allowTrade,\\n            isCapped,\\n            capAmount,\\n            _ramVault\\n        );\\n\\n        address addressNFT = address(nft);\\n\\n        // Add to owned NFTs\\n        contracts.push(addressNFT);\\n\\n        return nft;\\n    }\\n\\n    function balanceOf(INFT _nft, address _who)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _nft.balanceOf(_who);\\n    }\\n\\n    function isOwner(INFT _nft, address _who, uint256 _tokenId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _nft.ownerOf(_tokenId) == _who;\\n    }\\n\\n    function mint(\\n        INFT _nft,\\n        address _to,\\n        uint256 _randomness\\n    ) external returns (uint256) {\\n        require(_msgSender() == bondedContract || _msgSender() == owner());\\n        uint256 tokenId = _nft.mint(_to, _randomness, _storage);\\n        emit NFTMinted(_nft.name(), _to, tokenId);\\n        return tokenId;\\n    }\\n\\n    function burn(INFT _nft, uint256 _tokenId) external {\\n        require(\\n            _nft.ownerOf(_tokenId) == _msgSender() ||\\n                _msgSender() == bondedContract\\n        );\\n        _nft.burn(_tokenId);\\n        emit NFTBurned(_nft.name(), _msgSender(), _tokenId);\\n    }\\n\\n    function setNFTProperties(\\n        address _nft,\\n        YGYStorageV1.NFTProperty[] memory _properties\\n    ) external {\\n        require(msg.sender == owner());\\n        _storage.setNFTPropertiesForContract(_nft, _properties);\\n    }\\n\\n    function useNFT(\\n        INFT _nft,\\n        uint256 _tokenId,\\n        uint256 _poolId\\n    ) public {\\n        require(_nft.ownerOf(_tokenId) == msg.sender, \\\"User not owner\\\");\\n        _nft.transferFrom(msg.sender, address(ramVault), _tokenId);\\n        ramVault.NFTUsage(msg.sender, address(_nft), _tokenId, _poolId);\\n    }\\n\\n    function setNFTUsage(address _nft, bool _inUse) external onlyOwner {\\n        inUse[_nft] = _inUse;\\n    }\\n\\n    function bondContract(address _addr) external returns (bool) {\\n        require(msg.sender == owner());\\n        bondedContract = _addr;\\n        return true;\\n    }\\n\\n    function getContractCount() external view returns (uint256 contractCount) {\\n        return contracts.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2db58251d037c6d44a2f530d7abb4815e65cfab576ec81ab74c24355069f8153\",\"license\":\"MIT\"},\"contracts/StorageState.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./YGYStorageV1.sol\\\";\\n\\ncontract StorageState {\\n    YGYStorageV1 _storage;\\n}\\n\",\"keccak256\":\"0xd8f72cec39b19b1759de2ccf6128fed12314c2571bb06a04ff67893ef6471b86\"},\"contracts/YGYStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\nStorage contract for the YGY system\\n*/\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/INBUNIERC20.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/PoolHelper.sol\\\";\\n\\n\\ncontract YGYStorageV1 is AccessControlUpgradeSafe {\\n    /* STORAGE CONFIG */\\n    using SafeMath for uint256;\\n    using PoolHelper for PoolInfo;\\n\\n    bytes32 public constant MODIFIER_ROLE = keccak256(\\\"MODIFIER_ROLE\\\");\\n\\n    function setModifierContracts(\\n        address _vault,\\n        address _router,\\n        address _nftFactory\\n    ) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Nono\\\");\\n        _setupRole(MODIFIER_ROLE, _vault);\\n        _setupRole(MODIFIER_ROLE, _router);\\n        _setupRole(MODIFIER_ROLE, _nftFactory);\\n    }\\n\\n    function init() external initializer {\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MODIFIER_ROLE, _msgSender());\\n    }\\n\\n    /* RAMVAULT */\\n\\n    // User properties per vault/pool.\\n    struct UserInfo {\\n        uint256 amount; // How many  tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtYGY;\\n        uint256 boostAmount;\\n        uint256 boostLevel;\\n        uint256 spentMultiplierTokens;\\n    }\\n\\n    struct NFTUsage {\\n        uint256 nftId;\\n        uint256 epoch;\\n    }\\n\\n    // Epoch -> User -> NFT ids in use.\\n    mapping(uint256 => mapping(address => NFTUsage[])) public NFTUsageInfo;\\n\\n    function setNFTInUse(uint256 _nftId, address _user) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        NFTUsageInfo[epoch][_user].push(NFTUsage({ nftId: _nftId, epoch: epoch }));\\n    }\\n\\n    function getNFTsInUse(address _user) external view returns (NFTUsage[] memory) {\\n        return NFTUsageInfo[epoch][_user];\\n    }\\n\\n    function getNFTBoost(address _user) external view returns (uint256) {\\n        uint256 NFTBoost;\\n        NFTUsage[] memory nftInfo = NFTUsageInfo[epoch][_user];\\n        for(uint i; i < nftInfo.length; i++) {\\n            if(epoch == nftInfo[i].epoch) {\\n                if(nftInfo[i].nftId == 5 || nftInfo[i].nftId == 6) {\\n                    NFTBoost = NFTBoost.add(10);\\n                }\\n            }\\n        }\\n        return NFTBoost;\\n    }\\n\\n    // Pool/Vault/Whatever-id -> userrAddress -> userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    function updateUserInfo(\\n        uint256 _poolId,\\n        address _userAddress,\\n        UserInfo memory _userInfo\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        userInfo[_poolId][_userAddress] = _userInfo;\\n    }\\n\\n    // PoolId -> UserAddress -> Spender -> Allowance\\n    mapping(uint256 => mapping(address => mapping(address => uint256)))\\n        public poolAllowance;\\n\\n    function setPoolAllowance(\\n        uint256 _pid,\\n        address _user,\\n        address _spender,\\n        uint256 _allowance\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolAllowance[_pid][_user][_spender] = _allowance;\\n    }\\n\\n    // Pool properties\\n    struct PoolInfo {\\n        IERC20 token; // Address of  token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. RAMs to distribute per block.\\n        uint256 accRAMPerShare; // Accumulated RAMs per share, times 1e12. See below.\\n        uint256 accYGYPerShare; // Accumulated YGYs per share, times 1e12. See below.\\n        bool withdrawable; // Is this pool withdrawable?\\n        uint256 effectiveAdditionalTokensFromBoosts; // Track the total additional accounting staked tokens from boosts.\\n    }\\n    // All pool properties\\n    PoolInfo[] public poolInfo;\\n\\n    function updatePoolInfo(uint256 _poolId, PoolInfo memory _userInfo)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        poolInfo[_poolId] = _userInfo;\\n    }\\n\\n    function setPool(\\n        uint256 _poolId,\\n        uint256 _allocPoint,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        totalAllocPoint.sub(poolInfo[_poolId].allocPoint).add(_allocPoint);\\n        poolInfo[_poolId].allocPoint = _allocPoint;\\n        poolInfo[_poolId].withdrawable = _withdrawable;\\n    }\\n\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withdrawable\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\n        }\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            YGYStorageV1.PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                accRAMPerShare: 0,\\n                accYGYPerShare: 0,\\n                withdrawable: _withdrawable,\\n                effectiveAdditionalTokensFromBoosts: 0\\n            })\\n        );\\n    }\\n\\n    function updatePoolRewards(uint256 allRewards, uint256 allYGYRewards)\\n        external\\n    {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        pendingRewards = pendingRewards.sub(allRewards);\\n        pendingYGYRewards = pendingYGYRewards.sub(allYGYRewards);\\n    }\\n\\n    function addPendingRewards(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()), \\\"Prohibited caller\\\");\\n        pendingRewards = pendingRewards.add(_amount);\\n        rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n\\n        if (YGYReserve > _amount) {\\n            pendingYGYRewards = pendingYGYRewards.add(_amount);\\n            YGYReserve = YGYReserve.sub(_amount);\\n        } else if (YGYReserve > 0) {\\n            pendingYGYRewards = pendingYGYRewards.add(YGYReserve);\\n            YGYReserve = 0;\\n        }\\n    }\\n\\n    function addAdditionalRewards(uint256 _amount, bool _ygy) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_ygy) {\\n            YGYReserve = YGYReserve.add(_amount);\\n        } else {\\n            pendingRewards = pendingRewards.add(_amount);\\n            rewardsInThisEpoch = rewardsInThisEpoch.add(_amount);\\n        }\\n    }\\n\\n    function getPoolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolInfo(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            IERC20 _token,\\n            uint256 _allocPointt,\\n            uint256 _accRAMPerShare,\\n            uint256 _accYGYPerShare,\\n            bool _withdrawable,\\n            uint256 _effectiveAdditionalTokensFromBoosts\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_poolId];\\n        return (\\n            pool.token,\\n            pool.allocPoint,\\n            pool.accRAMPerShare,\\n            pool.accYGYPerShare,\\n            pool.withdrawable,\\n            pool.effectiveAdditionalTokensFromBoosts\\n        );\\n    }\\n\\n    // Total allocattion points for the whole contract\\n    uint256 public totalAllocPoint;\\n\\n    // Pending rewards.\\n    uint256 public pendingRewards;\\n    uint256 public pendingYGYRewards;\\n\\n    // Extra balance-keeping for extra-token rewards\\n    uint256 public YGYReserve;\\n\\n    function setYGYReserve(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        YGYReserve = _amount;\\n    }\\n\\n    // Reward token balance-keeping\\n    uint256 internal ramBalance;\\n\\n    function setRAMBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ramBalance = _amount;\\n    }\\n\\n    uint256 internal ygyBalance;\\n\\n    function setYGYBalance(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        ygyBalance = _amount;\\n    }\\n\\n    uint256 public RAMVaultStartBlock;\\n\\n    function setRAMVaultStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        RAMVaultStartBlock = block.number;\\n    }\\n\\n    uint256 public epochCalculationStartBlock;\\n\\n    function setEpochCalculationStartBlock() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochCalculationStartBlock = block.number;\\n    }\\n\\n    uint256 public cumulativeRewardsSinceStart;\\n    uint256 public cumulativeYGYRewardsSinceStart;\\n\\n    function setCumulativeRewardsSinceStart() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        cumulativeRewardsSinceStart =\\n            cumulativeRewardsSinceStart +\\n            rewardsInThisEpoch;\\n\\n        cumulativeYGYRewardsSinceStart =\\n            cumulativeYGYRewardsSinceStart +\\n            rewardsInThisEpoch;\\n    }\\n\\n    uint256 public rewardsInThisEpoch;\\n\\n    function setRewardsInThisEpoch(uint256 _amount) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        rewardsInThisEpoch = _amount;\\n    }\\n\\n    uint256 public epoch;\\n\\n    // TOKENS\\n    INBUNIERC20 public ram; // The RAM token\\n    IERC20 public ygy; // The YGY token\\n    address public _YGYRAMPair;\\n    address public _YGYToken;\\n    address public _YGYWETHPair;\\n    address public _RAMToken;\\n    IWETH public _WETH;\\n    IERC20 public _dXIOTToken;\\n\\n    function initializeRAMVault() external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        RAMVaultStartBlock = block.number;\\n\\n        boostLevelCosts[1] = 5 * 1e18; // 5 RAM tokens\\n        boostLevelCosts[2] = 15 * 1e18; // 15 RAM tokens\\n        boostLevelCosts[3] = 30 * 1e18; // 30 RAM tokens\\n        boostLevelCosts[4] = 60 * 1e18; // 60 RAM tokens\\n        boostLevelMultipliers[1] = 5; // 5%\\n        boostLevelMultipliers[2] = 15; // 15%\\n        boostLevelMultipliers[3] = 30; // 30%\\n        boostLevelMultipliers[4] = 60; // 60%\\n    }\\n\\n    function setTokens(\\n        address RAMToken,\\n        address YGYToken,\\n        address WETH,\\n        address YGYRAMPair,\\n        address YGYWethPair,\\n        address[] memory nfts,\\n        address dXIOTToken\\n    ) external {\\n        require(\\n            hasRole(MODIFIER_ROLE, _msgSender()) ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"Prohibited caller\\\"\\n        );\\n        ram = INBUNIERC20(RAMToken);\\n        ygy = IERC20(YGYToken);\\n        _RAMToken = RAMToken;\\n        _YGYToken = YGYToken;\\n        _WETH = IWETH(WETH);\\n        _YGYRAMPair = YGYRAMPair;\\n        _YGYWETHPair = YGYWethPair;\\n        _dXIOTToken = IERC20(dXIOTToken);\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            _NFTs[i + 1] = nfts[i];\\n        }\\n    }\\n\\n    // Boosts\\n    uint256 public boostFees;\\n\\n    function setBoostFees(uint256 _amount, bool _add) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_add) {\\n            boostFees = boostFees.add(_amount);\\n        } else {\\n            boostFees = _amount;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelCosts;\\n\\n    function checkRewards(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pendingRAM, uint256 pendingYGY)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 effectiveAmount = user.amount.add(user.boostAmount);\\n        uint256 YGYRewards;\\n        if (pool.accYGYPerShare > 0) {\\n            YGYRewards = effectiveAmount.mul(pool.accYGYPerShare).div(1e12).sub(\\n                user.rewardDebtYGY\\n            );\\n        }\\n        return (\\n            effectiveAmount.mul(pool.accRAMPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            ),\\n            YGYRewards\\n        );\\n    }\\n\\n    function getBoostLevelCost(uint256 _level) external view returns (uint256) {\\n        return boostLevelCosts[_level];\\n    }\\n\\n    mapping(uint256 => uint256) public boostLevelMultipliers;\\n\\n    function getBoostLevelMultiplier(uint256 _level)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return boostLevelMultipliers[_level];\\n    }\\n\\n    function updateBoosts(\\n        uint256[] memory _boostMultipliers,\\n        uint256[] memory _boostCosts\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        // Update boost costs\\n        for (uint8 i; i <= _boostMultipliers.length; i++) {\\n            boostLevelCosts[i + 1] = _boostCosts[i];\\n            boostLevelMultipliers[i + 1] = _boostMultipliers[i];\\n        }\\n    }\\n\\n    // For easy graphing historical epoch rewards\\n    mapping(uint256 => uint256) public epochRewards;\\n\\n    function setEpochRewards() external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        epochRewards[epoch] = rewardsInThisEpoch;\\n        epoch++;\\n    }\\n\\n    /*\\n         ROUTER\\n    */\\n\\n    // Mapping of (user => last ticket level)\\n    mapping(address => uint256) public lastTicketLevel;\\n\\n    // Setter for contracts using\\n    function setLastTicketLevel(address _user, uint256 _level) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        lastTicketLevel[_user] = _level;\\n    }\\n\\n    // Total eth contributed to a vault.\\n    mapping(address => uint256) public liquidityContributedEthValue;\\n\\n    // Set value for mapping from external contracts\\n    function setLiquidityContributedEthValue(\\n        address _spender,\\n        uint256 _amount,\\n        bool _delete\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        if (_delete) {\\n            delete liquidityContributedEthValue[_spender];\\n        } else {\\n            liquidityContributedEthValue[_spender] = liquidityContributedEthValue[_spender]\\n                .add(_amount);\\n        }\\n    }\\n\\n    // NFT STUFF\\n    // Mapping of (level number => NFT address)\\n    mapping(uint256 => address) public _NFTs;\\n\\n    // Property object, extra field for arbirtrary values in future\\n    struct NFTProperty {\\n        string pType;\\n        uint256 pValue;\\n        bytes32 extra;\\n    }\\n\\n    mapping(address => NFTProperty[]) public nftPropertyChoices;\\n\\n    function setNFTPropertiesForContract(\\n        address _contractAddress,\\n        NFTProperty[] memory _properties\\n    ) external {\\n        require(hasRole(MODIFIER_ROLE, _msgSender()));\\n        for (uint256 i; i < _properties.length; i++) {\\n            nftPropertyChoices[_contractAddress].push(_properties[i]);\\n        }\\n    }\\n\\n    function getNFTAddress(uint256 _contractId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _NFTs[_contractId];\\n    }\\n\\n    function getNFTProperty(uint256 _contractId, uint256 _index)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            bytes32\\n        )\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty memory properties = nftPropertyChoices[NFTAddress][_index];\\n\\n        return (properties.pType, properties.pValue, properties.extra);\\n    }\\n\\n    function getNFTPropertyCount(uint256 _contractId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        address NFTAddress = _NFTs[_contractId];\\n        NFTProperty[] memory properties = nftPropertyChoices[NFTAddress];\\n        return properties.length;\\n    }\\n\\n    // General-purpose mappings\\n    mapping(bytes32 => mapping(address => bool)) booleanMapStorage;\\n    uint256[] public booleanMapStorageCount;\\n\\n    function getBooleanMapValue(string memory _key, address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        booleanMapStorage[key][_address];\\n    }\\n\\n    mapping(bytes32 => address) addressStorage;\\n    uint256[] public addressStorageCount;\\n\\n    function getAddressStorage(string memory _key)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 key = stringToBytes32(_key);\\n        return addressStorage[key];\\n    }\\n\\n    mapping(bytes32 => uint256) uintStorage;\\n    uint256[] public uintStorageCount;\\n\\n    struct StateStruct {\\n        bytes32 name;\\n        mapping(bytes32 => bytes32) value;\\n    }\\n\\n    struct ObjectStruct {\\n        StateStruct state;\\n        address owner;\\n        bool isObject;\\n    }\\n\\n    function stringToBytes32(string memory source)\\n        public\\n        pure\\n        returns (bytes32 result)\\n    {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4bc2ed6e5de2be34368976db4fa07d6aa9aa0a5b8059da16c12337616faa7e8f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x619bd81a10e36a619af89fde8021756c06c246f3b9892d77e820e638f2259de9\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdb4db030965e88489f4aaa2ca49856e2c35428aa268e3b6d7aaeb4419be091c1\"},\"contracts/interfaces/INBUNIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INBUNIERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Log(string log);\\n}\\n\",\"keccak256\":\"0x8b72d4c7a32eb1cd9c2ef9f1e02101dda1f85e396d51ed3c6c99bfa6a271ea4f\",\"license\":\"MIT\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\ninterface INFT {\\n    function mint(\\n        address _to,\\n        uint256 _randomness,\\n        YGYStorageV1 _storage\\n    ) external returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function _tokenURI() external view returns (string memory);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x9939c53220f3708dd48f7b92dc5e80b161e9e437876e0f71c1604acc62e1e1cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRAMVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IRAMVault {\\n    function addPendingRewards(uint256 _amount) external;\\n\\n    function depositFor(\\n        address _depositFor,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function NFTUsage(\\n        address _user,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _poolId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3b3bf969747a03faf09778e443050290cf1d727037ab800c7368997edc7bafa7\",\"license\":\"MIT\"},\"contracts/libraries/AddressERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressERC721 {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac84a8ed965d4532086e3615fd51c912f4af0e4388e18cbc1bfbf440a9061a09\",\"license\":\"MIT\"},\"contracts/libraries/PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../YGYStorageV1.sol\\\";\\n\\nlibrary PoolHelper {\\n    using SafeMath for uint256;\\n\\n    function getPool(uint256 _poolId, YGYStorageV1 _storage)\\n        internal\\n        view\\n        returns (YGYStorageV1.PoolInfo memory)\\n    {\\n        (\\n            IERC20 token,\\n            uint256 allocPoint,\\n            uint256 accRAMPerShare,\\n            uint256 accYGYPerShare,\\n            bool withdrawable,\\n            uint256 effectiveAdditionalTokensFromBoosts\\n        ) = _storage.poolInfo(_poolId);\\n        return\\n            YGYStorageV1.PoolInfo({\\n                token: token,\\n                allocPoint: allocPoint,\\n                accRAMPerShare: accRAMPerShare,\\n                accYGYPerShare: accYGYPerShare,\\n                withdrawable: withdrawable,\\n                effectiveAdditionalTokensFromBoosts: effectiveAdditionalTokensFromBoosts\\n            });\\n    }\\n\\n    function averageFeesPerBlockSinceStart(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage\\n                .cumulativeRewardsSinceStart()\\n                .add(_storage.rewardsInThisEpoch())\\n                .div(block.number.sub(_storage.RAMVaultStartBlock()));\\n    }\\n\\n    // Returns averge fees in this epoch\\n    function averageFeesPerBlockEpoch(YGYStorageV1 _storage)\\n        external\\n        view\\n        returns (uint256 averagePerBlock)\\n    {\\n        return\\n            _storage.rewardsInThisEpoch().div(\\n                block.number.sub(_storage.epochCalculationStartBlock())\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5a3037a0a214e760e5f056f1c9707bd79bc2b6380f6e4b2cbaed2a8ae26250b3\",\"license\":\"UNLICENSED\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x2b2dfdece146425af2c3468ccd72c52cbf709eb38421a300e21ef7f57b033fce\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004570380380620045708339810160408190526200003491620002cb565b6200003e62000064565b600080546001600160a01b0319166001600160a01b039290921691909117905562000349565b600054600160a81b900460ff16806200008257506200008262000124565b80620000985750600054600160a01b900460ff16155b620000c05760405162461bcd60e51b8152600401620000b790620002fb565b60405180910390fd5b600054600160a81b900460ff16158015620000f8576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b620001026200012a565b6200010c620001cb565b801562000121576000805460ff60a81b191690555b50565b303b1590565b600054600160a81b900460ff16806200014857506200014862000124565b806200015e5750600054600160a01b900460ff16155b6200017d5760405162461bcd60e51b8152600401620000b790620002fb565b600054600160a81b900460ff161580156200010c576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b179055801562000121576000805460ff60a81b1916905550565b600054600160a81b900460ff1680620001e95750620001e962000124565b80620001ff5750600054600160a01b900460ff16155b6200021e5760405162461bcd60e51b8152600401620000b790620002fb565b600054600160a81b900460ff1615801562000256576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b600062000262620002c7565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801562000121576000805460ff60a81b1916905550565b3390565b600060208284031215620002dd578081fd5b81516001600160a01b0381168114620002f4578182fd5b9392505050565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b61421780620003596000396000f3fe60806040523480156200001157600080fd5b5060043610620001185760003560e01c80639dc29fac11620000a5578063e11f8a26116200006f578063e11f8a261462000235578063f2fde38b146200024c578063f370e8c51462000263578063f7888aec146200027a5762000118565b80639dc29fac14620001e6578063b63e491c14620001fd578063bf184f931462000214578063c6c3bbe6146200021e5762000118565b8063715018a611620000e7578063715018a614620001a25780638da5cb5b14620001ac5780638f17e9f514620001b65780639399869d14620001cd5762000118565b806322f2cce9146200011d57806324705db31462000136578063474da79a14620001655780635af0de22146200018b575b600080fd5b620001346200012e36600462000eef565b62000291565b005b6200014d6200014736600462000da2565b620002ff565b6040516200015c9190620012fe565b60405180910390f35b6200017c6200017636600462001188565b6200034e565b6040516200015c9190620011e8565b620001346200019c36600462000fd9565b62000376565b62000134620004fe565b6200017c62000582565b6200014d620001c736600462000da2565b62000591565b620001d7620005a6565b6040516200015c91906200149a565b62000134620001f736600462000fab565b620005ac565b6200017c6200020e3660046200108c565b620007a1565b6200017c620008e0565b620001d76200022f36600462000f66565b620008ef565b620001346200024636600462000de7565b62000a98565b620001346200025d36600462000da2565b62000b2c565b6200014d6200027436600462000f66565b62000beb565b620001d76200028b36600462000f29565b62000c8b565b6200029b62000d19565b6065546001600160a01b03908116911614620002d45760405162461bcd60e51b8152600401620002cb906200143d565b60405180910390fd5b6001600160a01b03919091166000908152609a60205260409020805460ff1916911515919091179055565b60006200030b62000582565b6001600160a01b0316336001600160a01b0316146200032957600080fd5b50609880546001600160a01b0383166001600160a01b03199091161790556001919050565b609781815481106200035c57fe5b6000918252602090912001546001600160a01b0316905081565b6040516331a9108f60e11b815233906001600160a01b03851690636352211e90620003a69086906004016200149a565b60206040518083038186803b158015620003bf57600080fd5b505afa158015620003d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003fa919062000dc8565b6001600160a01b031614620004235760405162461bcd60e51b8152600401620002cb9062001472565b6099546040516323b872dd60e01b81526001600160a01b03808616926323b872dd926200045992339216908790600401620011fc565b600060405180830381600087803b1580156200047457600080fd5b505af115801562000489573d6000803e3d6000fd5b5050609954604051632edb255d60e11b81526001600160a01b039091169250635db64aba9150620004c590339087908790879060040162001220565b600060405180830381600087803b158015620004e057600080fd5b505af1158015620004f5573d6000803e3d6000fd5b50505050505050565b6200050862000d19565b6065546001600160a01b03908116911614620005385760405162461bcd60e51b8152600401620002cb906200143d565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b609a6020526000908152604090205460ff1681565b60975490565b620005b662000d19565b6001600160a01b0316826001600160a01b0316636352211e836040518263ffffffff1660e01b8152600401620005ed91906200149a565b60206040518083038186803b1580156200060657600080fd5b505afa1580156200061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000641919062000dc8565b6001600160a01b031614806200067357506098546001600160a01b03166200066862000d19565b6001600160a01b0316145b6200067d57600080fd5b604051630852cd8d60e31b81526001600160a01b038316906342966c6890620006ab9084906004016200149a565b600060405180830381600087803b158015620006c657600080fd5b505af1158015620006db573d6000803e3d6000fd5b505050507f9fd5e03e81a19319baa416b857469a80358cba426888c502e0e1a925dda26f5f826001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200073a57600080fd5b505afa1580156200074f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000779919081019062001010565b6200078362000d19565b83604051620007959392919062001309565b60405180910390a15050565b6000620007ad62000582565b6001600160a01b0316620007c062000d19565b6001600160a01b03161480620007f257506098546001600160a01b0316620007e762000d19565b6001600160a01b0316145b620008115760405162461bcd60e51b8152600401620002cb9062001408565b81609960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008b8b8b8b8b8b8b8b8b8b604051620008529062000d1d565b620008679a9998979695949392919062001339565b604051809103906000f08015801562000884573d6000803e3d6000fd5b50609780546001810182556000919091527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff90180546001600160a01b0319166001600160a01b0383161790559c9b505050505050505050505050565b6098546001600160a01b031681565b6098546000906001600160a01b03166200090862000d19565b6001600160a01b031614806200094157506200092362000582565b6001600160a01b03166200093662000d19565b6001600160a01b0316145b6200094b57600080fd5b60008054604051630d4d151360e01b81526001600160a01b0380881692630d4d151392620009839289928992911690600401620012db565b602060405180830381600087803b1580156200099e57600080fd5b505af1158015620009b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d99190620011a1565b90507f163ce421fac3059ce58ba6a093aff4bd0f6b3bb35c5c48acaf9c18b7626e86ce856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801562000a3657600080fd5b505afa15801562000a4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a75919081019062001010565b858360405162000a889392919062001309565b60405180910390a1949350505050565b62000aa262000582565b6001600160a01b0316336001600160a01b03161462000ac057600080fd5b600054604051630cd2e09d60e11b81526001600160a01b03909116906319a5c13a9062000af4908590859060040162001249565b600060405180830381600087803b15801562000b0f57600080fd5b505af115801562000b24573d6000803e3d6000fd5b505050505050565b62000b3662000d19565b6065546001600160a01b0390811691161462000b665760405162461bcd60e51b8152600401620002cb906200143d565b6001600160a01b03811662000b8f5760405162461bcd60e51b8152600401620002cb90620013c2565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b6000826001600160a01b0316846001600160a01b0316636352211e846040518263ffffffff1660e01b815260040162000c2591906200149a565b60206040518083038186803b15801562000c3e57600080fd5b505afa15801562000c53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c79919062000dc8565b6001600160a01b031614949350505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319062000cbc908590600401620011e8565b60206040518083038186803b15801562000cd557600080fd5b505afa15801562000cea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d109190620011a1565b90505b92915050565b3390565b612ca5806200153d83390190565b803562000d138162001523565b8035801515811462000d1357600080fd5b600082601f83011262000d5a578081fd5b813562000d7162000d6b82620014cb565b620014a3565b915080825283602082850101111562000d8957600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121562000db4578081fd5b813562000dc18162001523565b9392505050565b60006020828403121562000dda578081fd5b815162000dc18162001523565b6000806040838503121562000dfa578081fd5b823562000e078162001523565b915060208381013567ffffffffffffffff8082111562000e25578384fd5b818601915086601f83011262000e39578384fd5b81358181111562000e48578485fd5b62000e578485830201620014a3565b81815284810190848601875b8481101562000ede57813587016060818e03601f1901121562000e8457898afd5b62000e906060620014a3565b898201358881111562000ea1578b8cfd5b62000eb18f8c8386010162000d49565b8252506040828101358b830152606090920135918101919091528452928701929087019060010162000e63565b50979a909950975050505050505050565b6000806040838503121562000f02578182fd5b823562000f0f8162001523565b915062000f20846020850162000d38565b90509250929050565b6000806040838503121562000f3c578182fd5b823562000f498162001523565b9150602083013562000f5b8162001523565b809150509250929050565b60008060006060848603121562000f7b578081fd5b833562000f888162001523565b9250602084013562000f9a8162001523565b929592945050506040919091013590565b6000806040838503121562000fbe578182fd5b823562000fcb8162001523565b946020939093013593505050565b60008060006060848603121562000fee578283fd5b833562000ffb8162001523565b95602085013595506040909401359392505050565b60006020828403121562001022578081fd5b815167ffffffffffffffff81111562001039578182fd5b8201601f810184136200104a578182fd5b80516200105b62000d6b82620014cb565b81815285602083850101111562001070578384fd5b62001083826020830160208601620014f0565b95945050505050565b6000806000806000806000806000806101408b8d031215620010ac578586fd5b8a3567ffffffffffffffff80821115620010c4578788fd5b620010d28e838f0162000d49565b9b5060208d0135915080821115620010e8578788fd5b620010f68e838f0162000d49565b9a5060408d01359150808211156200110c578788fd5b506200111b8d828e0162000d49565b98505060608b0135965060808b013595506200113b8c60a08d0162000d2b565b94506200114c8c60c08d0162000d38565b93506200115d8c60e08d0162000d38565b92506101008b01359150620011778c6101208d0162000d2b565b90509295989b9194979a5092959850565b6000602082840312156200119a578081fd5b5035919050565b600060208284031215620011b3578081fd5b5051919050565b60008151808452620011d4816020860160208601620014f0565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b0383168152604060208083018290528351838301819052600092916060918286019080830287018401888401875b83811015620012cb57898303605f1901855281518051888552620012a589860182620011ba565b82890151868a0152918a0151948a0194909452948601949250908501906001016200127e565b50909a9950505050505050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b901515815260200190565b6000606082526200131e6060830186620011ba565b6001600160a01b039490941660208301525060400152919050565b60006101408083526200134f8184018e620011ba565b9050828103602084015262001365818d620011ba565b905082810360408401526200137b818c620011ba565b606084019a909a52505060808101969096526001600160a01b0394851660a087015292151560c086015290151560e085015261010084015216610120909101529392505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f496e76616c69642063616c6c65723a2063616e2774206465706c6f79204e4654604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600e908201526d2ab9b2b9103737ba1037bbb732b960911b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715620014c357600080fd5b604052919050565b600067ffffffffffffffff821115620014e2578081fd5b50601f01601f191660200190565b60005b838110156200150d578181015183820152602001620014f3565b838111156200151d576000848401525b50505050565b6001600160a01b03811681146200153957600080fd5b5056fe60806040523480156200001157600080fd5b5060405162002ca538038062002ca5833981016040819052620000349162000552565b89898982609d90805190602001906200004f929190620003e6565b5081516200006590609e906020850190620003e6565b5080516200007b90609f906020840190620003e6565b506200008e6380ac58cd60e01b62000145565b620000a0635b5e139f60e01b62000145565b620000b263780e9d6360e01b62000145565b505060d3805460ff19168615151761ff001916610100861515021790555060d482905560d287905560d7869055620000e9620001a0565b6200010d60008051602062002c858339815191526200010762000240565b62000244565b6200012860008051602062002c858339815191528262000244565b6200013560008662000244565b50505050505050505050620006d2565b6001600160e01b031980821614156200017b5760405162461bcd60e51b815260040162000172906200064d565b60405180910390fd5b6001600160e01b0319166000908152606560205260409020805460ff19166001179055565b600054610100900460ff1680620001bc5750620001bc62000254565b80620001cb575060005460ff16155b620001ea5760405162461bcd60e51b8152600401620001729062000684565b600054610100900460ff1615801562000216576000805460ff1961ff0019909116610100171660011790555b620002206200025a565b6200022a6200025a565b80156200023d576000805461ff00191690555b50565b3390565b620002508282620002e4565b5050565b303b1590565b600054610100900460ff16806200027657506200027662000254565b8062000285575060005460ff16155b620002a45760405162461bcd60e51b8152600401620001729062000684565b600054610100900460ff161580156200022a576000805460ff1961ff00199091166101001716600117905580156200023d576000805461ff001916905550565b600082815260a0602090815260409091206200030b91839062000ec06200035f821b17901c565b1562000250576200031b62000240565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000376836001600160a01b0384166200037f565b90505b92915050565b60006200038d8383620003ce565b620003c55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000379565b50600062000379565b60009081526001919091016020526040902054151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200042957805160ff191683800117855562000459565b8280016001018555821562000459579182015b82811115620004595782518255916020019190600101906200043c565b50620004679291506200046b565b5090565b5b808211156200046757600081556001016200046c565b80516001600160a01b03811681146200037957600080fd5b805180151581146200037957600080fd5b600082601f830112620004bc578081fd5b81516001600160401b0380821115620004d3578283fd5b6040516020601f8401601f1916820181018381118382101715620004f5578586fd5b806040525081945083825286818588010111156200051257600080fd5b600092505b8383101562000536578583018101518284018201529182019162000517565b83831115620005485760008185840101525b5050505092915050565b6000806000806000806000806000806101408b8d03121562000572578586fd5b8a516001600160401b038082111562000589578788fd5b620005978e838f01620004ab565b9b5060208d0151915080821115620005ad578788fd5b620005bb8e838f01620004ab565b9a5060408d0151915080821115620005d1578788fd5b50620005e08d828e01620004ab565b98505060608b0151965060808b01519550620006008c60a08d0162000482565b9450620006118c60c08d016200049a565b9350620006228c60e08d016200049a565b92506101008b015191506200063c8c6101208d0162000482565b90509295989b9194979a5092959850565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6125a380620006e26000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063b4ce37d2116100a2578063d547741f11610071578063d547741f14610408578063e63ab1e91461041b578063e985e9c514610423578063f7b1080814610436576101f0565b8063b4ce37d2146103c7578063b88d4fde146103cf578063c87b56dd146103e2578063ca15c873146103f5576101f0565b806391d14854116100de57806391d148541461039157806395d89b41146103a4578063a217fddf146103ac578063a22cb465146103b4576101f0565b806370a082311461035b57806375071d2a1461036e5780638291286c146103765780639010d07c1461037e576101f0565b80632f2ff15d1161018757806342842e0e1161015657806342842e0e1461030f57806342966c68146103225780634f6ccce7146103355780636352211e14610348576101f0565b80632f2ff15d146102b65780632f745c59146102c957806336568abe146102dc57806338e5cdce146102ef576101f0565b80630d4d1513116101c35780630d4d15131461026857806318160ddd1461028857806323b872dd14610290578063248a9ca3146102a3576101f0565b806301ffc9a7146101f557806306fdde031461021e578063081812fc14610233578063095ea7b314610253575b600080fd5b610208610203366004611cfa565b610458565b6040516102159190611e51565b60405180910390f35b610226610477565b6040516102159190611e65565b610246610241366004611c9d565b61050d565b6040516102159190611e00565b610266610261366004611c31565b610559565b005b61027b610276366004611c5c565b6105f1565b6040516102159190611e5c565b61027b6107a5565b61026661029e366004611b19565b6107b6565b61027b6102b1366004611c9d565b6107cc565b6102666102c4366004611cb5565b6107e1565b61027b6102d7366004611c31565b610829565b6102666102ea366004611cb5565b610854565b6103026102fd366004611c9d565b610896565b6040516102159190612438565b61026661031d366004611b19565b610960565b610266610330366004611c9d565b61097b565b61027b610343366004611c9d565b6109e7565b610246610356366004611c9d565b6109fd565b61027b610369366004611ac5565b610a25565b61027b610a6e565b61027b610a80565b61024661038c366004611cd9565b610a86565b61020861039f366004611cb5565b610a9e565b610226610ab6565b61027b610b17565b6102666103c2366004611c00565b610b1c565b610226610bea565b6102666103dd366004611b59565b610c78565b6102266103f0366004611c9d565b610cb7565b61027b610403366004611c9d565b610d70565b610266610416366004611cb5565b610d87565b61027b610dc1565b610208610431366004611ae1565b610de5565b610449610444366004611c9d565b610e13565b60405161021593929190611e78565b6001600160e01b03191660009081526065602052604090205460ff1690565b609d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105035780601f106104d857610100808354040283529160200191610503565b820191906000526020600020905b8154815290600101906020018083116104e657829003601f168201915b5050505050905090565b600061051882610ed5565b61053d5760405162461bcd60e51b8152600401610534906121ec565b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b6000610564826109fd565b9050806001600160a01b0316836001600160a01b031614156105985760405162461bcd60e51b815260040161053490612320565b806001600160a01b03166105aa610ee2565b6001600160a01b031614806105c657506105c681610431610ee2565b6105e25760405162461bcd60e51b8152600401610534906120ce565b6105ec8383610ee6565b505050565b60d354600090610100900460ff161580610626575060d354610100900460ff168015610626575060d4546106236107a5565b11155b6106425760405162461bcd60e51b81526004016105349061225d565b61065c60008051602061252583398151915261039f610ee2565b6106785760405162461bcd60e51b815260040161053490612238565b600061068385610f54565b90506000600160d75411156106a35760d7546106a0908690610f77565b90505b6060600080866001600160a01b0316635498d4c060d254600101866040518363ffffffff1660e01b81526004016106db929190612474565b60006040518083038186803b1580156106f357600080fd5b505afa158015610707573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072f9190810190611d32565b92509250925060405180606001604052808481526020018381526020018281525060d66000878152602001908152602001600020600082015181600001908051906020019061077f929190611a0e565b5060208201516001820155604090910151600290910155509293505050505b9392505050565b60006107b16099610fb9565b905090565b6107c1838383610fc4565b6105ec838383611032565b600090815260a0602052604090206002015490565b600082815260a060205260409020600201546107ff9061039f610ee2565b61081b5760405162461bcd60e51b815260040161053490611edf565b610825828261106a565b5050565b6001600160a01b038216600090815260986020526040812061084b90836110d3565b90505b92915050565b61085c610ee2565b6001600160a01b0316816001600160a01b03161461088c5760405162461bcd60e51b8152600401610534906123e9565b61082582826110df565b61089e611a8c565b600082815260d660209081526040918290208251815460026001821615610100026000190190911604601f8101849004909302810160809081019094526060810183815290939192849284919084018282801561093c5780601f106109115761010080835404028352916020019161093c565b820191906000526020600020905b81548152906001019060200180831161091f57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050919050565b6105ec83838360405180602001604052806000815250610c78565b610983610ee2565b6001600160a01b0316610995826109fd565b6001600160a01b031614806109bf57506109bf60008051602061252583398151915261039f610ee2565b6109db5760405162461bcd60e51b815260040161053490612238565b6109e481611148565b50565b6000806109f56099846111d7565b509392505050565b600061084e8260405180606001604052806029815260200161254560299139609991906111f3565b60006001600160a01b038216610a4d5760405162461bcd60e51b81526004016105349061212b565b6001600160a01b038216600090815260986020526040902061084e90610fb9565b60008051602061252583398151915281565b60d25481565b600082815260a06020526040812061084b90836110d3565b600082815260a06020526040812061084b9083611208565b609e8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105035780601f106104d857610100808354040283529160200191610503565b600081565b610b24610ee2565b6001600160a01b0316826001600160a01b03161415610b555760405162461bcd60e51b815260040161053490611ffb565b80609c6000610b62610ee2565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610ba6610ee2565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610bde9190611e51565b60405180910390a35050565b609f805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b505050505081565b610c89610c83610ee2565b8361121d565b610ca55760405162461bcd60e51b815260040161053490612398565b610cb18484848461129a565b50505050565b6060610cc282610ed5565b610cde5760405162461bcd60e51b8152600401610534906122d1565b609f805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b50505050509050919050565b600081815260a06020526040812061084e90610fb9565b600082815260a06020526040902060020154610da59061039f610ee2565b61088c5760405162461bcd60e51b81526004016105349061207e565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b60d66020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015610eaa5780601f10610e7f57610100808354040283529160200191610eaa565b820191906000526020600020905b815481529060010190602001808311610e8d57829003601f168201915b5050505050908060010154908060020154905083565b600061084b836001600160a01b0384166112cd565b600061084e609983611317565b3390565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f1b826109fd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610f616097611323565b9050610f6d8382611327565b61084e60976113eb565b600061084b83836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f00000000000000008152506113f4565b600061084e82611323565b60d35460ff1680610fea5750610fea60008051602061252583398151915261039f610ee2565b80611016575060d35460ff16158015611016575061101660008051602061252583398151915283610a9e565b6105ec5760405162461bcd60e51b815260040161053490612361565b61104361103d610ee2565b8261121d565b61105f5760405162461bcd60e51b815260040161053490612398565b6105ec838383611428565b600082815260a0602052604090206110829082610ec0565b156108255761108f610ee2565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061084b8383611536565b600082815260a0602052604090206110f7908261157b565b1561082557611104610ee2565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611153826109fd565b905061116181600084610fc4565b61116c600083610ee6565b6001600160a01b038116600090815260986020526040902061118e9083611590565b5061119a60998361159c565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008080806111e686866115a8565b9097909650945050505050565b6000611200848484611604565b949350505050565b600061084b836001600160a01b038416611663565b600061122882610ed5565b6112445760405162461bcd60e51b815260040161053490612032565b600061124f836109fd565b9050806001600160a01b0316846001600160a01b0316148061128a5750836001600160a01b031661127f8461050d565b6001600160a01b0316145b8061120057506112008185610de5565b6112a5848484611428565b6112b18484848461167b565b610cb15760405162461bcd60e51b815260040161053490611f2e565b60006112d98383611663565b61130f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561084e565b50600061084e565b600061084b8383611663565b5490565b6001600160a01b03821661134d5760405162461bcd60e51b8152600401610534906121b7565b61135681610ed5565b156113735760405162461bcd60e51b815260040161053490611f80565b61137f60008383610fc4565b6001600160a01b03821660009081526098602052604090206113a190826117b5565b506113ae609982846117c1565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b600081836114155760405162461bcd60e51b81526004016105349190611e65565b5082848161141f57fe5b06949350505050565b826001600160a01b031661143b826109fd565b6001600160a01b0316146114615760405162461bcd60e51b815260040161053490612288565b6001600160a01b0382166114875760405162461bcd60e51b815260040161053490611fb7565b611492838383610fc4565b61149d600082610ee6565b6001600160a01b03831660009081526098602052604090206114bf9082611590565b506001600160a01b03821660009081526098602052604090206114e290826117b5565b506114ef609982846117c1565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b815460009082106115595760405162461bcd60e51b815260040161053490611e9d565b82600001828154811061156857fe5b9060005260206000200154905092915050565b600061084b836001600160a01b0384166117d7565b600061084b83836117d7565b600061084b838361189d565b8154600090819083106115cd5760405162461bcd60e51b815260040161053490612175565b60008460000184815481106115de57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816116345760405162461bcd60e51b81526004016105349190611e65565b5084600001600182038154811061164757fe5b9060005260206000209060020201600101549150509392505050565b60009081526001919091016020526040902054151590565b600061168f846001600160a01b0316611971565b61169b57506001611200565b600060606001600160a01b038616630a85bd0160e11b6116b9610ee2565b8988886040516024016116cf9493929190611e14565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161170d9190611de4565b6000604051808303816000865af19150503d806000811461174a576040519150601f19603f3d011682016040523d82523d6000602084013e61174f565b606091505b509150915081611781578051156117695780518082602001fd5b60405162461bcd60e51b815260040161053490611f2e565b6000818060200190518101906117979190611d16565b6001600160e01b03191663e8cb20b760e01b14935061120092505050565b600061084b83836112cd565b600061120084846001600160a01b038516611977565b60008181526001830160205260408120548015611893578354600019808301919081019060009087908390811061180a57fe5b906000526020600020015490508087600001848154811061182757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061185757fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061084e565b600091505061084e565b6000818152600183016020526040812054801561189357835460001980830191908101906000908790839081106118d057fe5b90600052602060002090600202019050808760000184815481106118f057fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061192f57fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061084e9350505050565b3b151590565b6000828152600184016020526040812054806119dc57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561079e565b828560000160018303815481106119ef57fe5b906000526020600020906002020160010181905550600091505061079e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a4f57805160ff1916838001178555611a7c565b82800160010185558215611a7c579182015b82811115611a7c578251825591602001919060010190611a61565b50611a88929150611ab0565b5090565b60405180606001604052806060815260200160008152602001600080191681525090565b5b80821115611a885760008155600101611ab1565b600060208284031215611ad6578081fd5b813561079e816124f9565b60008060408385031215611af3578081fd5b8235611afe816124f9565b91506020830135611b0e816124f9565b809150509250929050565b600080600060608486031215611b2d578081fd5b8335611b38816124f9565b92506020840135611b48816124f9565b929592945050506040919091013590565b60008060008060808587031215611b6e578081fd5b8435611b79816124f9565b93506020850135611b89816124f9565b925060408501359150606085013567ffffffffffffffff811115611bab578182fd5b8501601f81018713611bbb578182fd5b8035611bce611bc9826124a9565b612482565b818152886020838501011115611be2578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215611c12578182fd5b8235611c1d816124f9565b915060208301358015158114611b0e578182fd5b60008060408385031215611c43578182fd5b8235611c4e816124f9565b946020939093013593505050565b600080600060608486031215611c70578283fd5b8335611c7b816124f9565b9250602084013591506040840135611c92816124f9565b809150509250925092565b600060208284031215611cae578081fd5b5035919050565b60008060408385031215611cc7578182fd5b823591506020830135611b0e816124f9565b60008060408385031215611ceb578182fd5b50508035926020909101359150565b600060208284031215611d0b578081fd5b813561079e8161250e565b600060208284031215611d27578081fd5b815161079e8161250e565b600080600060608486031215611d46578081fd5b835167ffffffffffffffff811115611d5c578182fd5b8401601f81018613611d6c578182fd5b8051611d7a611bc9826124a9565b818152876020838501011115611d8e578384fd5b611d9f8260208301602086016124cd565b6020870151604090970151909896975095945050505050565b60008151808452611dd08160208601602086016124cd565b601f01601f19169290920160200192915050565b60008251611df68184602087016124cd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e4790830184611db8565b9695505050505050565b901515815260200190565b90815260200190565b60006020825261084b6020830184611db8565b600060608252611e8b6060830186611db8565b60208301949094525060400152919050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252600b908201526a139bdd08185b1b1bddd95960aa1b604082015260600190565b60208082526011908201527013919508131a5b5a5d081c995858da1959607a1b604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b6020808252601b908201527f45787465726e616c20747261646573206e6f7420616c6c6f7765640000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6000602082528251606060208401526124546080840182611db8565b905060208401516040840152604084015160608401528091505092915050565b918252602082015260400190565b60405181810167ffffffffffffffff811182821017156124a157600080fd5b604052919050565b600067ffffffffffffffff8211156124bf578081fd5b50601f01601f191660200190565b60005b838110156124e85781810151838201526020016124d0565b83811115610cb15750506000910152565b6001600160a01b03811681146109e457600080fd5b6001600160e01b0319811681146109e457600080fdfe5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea26469706673582212203068637f2f7eb74c7daecdceb5545fcfed8c88ab056e5e3135cb6880aa9995ae64736f6c634300060c00335719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43fa264697066735822122030e571222e1cb704983df79c96704dbff086946528146293b4446ce89e55340564736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13673,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "_storage",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(YGYStorageV1)15395"
      },
      {
        "astId": 195,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 263,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 188,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 565,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 683,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8984,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "contracts",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8986,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "bondedContract",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 8988,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "ramVault",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IRAMVault)15799"
      },
      {
        "astId": 8992,
        "contract": "contracts/NFTFactory.sol:NFTFactory",
        "label": "inUse",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRAMVault)15799": {
        "encoding": "inplace",
        "label": "contract IRAMVault",
        "numberOfBytes": "20"
      },
      "t_contract(YGYStorageV1)15395": {
        "encoding": "inplace",
        "label": "contract YGYStorageV1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}